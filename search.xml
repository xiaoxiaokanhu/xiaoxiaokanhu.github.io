<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ssh 免密码登录</title>
      <link href="/2018/11/08/ssh%20%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
      <url>/2018/11/08/ssh%20%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>通常的ssh登录有两种方式，一种是通过密码登录，一种是通过密钥登录，在实际使用过程中，会发现用密码登录很繁琐，需要每次都输入密码，这时候用密钥登录就会很方便。<br><a id="more"></a></p><h3 id="密码登录"><a href="#密码登录" class="headerlink" title="密码登录"></a>密码登录</h3><p><strong>格式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@10.2.8.41</span><br><span class="line">root@10.2.8.41&apos;s password:</span><br></pre></td></tr></table></figure></p><p>这时候输入密码就可以登录成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@10.2.8.41</span><br><span class="line">root@10.2.8.41&apos;s password:</span><br><span class="line">Last login: Thu Nov  1 11:34:05 2018 from 10.2.0.33</span><br><span class="line">[root@hardwareupdate ~]#</span><br></pre></td></tr></table></figure></p><h3 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h3><h5 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ ssh-keygen -t rsa  &lt;== 建立密钥对</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): &lt;== 按 Enter</span><br><span class="line">Created directory &apos;/root/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase): &lt;== 输入密钥锁码，或直接按 Enter 留空</span><br><span class="line">Enter same passphrase again: &lt;== 再输入一遍密钥锁码</span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa. &lt;== 私钥</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub. &lt;== 公钥</span><br><span class="line">The key fingerprint is:</span><br><span class="line">0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 root@host</span><br></pre></td></tr></table></figure><p>密钥生成以后，在.ssh下面会多两个文件，<code>id_rsa.pub</code>是公钥，<code>id_rsa</code>是私钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ cd ~/.ssh</span><br><span class="line">[root@host .ssh]$ ls</span><br><span class="line">id_rsa id_rsa.pub known_hosts config</span><br></pre></td></tr></table></figure></p><p>然后把公钥上传到服务器上，<code>scp</code>等同于<code>ssh-copy-id -i</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@A ~]# scp /root/.ssh/id_rsa.pub root@192.168.1.181:/root/.ssh/authorized_keys  </span><br><span class="line">root@192.168.1.181&apos;s password:</span><br><span class="line">id_rsa.pub                                    100%  223     0.2KB/s   00:00</span><br></pre></td></tr></table></figure></p><p>由于还没有免密码登录的，所以要输入一次服务器的密码登录,如果服务器没有authorized_keys文件，用touch authorized_keys 创建</p><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p>登录服务器，进入.ssh里面，给authorized_keys设置权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ cd ~/.ssh</span><br><span class="line">[root@host .ssh]$ ls</span><br><span class="line">authorized_keys  known_hosts</span><br><span class="line">[root@host .ssh]$ chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></p><h5 id="本地配置权限"><a href="#本地配置权限" class="headerlink" title="本地配置权限"></a>本地配置权限</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ cd ~/.ssh</span><br><span class="line">[root@host .ssh]$ chmod 600 id_rsa</span><br></pre></td></tr></table></figure><p>这时候就可以用密钥登录了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa root@192.168.100.39</span><br></pre></td></tr></table></figure></p><h3 id="用config去管理"><a href="#用config去管理" class="headerlink" title="用config去管理"></a>用config去管理</h3><p>用<code>ssh -i ~/.ssh/id_rsa root@192.168.100.39</code>登录时很繁琐的，这时候就可以用config去管理</p><p><strong>例如</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ~/.ssh/config 文件示例</span><br><span class="line"># Host 参数标明以下内容仅适用于访问 236 主机时适用，Host 参数本身只是一个入口字符串；</span><br><span class="line">Host fuwuqi</span><br><span class="line">　　HostName 192.168.99.236</span><br><span class="line">　　User git</span><br><span class="line">　　Port 22</span><br><span class="line">　　IdentityFile ~/.ssh/rsa-michael-236</span><br><span class="line">Host github</span><br><span class="line">　　HostName 192.168.99.3</span><br><span class="line">　　User root</span><br><span class="line">　　Port 22</span><br><span class="line">　　IdentityFile ~/.ssh/rsa-3root-michael</span><br></pre></td></tr></table></figure></p><p>配置完这些以后，就可以用这个登录了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~] ssh fuwuqi</span><br><span class="line">Last login: Thu Nov  8 09:40:00 2018 from 192.168.99.236</span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>centos7 安装zsh和oh-my-zsh</title>
      <link href="/2018/11/06/centos7-%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/"/>
      <url>/2018/11/06/centos7-%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/</url>
      
        <content type="html"><![CDATA[<p>目前的centos系统默认的shell还是bash，但是zsh被称为终极shell，国外有个程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」，Github 网址是：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a> 有了这玩意zsh用起来直接就变成神器了。<br><a id="more"></a></p><h4 id="查看系统当前的shell"><a href="#查看系统当前的shell" class="headerlink" title="查看系统当前的shell"></a>查看系统当前的shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><p>返回的结果是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash</span><br></pre></td></tr></table></figure></p><h3 id="查看bin下是否有zsh包"><a href="#查看bin下是否有zsh包" class="headerlink" title="查看bin下是否有zsh包"></a>查看bin下是否有zsh包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line">**********************************************</span><br><span class="line">返回的结果是:</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br><span class="line">PS.默认没有安装zsh</span><br></pre></td></tr></table></figure><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y zsh</span><br></pre></td></tr></table></figure><p>然后在输入<code>cat /etc/shells</code>查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>将zsh设置成默认的shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/4060631-102e57784c72f94b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/708/format/webp" alt=""><br>设置完以后不会立即生效，需要重启方能生效，所以我们可以配置完oh-my-zsh以后再重启</p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><p>如果出现以下界面表示成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__                                     __   </span><br><span class="line">  ____  / /_     ____ ___  __  __   ____  _____/ /_  </span><br><span class="line"> / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ </span><br><span class="line">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / </span><br><span class="line">\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  </span><br><span class="line">                        /____/                       ....is now installed!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line"></span><br><span class="line">p.s. Follow us at https://twitter.com/ohmyzsh.</span><br><span class="line"></span><br><span class="line">p.p.s. Get stickers and t-shirts at http://shop.planetargon.com.</span><br></pre></td></tr></table></figure><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p><em>主题链接地址</em> <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">oh-my-zsh主题</a></p><p>目前我使用的主题是<code>bira</code><br><img src="https://cloud.githubusercontent.com/assets/2618447/6316716/51a0708e-ba00-11e4-8664-11a804f2fe3f.png" alt=""></p><p><strong>修改主题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>刚安装oh-my-zsh默认的主题是robbyrussell，将<code>ZSH_THEME</code>改成<code>bira</code></p><p><strong>更新配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后重启, 使zsh配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>对Python装饰器的一些理解</title>
      <link href="/2018/10/31/%E5%AF%B9Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
      <url>/2018/10/31/%E5%AF%B9Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-装饰器的定义"><a href="#1-装饰器的定义" class="headerlink" title="1.装饰器的定义"></a>1.装饰器的定义</h2><p>装饰器是对在运行期间对函数进行一些外部功能的扩展。也就是在其他函数不需要做任何代码变动的前提下增加额外功能。<br><a id="more"></a></p><h2 id="2-装饰器的应用场景"><a href="#2-装饰器的应用场景" class="headerlink" title="2.装饰器的应用场景"></a>2.装饰器的应用场景</h2><p>插入日志、性能测试、事务处理、缓存、权限校验等场景</p><p><strong>例如</strong><br>我们在接收请求的时候多会看是否包含某一个元素。比如查看是否包含有code,如果有code，就打印错误并且ruturn返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def requestedCode(*params):</span><br><span class="line">    def _wrapper(func):</span><br><span class="line">        def wrappered(*args, **kwargs):</span><br><span class="line">            print(&apos;%s is running&apos; % func.__name__)</span><br><span class="line">            for code in params:</span><br><span class="line">                print(&apos;错误错误&apos;)</span><br><span class="line">                return</span><br><span class="line">            return func(*args, *kwargs)</span><br><span class="line"></span><br><span class="line">        return wrappered</span><br><span class="line">    return _wrapper</span><br><span class="line">    </span><br><span class="line">@requestedCode(&apos;code&apos;)</span><br><span class="line">def hello_world():</span><br><span class="line">    print(&apos;i am world&apos;)</span><br><span class="line">    </span><br><span class="line">print(hello_world())</span><br></pre></td></tr></table></figure><h2 id="3-装饰器使用-functools-wraps-的理由"><a href="#3-装饰器使用-functools-wraps-的理由" class="headerlink" title="3.装饰器使用 @functools.wraps 的理由"></a>3.装饰器使用 @functools.wraps 的理由</h2><p>Python 中使用装饰器对在运行期对函数进行一些外部功能的扩展。但是在使用过程中，由于装饰器的加入导致解释器认为函数本身发生了改变，在某些情况下——比如测试时——会导致一些问题。Python 通过 functool.wraps 为我们解决了这个问题：在编写装饰器时，在实现前加入 @functools.wraps(func) 可以保证装饰器不会对被装饰函数造成影响。比如，在 Flask 中，我们要自己重写 login_required 装饰器，但不想影响被装饰器装饰的方法，则 login_required 装饰器本身可以写成下面的样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def login_required_(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def decorated_view(*args, **kwargs):</span><br><span class="line">        if current_app.login_manager._login_disabled:</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line">        elif not current_user.is_authenticated:</span><br><span class="line">            # return current_app.login_manager.unauthorized()</span><br><span class="line">            return redirect(url_for(&quot;login.loginPage&quot;, next=request.url))</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    return decorated_view</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/26930016" target="_blank" rel="noopener">如何理解Python装饰器？</a><br><a href="http://blog.csdn.net/tiwoo/article/details/50835337" target="_blank" rel="noopener">Python 中实现装饰器时使用 @functools.wraps 的理由</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python基础学习----切片、迭代、列表生成式</title>
      <link href="/2018/10/31/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%88%87%E7%89%87%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
      <url>/2018/10/31/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%88%87%E7%89%87%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>通常我们取list里面的元素会这样写<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;]</span><br><span class="line">list[0] list[1] list[2]</span><br><span class="line">取n个的话：</span><br><span class="line">for i in range(3):</span><br><span class="line">   list[i]</span><br></pre></td></tr></table></figure></p><p>但是这样用循环很麻烦，可以这样做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list[0:3]  #这样取的是从0开始，往后数3个数</span><br><span class="line">list[1:3]  #这样取的是从1开始，往后数2个数</span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>   如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代。在Python中，迭代是通过for … in来完成的<br><br>    在Python不是都是迭代的，所以有时候需要判断是否可以迭代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable) # str是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([1,2,3], Iterable) # list是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Iterable) # 整数是否可迭代</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>列表生成式是Python中内置的非常简单却非常强大的可以用来创建list的生成式。<br>例如要生成list <code>[1,2,3,4,5,6,7,8,9]</code>,可以用<code>list(range(1,10))</code><br>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？<br><br>方法一是循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = []</span><br><span class="line">&gt;&gt;&gt; for x in range(1, 11):</span><br><span class="line">...    L.append(x * x)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>方法二：列表生成式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(1,10)]</span><br><span class="line">得出：</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure><p>列表生成式还有其他的用法<br><br>*在for循环后面加if判断语句<br><br>例如：仅偶数的平方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(1,11) if x % 2 == 0 ]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br></pre></td></tr></table></figure><p>*使用两层循环,生成全排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</span><br><span class="line">[&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;]</span><br></pre></td></tr></table></figure><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>判断是否可以迭代，在用列表生成式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">L = [&apos;Hello&apos;, &apos;World&apos;, 18, &apos;Apple&apos;, None]</span><br><span class="line">[x for x in L if isinstance(x,str) == True]</span><br><span class="line">结果：</span><br><span class="line">[&apos;Hello&apos;, &apos;World&apos;, &apos;Apple&apos;]</span><br></pre></td></tr></table></figure><p>注：文章是在廖雪峰大大的网站学习后写下的学习摘要。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Flask 上下文全局变量</title>
      <link href="/2018/10/31/Flask-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
      <url>/2018/10/31/Flask-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">上下文</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">current_app</td><td style="text-align:left">程序上下文</td><td style="text-align:left">当前激活程序的程序实例</td></tr><tr><td style="text-align:left">g</td><td style="text-align:left">程序上下文</td><td style="text-align:left">处理请求时用作临时存储的对象，每次请求都会重设这个变量</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">请求上下文</td><td style="text-align:left">请求对象，封装了客户端发出的HTTP请求中的内容</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">请求上下文</td><td style="text-align:left">用户会话，用于存储请求之间需要记住的值的词典</td></tr></tbody></table><p>Flask 在分发请求之前激活(或推送)程序和请求上下文，请求处理完成后再将其删除。程 序上下文被推送后，就可以在线程中使用 current_app 和 g 变量。类似地，请求上下文被 推送后，就可以使用 request 和 session 变量。如果使用这些变量时我们没有激活程序上 下文或请求上下文，就会导致错误。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>flask下 gunicorn在Python中的使用</title>
      <link href="/2018/10/31/flask%E4%B8%8B-gunicorn%E5%9C%A8Python%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/flask%E4%B8%8B-gunicorn%E5%9C%A8Python%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>gunicorn使用非常简单，并且也非常好用，所以需要写一下自己的理解。😀<br><a id="more"></a></p><p>使用gunicorn的使用，需先安装flask,安装方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><p>下面为一个简单的用flask写的web服务,main.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return &apos;hello world&apos;</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.debug = True</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>gunicorn的作用就是用命令行来启动服务器。安装如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><p>最简单的启动命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn main:app</span><br></pre></td></tr></table></figure></p><p> 其中code就是指main.py.app就是那个wsgifunc的名字。<br> 这样运行的话， gunicorn 默认作为一个监听 127.0.0.1:8000 的web server，可以在本机通过： <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 访问。<br>如果要通过网络访问，则需要绑定不同的地址（也可以同时设置监听端口），设置0.0.0.0可以监听到所有ip的请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -b 0.0.0.0:8080 main:app</span><br></pre></td></tr></table></figure></p><p>在多核服务器上，为了支持更多的并发访问并充分利用资源，可以使用更多的 gunicorn 进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w 4 main:app</span><br></pre></td></tr></table></figure></p><p>两者结合到一起就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w 4 -b 0.0.0.0:8080 main:app</span><br></pre></td></tr></table></figure></p><h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：<br></h4><ul><li>-b 表示 gunicorn 开发的访问地址 <br></li><li>-w 表示开启多少个线程</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python之random的send()的使用</title>
      <link href="/2018/10/31/Python%E4%B9%8Brandom%E7%9A%84send-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/Python%E4%B9%8Brandom%E7%9A%84send-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>对于send方法的定义，在一篇文章中看到这样一个定义，发现很符合这个解释<br><a id="more"></a><br><code>seed( ) 用于指定随机数生成时所用算法开始的整数值，如果使用相同的seed( )值，则每次生成的随即数都相同，如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同</code></p><p>情况下面的几行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">random.seed(5)</span><br><span class="line">print (&quot;random 5 is &quot;, random.random())</span><br><span class="line">random.seed(10)</span><br><span class="line">print (&quot;random 10 is &quot;, random.random())</span><br><span class="line">random.seed(7)</span><br><span class="line">print (&quot;random 7 is &quot;, random.random())</span><br><span class="line">random.seed(5)</span><br><span class="line">print(&quot;random 5 is &quot;, random.random())</span><br></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random 5 is  0.6229016948897019</span><br><span class="line">random 10 is  0.5714025946899135</span><br><span class="line">random 7 is  0.32383276483316237</span><br><span class="line">random 5 is  0.6229016948897019</span><br></pre></td></tr></table></figure><p>你会发现当seed()值是一样的时候，输出的结果是一样的。而不一样的值得出的结果不一样。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>python之random的random的使用</title>
      <link href="/2018/10/31/python%E4%B9%8Brandom%E7%9A%84random%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/python%E4%B9%8Brandom%E7%9A%84random%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>random.random()生成0和1之间的随机浮点数float<br><a id="more"></a><br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print (&quot;random 7 is &quot;, random.random())</span><br></pre></td></tr></table></figure><p>运行结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random 7 is  0.32383276483316237</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>利用tablib、make_response 进行文件的下载</title>
      <link href="/2018/10/31/%E5%88%A9%E7%94%A8tablib%E3%80%81make-response-%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
      <url>/2018/10/31/%E5%88%A9%E7%94%A8tablib%E3%80%81make-response-%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>tablib 主要作用是将数据导出为各种不同的格式，包括excel，json，html，yaml，csv，tsv等格式。使用起来也非常简单。<br><a id="more"></a></p><p>tablib的下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tablib</span><br></pre></td></tr></table></figure></p><p>下面就是文件下载的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import tablib</span><br><span class="line">from flask import make_response</span><br><span class="line">def file_download():</span><br><span class="line"> dataset1 = tablib.Dataset()</span><br><span class="line">    header1 = (&apos;ID&apos;, &apos;Name&apos;, &apos;Tel&apos;, &apos;Age&apos;)</span><br><span class="line">    dataset1.headers = header1</span><br><span class="line">    dataset1.append([1, &apos;zhangsands&apos;, 13711111111, 16])</span><br><span class="line">    dataset1.append([2, &apos;lisiasfasd阿斯顿发gwus&apos;, 13911111111, 20])</span><br><span class="line">    dataset1.append([4, &apos;zhao发送到li2u&apos;, 15811111111, 25])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    header2 = (&apos;ID&apos;, &apos;Name&apos;, &apos;Tel&apos;, &apos;Age&apos;)</span><br><span class="line">    data2 = [</span><br><span class="line">        [1, &apos;zhangsan&apos;, 13711111111, 16],</span><br><span class="line">        [2, &apos;lisi&apos;, 13811111111, 18],</span><br><span class="line">        [3, &apos;wangwu&apos;, 13911111111, 20],</span><br><span class="line">        [4, &apos;zhaoliu&apos;, 15811111111, 25]</span><br><span class="line">    ]</span><br><span class="line">    dataset2 = tablib.Dataset(*data2, headers=header2)</span><br><span class="line"></span><br><span class="line">    dataset1.title = &apos;dataset1&apos;  # 设置Excel中表单的名称</span><br><span class="line">    dataset2.title = &apos;dataset2&apos;</span><br><span class="line">    </span><br><span class="line">      # 如果有多个sheet表单，使用DataBook就可以了</span><br><span class="line">    myDataBook = tablib.Databook((dataset1, dataset2))</span><br><span class="line">    ds = myDataBook.export(&apos;xlsx&apos;)</span><br><span class="line"></span><br><span class="line">    response = make_response(ds)</span><br><span class="line">    response.headers[&apos;Content-Disposition&apos;] = &apos;attachment; filename=&#123;&#125;&apos;.format(&apos;dhel.xlsx&apos;)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure></p><p>引用：<br><a href="https://blog.csdn.net/calling_wisdom/article/details/41447791" target="_blank" rel="noopener">Python tablib模块</a><br><a href="http://docs.python-tablib.org/en/master/" target="_blank" rel="noopener">tablib文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>pip 升级所遇到的问题</title>
      <link href="/2018/10/31/pip-%E5%8D%87%E7%BA%A7%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/31/pip-%E5%8D%87%E7%BA%A7%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>pip的原有版本是9.0.1，最近发现pip可以升级了，想到pip升级到10以上用了下面各种方法，都不管用,如下：<br><a id="more"></a><br>用了mac/limux方法 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> pip install -U pip </span><br><span class="line">easy_install  --upgrade pip</span><br><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure></p><p>用了windows 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br><span class="line">python -m pip install -U pip</span><br></pre></td></tr></table></figure></p><p>最后从源头做起，里面搞定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py | python3</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>pip安装时ReadTimeoutError解决办法</title>
      <link href="/2018/10/31/pip%E5%AE%89%E8%A3%85%E6%97%B6ReadTimeoutError%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/10/31/pip%E5%AE%89%E8%A3%85%E6%97%B6ReadTimeoutError%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>有一个本地服务器，网速很慢，下载老是出错，出现<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip._vendor.urllib3.exceptions.ReadTimeoutError: </span><br><span class="line">HTTPSConnectionPool(host=&apos;files.pythonhosted.org&apos;, port=443): Read timed out.</span><br></pre></td></tr></table></figure></p><p>经过google，发现用下面的内容就可以完美解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --default-timeout=100 install gevent</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>安装PyCrypto以后出现的错误</title>
      <link href="/2018/10/31/%E5%AE%89%E8%A3%85PyCrypto%E4%BB%A5%E5%90%8E%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/31/%E5%AE%89%E8%A3%85PyCrypto%E4%BB%A5%E5%90%8E%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p> 最近另一个同事安装了PyCrypto，并且在本地和服务器运行都没有错误。当我download下来的时候，安装PyCrypto，运行竟然出现了错误。如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">homeassistant  | 16-07-01 18:35:24 ERROR (MainThread) [homeassistant.bootstrap] Error during setup of component wink</span><br><span class="line">homeassistant  | Traceback (most recent call last):</span><br><span class="line">homeassistant  |   File &quot;/usr/src/app/homeassistant/bootstrap.py&quot;, line 150, in _setup_component</span><br><span class="line">homeassistant  |     if not component.setup(hass, config):</span><br><span class="line">homeassistant  |   File &quot;/usr/src/app/homeassistant/components/wink.py&quot;, line 29, in setup</span><br><span class="line">homeassistant  |     from pubnub import Pubnub</span><br><span class="line">homeassistant  |   File &quot;/usr/local/lib/python3.4/site-packages/pubnub.py&quot;, line 25, in &lt;module&gt;</span><br><span class="line">homeassistant  |     from Crypto.Cipher import AES</span><br><span class="line">homeassistant  |   File &quot;/usr/local/lib/python3.4/site-packages/Crypto/Cipher/__init__.py&quot;, line 78, in &lt;module&gt;</span><br><span class="line">homeassistant  |     from Crypto.Cipher._mode_ecb import _create_ecb_cipher</span><br><span class="line">homeassistant  |   File &quot;/usr/local/lib/python3.4/site-packages/Crypto/Cipher/_mode_ecb.py&quot;, line 29, in &lt;module&gt;</span><br><span class="line">homeassistant  |     from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,</span><br><span class="line">homeassistant  |   File &quot;/usr/local/lib/python3.4/site-packages/Crypto/Util/_raw_api.py&quot;, line 33, in &lt;module&gt;</span><br><span class="line">homeassistant  |     from Crypto.Util.py3compat import byte_string</span><br><span class="line">homeassistant  | ImportError: cannot import name &apos;byte_string&apos;</span><br></pre></td></tr></table></figure></p><p>解决办法是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 uninstall pycrypto</span><br><span class="line">pip3 uninstall pycryptodome</span><br><span class="line">pip3 install pycryptodome</span><br></pre></td></tr></table></figure></p><p>这时候就可以正常运行了</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用tablib出现的错误</title>
      <link href="/2018/10/31/%E4%BD%BF%E7%94%A8tablib%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/31/%E4%BD%BF%E7%94%A8tablib%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>最近公司要发邮件，基于tablib的强大功能，我理所当然的使用了它。但是在使用过程中发现一个bug，具体bug报这个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using a coordinate with ws.cell is deprecated. Use ws[coordinate] instead&quot;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>刚开始是报警告，后面因为换电脑直接更新requerement.txt，然后发邮件就直接报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DeprecationWarning: Call to deprecated function remove_sheet</span><br><span class="line"> (Use wb.remove(worksheet) or del wb[sheetname]).</span><br><span class="line">  wb.remove_sheet(sheet)</span><br></pre></td></tr></table></figure></p><p>后来经过查资料发现是因为tablib里面使用openpyxl的问题。openpyxl的版本过高，导致的问题，把openpyxl的版本改下就OK了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原来的openpyxl版本是2.5.4.将其降到2.5.0以下就没问题了。</span><br><span class="line">pip install openpyxl==2.4.9</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>flask-excel 下载的时候出现OSError错误</title>
      <link href="/2018/10/31/flask-excel-%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0OSError%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/31/flask-excel-%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0OSError%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>最近在使用flask-excel报OSError: No content, file name. Nothing is given错误<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return excel.make_response_from_records(items, &quot;xlsx&quot;, file_name=&quot;all_content&quot;)</span><br></pre></td></tr></table></figure></p><p>经过查考是因为需要添加支持xlsx的控件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyexcel-xlsx</span><br></pre></td></tr></table></figure></p><p>这时候就会完美解决</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS开发杂记</title>
      <link href="/2018/10/31/iOS%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/"/>
      <url>/2018/10/31/iOS%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>因为记性不好，常常看到点东西，都感觉很好，但是经常时间一长都忘了，所以现在些杂记，记住这些。慢慢补充。<br><a id="more"></a></p><h2 id="1-iOS屏幕旋转"><a href="#1-iOS屏幕旋转" class="headerlink" title="1.iOS屏幕旋转"></a>1.iOS屏幕旋转</h2><p>iOS屏幕旋转可以用系统通知判断方向UIDeviceOrientationDidChangeNotification; 是在屏幕旋转过以后UIApplicationWillChangeStatusBarOrientationNotification;<br>屏幕没有旋转过的时候调用，可以用系统通知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:</span><br><span class="line">@selector(autorotateDirection)name:UIDeviceOrientationDidChangeNotification object:nil];</span><br></pre></td></tr></table></figure><h2 id="2-tableView头部偏离问题"><a href="#2-tableView头部偏离问题" class="headerlink" title="2.tableView头部偏离问题"></a>2.tableView头部偏离问题</h2><p>最近在用tableView的时候，出现自动偏移了64PX，经过查资料，发现需要设置下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if([selfrespondsToSelector:@selector(edgesForExtendedLayout)])</span><br><span class="line">&#123;</span><br><span class="line">self.edgesForExtendedLayout= UIRectEdgeNone;</span><br><span class="line">&#125;</span><br><span class="line">[self.navigationController.navigationBar setTranslucent:YES]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于cocoapods管理库遇到的坑</title>
      <link href="/2018/10/31/%E5%85%B3%E4%BA%8Ecocoapods%E7%AE%A1%E7%90%86%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2018/10/31/%E5%85%B3%E4%BA%8Ecocoapods%E7%AE%A1%E7%90%86%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>今天花了一点时间来做cocoapods管理自己写的库问题。发现遇到好多坑。<br><a id="more"></a></p><h3 id="记得这样放"><a href="#记得这样放" class="headerlink" title="记得这样放"></a>记得这样放</h3><p><img src="http://upload-images.jianshu.io/upload_images/2120155-24cc6c2668e503dc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cocoaspods1.png"></p><h3 id="记得当你pod-lib-lint-XXKH-podspec成功的时候，记得给库加入tag值"><a href="#记得当你pod-lib-lint-XXKH-podspec成功的时候，记得给库加入tag值" class="headerlink" title="记得当你pod lib lint XXKH.podspec成功的时候，记得给库加入tag值"></a>记得当你pod lib lint XXKH.podspec成功的时候，记得给库加入tag值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag &apos;1.0.0&apos;</span><br><span class="line">git push --tags</span><br><span class="line">pod spec lint</span><br></pre></td></tr></table></figure><p>然后是检查下，最后提交给pod，具体为pod trunk push XXKH.podspec</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>git Authentication failed 错误</title>
      <link href="/2018/10/31/git-Authentication-failed-%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/31/git-Authentication-failed-%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>最近在windows上面安装git的以后，git某一个项目，出现输入账号密码的界面，这时候应当输入你的用户名和密码。用户名是你的登录账号，密码是你的密码。这时候如果输入错误。那么你就git clone git… 会出现Authentication failed错误。<br><a id="more"></a><br>这时候你无论修改 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name  &apos;name&apos;</span><br><span class="line">git config --global user.email  &apos;email&apos;</span><br></pre></td></tr></table></figure><p>会发现还是报这个错误。然后我把git删除了，重装也还是不成。后来经大神指点，发现一个非常简单的解决方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> (一)进入控制面板</span><br><span class="line">（二）选择用户账户</span><br><span class="line">（三）选择管理你的凭据</span><br><span class="line">（四）选择Windows凭据</span><br><span class="line">（五）选择git保存的用户信息</span><br><span class="line">（六）选择编辑或者进行删除操作</span><br></pre></td></tr></table></figure><p>这时候你在git clone git…，你就会发现成功了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;good&apos;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git tag值的使用</title>
      <link href="/2018/10/31/Git-tag%E5%80%BC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/Git-tag%E5%80%BC%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>项目中因为业务的需要，需要打标签。所以这里就把常用的几个命令写下来，方便以后自己在打tag的时候可以直接用到。<br><a id="more"></a></p><h3 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag   #这会看到项目下包含的标签</span><br><span class="line">git show v1.1.0    #查看该标签下的版本信息</span><br></pre></td></tr></table></figure><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><p>打标签有两种，轻量标签和附注标签,轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.1.0  #创建轻量标签</span><br><span class="line">git tag -a v1.1.0 -m &quot;1.1.0版本&quot;   #创建附注标签</span><br></pre></td></tr></table></figure><p>创建附注Tag时，参数a即annotated的缩写，指定Tag类型，后附Tag名。参数m指定Tag说明，说明信息会保存在Tag对象中。</p><h3 id="切换标签"><a href="#切换标签" class="headerlink" title="切换标签"></a>切换标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout v1.1.0</span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p>删除本地标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.1.0   #删除tag</span><br></pre></td></tr></table></figure></p><p>删除远程标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/标签名  </span><br><span class="line">  </span><br><span class="line">git push origin :refs/tags/protobuf-2.5.0rc1</span><br></pre></td></tr></table></figure><h3 id="tag推送到项目管理仓库"><a href="#tag推送到项目管理仓库" class="headerlink" title="tag推送到项目管理仓库"></a>tag推送到项目管理仓库</h3><p>注意：打tag的时候先把代码提交到项目管理仓库，然后在提交tag,所以在提交tag值的时候可以先<br>git push origin master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.1.0   #将v1.1.0 Tag提交到git服务器</span><br><span class="line">git push origin –-tags    # 将本地所有Tag一次性提交到git服务器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>git的初始用</title>
      <link href="/2018/10/31/git%E7%9A%84%E5%88%9D%E5%A7%8B%E7%94%A8/"/>
      <url>/2018/10/31/git%E7%9A%84%E5%88%9D%E5%A7%8B%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="git配置全局的用户名和邮箱"><a href="#git配置全局的用户名和邮箱" class="headerlink" title="git配置全局的用户名和邮箱"></a>git配置全局的用户名和邮箱</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name xxkh</span><br><span class="line">git config --global user.email xxx@gmail.com</span><br></pre></td></tr></table></figure><h3 id="查看用户名和邮箱"><a href="#查看用户名和邮箱" class="headerlink" title="查看用户名和邮箱"></a>查看用户名和邮箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><h3 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h3><p>在服务器上 clone 代码第一次通常会提示输入密码，为了下次不再提示，可以在 clone 后做如下操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper store</span><br></pre></td></tr></table></figure></p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd project_root                             # 进入项目目录</span><br><span class="line">git init                                    # 初始化git仓库</span><br><span class="line">git add .                                   # 添加文件到仓库</span><br><span class="line">git commit -m &apos;init commit&apos;                 # 提交代码到本地仓库</span><br><span class="line">git remote add origin $&#123;repository_path&#125;    # 将项目关联到git server</span><br><span class="line">git pull origin master                      # 同步代码</span><br><span class="line">git push origin master                      # push代码到远程仓库</span><br><span class="line">git clone $&#123;repository_path&#125;                # 新的位置clone项目</span><br></pre></td></tr></table></figure><h3 id="重新提交"><a href="#重新提交" class="headerlink" title="重新提交"></a>重新提交</h3><p>提交后如果发现遗漏可以使用 git commit –amend 重新提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;initial commit&apos;</span><br><span class="line">git add forgotten_file</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></p><h3 id="撤销提交文件"><a href="#撤销提交文件" class="headerlink" title="撤销提交文件"></a>撤销提交文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;              # 取消对文件的修改。还原到最近的版本，废弃本地做的修改。</span><br><span class="line">git reset HEAD &lt;file&gt;...            # 取消已经暂存的文件。即，撤销先前&quot;git add&quot;的操作</span><br><span class="line">git reset HEAD^                     # 回退所有内容到上一个版本</span><br><span class="line">git reset HEAD^ a.py                # 回退a.py这个文件的版本到上一个版本</span><br><span class="line">git reset –soft HEAD~3              # 向前回退到第3个版本</span><br><span class="line">git reset –hard origin/master       # 将本地的状态回退到和远程的一样</span><br><span class="line">git reset 057d                      # 回退到某个版本</span><br><span class="line">git revert HEAD                     # 回退到上一次提交的状态，按照某一次的commit完全反向的进行一次commit.(代码回滚到上个版本，并提交git)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>input radio attr动态赋值问题</title>
      <link href="/2018/10/31/input-radio-attr%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/31/input-radio-attr%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>程序环境：easyui+jQuery<br><a id="more"></a><br>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label &gt;&lt;input name=&quot;Fruit&quot; type=&quot;radio&quot;  value=&quot;苹果&quot;  /&gt;苹果 &lt;/label&gt;</span><br><span class="line">&lt;label &gt;&lt;input name=&quot;Fruit&quot; type=&quot;radio&quot;  value=&quot;西瓜&quot;  /&gt;西瓜 &lt;/label&gt;</span><br></pre></td></tr></table></figure><p>最近发现用<code>$(&quot;input[name=&#39;Fruit&#39;][value=&#39;西瓜&#39;]&quot;).attr(&quot;checked&quot;,true);</code>动态赋值没有赋值成功。原来以为是easyui的问题，后来查考文档才发现jQuery中使用prop可以完美解决这个问题。<br><code>$(&quot;input[name=&#39;Fruit&#39;][value=&#39;西瓜&#39;]&quot;).prop(&quot;checked&quot;,true);</code></p><h5 id="那么，什么时候使用attr，什么时候使用prop？"><a href="#那么，什么时候使用attr，什么时候使用prop？" class="headerlink" title="那么，什么时候使用attr，什么时候使用prop？"></a>那么，什么时候使用attr，什么时候使用prop？</h5><p>1.添加属性名称该属性就会生效应该使用prop.<br>2.是有true,false两个属性使用prop.<br>3.其他则使用attr<br></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>jQuery实现获取年月日的一些方法总结</title>
      <link href="/2018/10/31/jQuery%E5%AE%9E%E7%8E%B0%E8%8E%B7%E5%8F%96%E5%B9%B4%E6%9C%88%E6%97%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2018/10/31/jQuery%E5%AE%9E%E7%8E%B0%E8%8E%B7%E5%8F%96%E5%B9%B4%E6%9C%88%E6%97%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1761761-7990e80ba13d67a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/580" alt="MacDown logo"><br><a id="more"></a></p><p>用jq来获取当前的时间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">    var myDate = new Date;</span><br><span class="line">    var year = myDate.getFullYear();//获取当前年</span><br><span class="line">    var yue = myDate.getMonth()+1;//获取当前月</span><br><span class="line">    var date = myDate.getDate();//获取当前日</span><br><span class="line">    var h = myDate.getHours();//获取当前小时数(0-23)</span><br><span class="line">    var m = myDate.getMinutes();//获取当前分钟数(0-59)</span><br><span class="line">    var s = myDate.getSeconds();//获取当前秒</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>table宽度问题</title>
      <link href="/2018/10/31/table%E5%AE%BD%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/31/table%E5%AE%BD%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近在做table列表的时候，出现如果数据过多，导致列表的宽度越来越宽，后来在网上找了很多方法，通过在<code>td</code>里面添加<code>div</code>,通过设置div的宽度来解决。具体代码如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;table  border=&quot;1&quot;  height=&quot;100&quot; width=&quot;500&quot; bordercolor=&quot;#ccc&quot; id=&quot;startId&quot; &gt;</span><br><span class="line">       &lt;thead&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                     &lt;th&gt;topicId&lt;/th&gt;</span><br><span class="line">                     &lt;th&gt;创建时间(北京)&lt;/th&gt;</span><br><span class="line">                     &lt;th&gt;测试类型&lt;/th&gt;</span><br><span class="line">                     &lt;th&gt;测试信息&lt;/th&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody id=&quot;tbMain&quot;&gt;&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><p>在请求数据的时候，在td里面添加div,设置div的宽度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">function resultData1(data) &#123;</span><br><span class="line">        var tbody = document.getElementById(&apos;resultMain&apos;);</span><br><span class="line">        for(var i = 0;i &lt; data.length; i++)&#123; //遍历一下json数据</span><br><span class="line">            var trow = getresultRow(data[i]); //定义一个方法,返回tr数据</span><br><span class="line">            tbody.appendChild(trow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function getresultRow(h) &#123;</span><br><span class="line"></span><br><span class="line">    console.log(h);</span><br><span class="line">        var row = document.createElement(&apos;tr&apos;); //创建行</span><br><span class="line">            var idCell = document.createElement(&apos;td&apos;); //创建第一列id</span><br><span class="line">            idCell.innerHTML = h.debug_info.topic_id; //填充数据</span><br><span class="line">            row.appendChild(idCell); //加入行  ，下面类似</span><br><span class="line"></span><br><span class="line">            var ddd = &quot;&quot;</span><br><span class="line">            if (&quot;create_ts&quot; in h.debug_info)&#123;</span><br><span class="line">                var ddd =  formatTS2YYYYMMDDHHMMSS(h.create_ts.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            var nameCell = document.createElement(&apos;td&apos;);//创建第二列name</span><br><span class="line">            nameCell.innerHTML = ddd;</span><br><span class="line">            row.appendChild(nameCell);</span><br><span class="line"></span><br><span class="line">             jobCell = document.createElement(&apos;td&apos;);//创建第三列</span><br><span class="line">            jobCell.innerHTML = h.debug_info.type;</span><br><span class="line">            row.appendChild(jobCell);</span><br><span class="line"></span><br><span class="line">             jobCell = document.createElement(&apos;td&apos;);//创建第四列</span><br><span class="line">            var mesDiv = document.createElement(&apos;div&apos;);</span><br><span class="line">            mesDiv.className = &apos;mes_div&apos;; #这里添加div，并且设置div的class</span><br><span class="line">            mesDiv.innerHTML = h.debug_info.message;</span><br><span class="line">            jobCell.appendChild(mesDiv);</span><br><span class="line"></span><br><span class="line">            row.appendChild(jobCell);</span><br><span class="line"></span><br><span class="line">             jobCell = document.createElement(&apos;td&apos;);//创建第五列</span><br><span class="line">            var div = document.createElement(&apos;div&apos;);</span><br><span class="line">            div.innerHTML = h.debug_info.result;</span><br><span class="line">            jobCell.appendChild(div);</span><br><span class="line">            row.appendChild(jobCell);</span><br><span class="line"></span><br><span class="line">            return row; //返回tr数据</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .mes_div&#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>easyui弹窗窗口无法移动</title>
      <link href="/2018/10/31/easyui%E5%BC%B9%E7%AA%97%E7%AA%97%E5%8F%A3%E6%97%A0%E6%B3%95%E7%A7%BB%E5%8A%A8/"/>
      <url>/2018/10/31/easyui%E5%BC%B9%E7%AA%97%E7%AA%97%E5%8F%A3%E6%97%A0%E6%B3%95%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>最近在使用easyui 弹出窗口的时候，发现窗口无法拖动。具体代码如下<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function openLookUp(url, title) &#123;</span><br><span class="line">lookUpWin.dialogFrameHtml(url);</span><br><span class="line"> if(title) &#123;</span><br><span class="line">    lookUpWin.panel(&#123;title: title&#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后来经过对比是因为修改title引起的，这个easyui 还没有解决这个bug。知道是哪出现问题，后面就好办了，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function openLookUp(url, title) &#123;</span><br><span class="line">lookUpWin.dialogFrameHtml(url);</span><br><span class="line">$(&apos;.panel-title&apos;)[0].innerHTML=title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>fetch的使用</title>
      <link href="/2018/10/31/fetch%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/fetch%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>最近的工作过程中，在做js调取接口的时候，使用了fetch，原来是只知道fetch，但是没有怎么使用过。正好最近使用到，所以对其详细了解了下。<br><a id="more"></a></p><h4 id="fetch的基本方式"><a href="#fetch的基本方式" class="headerlink" title="fetch的基本方式"></a>fetch的基本方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fetch(url,&#123;</span><br><span class="line">method:&apos;GET&apos;, # &apos;POST&apos;,&apos;PUT&apos;,&apos;DELETE&apos;</span><br><span class="line">headers:&#123;</span><br><span class="line">&apos;Content-Type&apos;:&apos;application/json&apos;, //&apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">&apos;Accept&apos;:&apos;application/json&apos;</span><br><span class="line">&#125;,</span><br><span class="line">body:JSON.stringfiy(body)</span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">return res.json() //返回一个Promise,解析成JSON,具体请看下面返回的数据</span><br><span class="line">&#125;).then(function(res)&#123;</span><br><span class="line">console.log(res) //获取json数据</span><br><span class="line">&#125;).catch(function(error)&#123;</span><br><span class="line">console.log(error)  //请求错误时返回</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="返回的数据"><a href="#返回的数据" class="headerlink" title="返回的数据"></a>返回的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">res.arrayBuffer()</span><br><span class="line">读取 res对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为ArrayBuffer格式的promise对象</span><br><span class="line"></span><br><span class="line">res.blob()</span><br><span class="line">读取 res对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为Blob格式的promise对象</span><br><span class="line"></span><br><span class="line">res.formData()</span><br><span class="line">读取res对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为FormData格式的promise对象</span><br><span class="line"></span><br><span class="line">res.json()</span><br><span class="line">读取 res对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为JSON格式的promise对象</span><br><span class="line"></span><br><span class="line">res.text()</span><br><span class="line">读取 res对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为USVString格式的promise对象</span><br></pre></td></tr></table></figure><h4 id="强制带Cookie"><a href="#强制带Cookie" class="headerlink" title="强制带Cookie"></a>强制带Cookie</h4><p>默认情况下, fetch不会从服务端发送或接收任何 cookies, 如果站点依赖于维护一个用户会话，则导致未经认证的请求(要发送 cookies，必须发送凭据头).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">    method: &apos;GET&apos;,</span><br><span class="line">    credentials: &apos;include&apos; // 强制加入凭据头</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((res)=&gt;&#123;</span><br><span class="line">    return res.text()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((res)=&gt;&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ansible自动化部署</title>
      <link href="/2018/10/31/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/10/31/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Ansible可通过 “pip” 安装(安装和管理Python包的工具),若你还没有安装 pip,可执行如下命令安装:<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo easy_install pip</span><br></pre></td></tr></table></figure><p>然后安装Ansible:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install ansible</span><br></pre></td></tr></table></figure></p><p>如果你是在 OS X Mavericks 上安装,编译器可能或告警或报错,可通过如下设置避免这种情况:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo CFLAGS=-Qunused-arguments CPPFLAGS=-Qunused-arguments pip install ansible</span><br></pre></td></tr></table></figure></p><p>使用 virtualenv 的读者可通过 virtualenv 安装 Ansible, 然而我们建议不用这样做,直接在全局安装 Ansible.不要使用 easy_install 直接安装 ansible.</p><h2 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h2><p>修改/etc/ansible/hosts 全局hosts文件，没有的话自己创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ansible/hosts</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[localhost] # 如果服务器使用密码登录就用这个方式保存密码，避免每次输入</span><br><span class="line">127.0.0.1 ansible_ssh_pass=your_pass ansible_ssh_user=your_name</span><br><span class="line"></span><br><span class="line">[prod] # 如果服务器使用sshkey登陆（推荐使用）</span><br><span class="line">prod.server.org ansible_ssh_user=your_name ansible_ssh_private_key_file=key_path</span><br></pre></td></tr></table></figure><p>具体的是 <code>prod.server.org</code>是IP, <code>your_pass</code>是服务器的密码,<code>your_name</code>是服务器的名字, <code>key_path</code>是用key登录.</p><h2 id="第一条命令"><a href="#第一条命令" class="headerlink" title="第一条命令"></a>第一条命令</h2><p>首先执行ping,看是否可以连接上服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m ping</span><br><span class="line"></span><br><span class="line">127.0.0.1 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">prod.server.org | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如上样式结果即为正确,另外执行 ansible prod -m ping 可以针对某一个服务器<br>组进行操作</p><p>这时候说明你的ansible已经跑通，下面可以进行其他操作</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ansible sshpass的部署问题</title>
      <link href="/2018/10/31/sshpass%E7%9A%84%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/31/sshpass%E7%9A%84%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在使用ansible配置好hosts，运行ping<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m ping</span><br></pre></td></tr></table></figure></p><p>发现出现错误，错误原因是需要安装sshpass。就用yum去安装，因为用的是mac，导致没有安装yum，所以就想用brew去安装，直接使用<code>brew install sshpass</code>,发现发现错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Shell代码  收藏代码</span><br><span class="line">$ brew install sshpass  </span><br><span class="line">Error: No available formula for sshpass  </span><br><span class="line">We won&apos;t add sshpass because it makes it too easy for novice SSH users to  </span><br><span class="line">ruin SSH&apos;s security.</span><br></pre></td></tr></table></figure><p>使用homebrew强制安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install https://raw.github.com/eugeneoden/homebrew/eca9de1/Library/Formula/sshpass.rb</span><br></pre></td></tr></table></figure><p>就可以成功了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ansible playbook</title>
      <link href="/2018/10/31/playbook/"/>
      <url>/2018/10/31/playbook/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合.</p></blockquote> <a id="more"></a><p> 一个playbook就是一个YAML文件，所以playbook文件一般都以.yml结尾，一个playbook文件由一个或多个play组成，每个play定义了在一个或多个远程主机上执行的一系列的task，其中每个task一般就是调用一个ansible的模块，如调用copy模块复制文件到远程主机或调用shell模块执行命令。</p><h2 id="简单的配置"><a href="#简单的配置" class="headerlink" title="简单的配置"></a>简单的配置</h2><p>配置deploy.yml完成进入远程服务器的某个目录并执行git pull操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1  - hosts: wxnacy # 它会默认使用/etc/ansible/hosts 中配置的服务器组名 也可以单独设置hosts地址</span><br><span class="line">2  tasks:</span><br><span class="line">3  - name: cd path and git pull # 命令名称</span><br><span class="line">4    shell: git pull # 执行命令</span><br><span class="line">5    args:</span><br><span class="line">6      chdir: ~/workdir # 进入目录</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook deploy.yml</span><br><span class="line">PLAY [wxnacy] *************************************************************************</span><br><span class="line">TASK [cd path and git pull] *************************************************************************</span><br><span class="line">ok: [wxnacy.server.org]</span><br><span class="line">PLAY RECAP *************************************************************************</span><br><span class="line">wxnacy.server.org             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>执行完运行命令ansible会在webservers组中依次执行tasks，返回以上样式结果极为成功，结果通过红黄绿三种颜色标明了不同的执行结果，红色表示有task执行失败，黄色表示改变了远程主机状态。</p><p>可以查看相关文章<br><a href="https://docs.ansible.com/ansible/latest/modules/shell_module.html" target="_blank" rel="noopener">shell - Execute commands in nodes</a><br><a href="https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html" target="_blank" rel="noopener">All modules</a><br><a href="https://blog.csdn.net/AhhSong/article/details/78757720" target="_blank" rel="noopener">Ansible playbook简介与配置</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ansible 自动化</title>
      <link href="/2018/10/31/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2018/10/31/%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/f8a145ca97dd" target="_blank" rel="noopener">ansible 自动化部署</a><br><a href="https://www.jianshu.com/p/cd5b7d9a841e" target="_blank" rel="noopener">ansible playbook</a><br><a href="https://www.jianshu.com/p/ddcf8f3ab7af" target="_blank" rel="noopener">ansible sshpass的部署问题</a>  </p><h2 id="ansible介绍"><a href="#ansible介绍" class="headerlink" title="ansible介绍"></a>ansible介绍</h2><p>国内的中文站点：<a href="http://www.ansible.com.cn/" target="_blank" rel="noopener">Ansible中文权威指南</a><br><a id="more"></a></p><p>ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。</p><p>ansible是基于 paramiko 开发的,并且基于模块化工作，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远程主机通讯的。ansible目前已经已经被红帽官方收购，是自动化运维工具中大家认可度最高的，并且上手容易，学习简单。<strong>是每位运维工程师必须掌握的技能之一。</strong><br>ansible特点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、部署简单，只需在主控端部署Ansible环境，被控端无需做任何操作；</span><br><span class="line">2、默认使用SSH协议对设备进行管理；</span><br><span class="line">3、有大量常规运维操作模块，可实现日常绝大部分操作。</span><br><span class="line">4、配置简单、功能强大、扩展性强；</span><br><span class="line">5、支持API及自定义模块，可通过Python轻松扩展；</span><br><span class="line">6、通过Playbooks来定制强大的配置、状态管理；</span><br><span class="line">7、轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</span><br><span class="line">8、提供一个功能强大、操作性强的Web管理界面和REST API接口——AWX平台。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>item2快捷键的应用</title>
      <link href="/2018/10/31/item2%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2018/10/31/item2%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>使用item2已经一段时间了，发现item2和苹果自带的终端工具Terminal相比，简直完爆它。下面是一些基础的快捷键<br><a id="more"></a></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新建标签  command + t</span><br><span class="line">切换标签  command + 左右方向键 或者 command+数字</span><br></pre></td></tr></table></figure><h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">垂直分屏：command + d</span><br><span class="line">水平分屏：command + shift + d</span><br><span class="line">切换屏幕：command + [ 或 command + ]</span><br></pre></td></tr></table></figure><h2 id="共同标签或者分屏的快键键为"><a href="#共同标签或者分屏的快键键为" class="headerlink" title="共同标签或者分屏的快键键为"></a>共同标签或者分屏的快键键为</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关闭标签或者分屏：command + w</span><br><span class="line">切换全屏：command + enter</span><br></pre></td></tr></table></figure><h2 id="command-相关的快捷键"><a href="#command-相关的快捷键" class="headerlink" title="command 相关的快捷键"></a>command 相关的快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查找：command + f</span><br><span class="line">查看历史命令：command + ;</span><br><span class="line">查看剪贴板历史：command + shift + h</span><br><span class="line">清屏：command + r</span><br></pre></td></tr></table></figure><h2 id="control-相关的快捷键"><a href="#control-相关的快捷键" class="headerlink" title="control 相关的快捷键"></a>control 相关的快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">清除当前行：ctrl + u</span><br><span class="line">到行首：ctrl + a</span><br><span class="line">到行尾：ctrl + e</span><br><span class="line">前进后退：ctrl + f/b (翻页)</span><br><span class="line">上一条命令：ctrl + p</span><br><span class="line">搜索命令历史：ctrl + r</span><br><span class="line">删除当前光标的字符：ctrl + d</span><br><span class="line">删除光标之前的字符：ctrl + h</span><br><span class="line">删除光标之前的单词：ctrl + w</span><br><span class="line">删除到文本末尾：ctrl + k</span><br><span class="line">交换光标处文本：ctrl + t</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mac下pyenv与pyenv-virtualenv的安装</title>
      <link href="/2018/10/31/Mac%E4%B8%8Bpyenv%E4%B8%8Epyenv-virtualenv%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2018/10/31/Mac%E4%B8%8Bpyenv%E4%B8%8Epyenv-virtualenv%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>在 Mac 上使用 brew 可以很方便的安装 pyenv<br><a id="more"></a></p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>打开<code>vim  ~/.bash_profile</code>，在最后写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</span><br><span class="line">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><br><span class="line">if which pyenv &gt; /dev/null;</span><br><span class="line">  then eval &quot;$(pyenv init -)&quot;;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>配置完以后别忘了<code>source  ~/.bash_profile</code>，使配置生效</p><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#查看可安装的版本</span><br><span class="line">pyenv install --list</span><br><span class="line">#安装python版本</span><br><span class="line">pyenv install 3.5.0</span><br><span class="line">#查看当前已安装的python版本</span><br><span class="line">pyenv versions</span><br><span class="line">#重置版本设置 (只有 pyenv shell 和 pyenv local 命令有--unset参数)</span><br><span class="line">pyenv shell --unset</span><br><span class="line">pyenv local --unset</span><br><span class="line">#卸载版本</span><br><span class="line">pyenv uninstall 3.5.0</span><br></pre></td></tr></table></figure><p>设置python版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 对所有的Shell全局有效，会把版本号写入到~/.pyenv/version文件中</span><br><span class="line">pyenv global 3.5.0</span><br><span class="line"></span><br><span class="line"># 只对当前目录有效，会在当前目录创建.python-version文件</span><br><span class="line">pyenv local 3.5.0</span><br><span class="line"></span><br><span class="line"># 只在当前会话有效</span><br><span class="line">pyenv shell 3.5.0</span><br></pre></td></tr></table></figure></p><p>这个时候，pyenv已经安装成功了，下面咱们安装设置python版本 </p><h1 id="pyenv-virtualenv"><a href="#pyenv-virtualenv" class="headerlink" title="pyenv-virtualenv"></a><a href="https://github.com/pyenv/pyenv-virtualenv" target="_blank" rel="noopener">pyenv-virtualenv</a></h1><blockquote><p>pyenv-virtualenv 是pyenv的插件，为pyenv设置的python版本提供隔离的虚拟环境，设置虚拟环境后，在当前目录下面安装的第三方库都不会影响其他环境</p></blockquote><h3 id="1、安装-1"><a href="#1、安装-1" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv-virtualenv</span><br></pre></td></tr></table></figure><h3 id="2、配置-1"><a href="#2、配置-1" class="headerlink" title="2、配置"></a>2、配置</h3><p>打开<code>vim  ~/.bash_profile</code>，在最后写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if which pyenv-virtualenv-init &gt; /dev/null;</span><br><span class="line">  then eval &quot;$(pyenv virtualenv-init -)&quot;;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>配置完以后别忘了<code>source  ~/.bash_profile</code>，使配置生效</p><h3 id="3、使用-1"><a href="#3、使用-1" class="headerlink" title="3、使用"></a>3、使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#从当前版本创建virtualenv</span><br><span class="line">pyenv virtualenv env350</span><br><span class="line"></span><br><span class="line">#指定版本创建virtualenv</span><br><span class="line">#pyenv virtualenv 版本号 虚拟环境名</span><br><span class="line">pyenv virtualenv 3.6.3 xxx-3.6.3</span><br><span class="line"></span><br><span class="line">#查看已创建的virtualenv</span><br><span class="line">pyenv versions</span><br><span class="line"></span><br><span class="line">#激活和停用virtualenv</span><br><span class="line"># 手动激活</span><br><span class="line">pyenv activate 虚拟环境名</span><br><span class="line">pyenv deactivate</span><br><span class="line"></span><br><span class="line"># 自动激活</span><br><span class="line"># 使用pyenv local 虚拟环境名</span><br><span class="line"># 会把`虚拟环境名`写入当前目录的.python-version文件中</span><br><span class="line"># 关闭自动激活 -&gt; pyenv deactivate</span><br><span class="line"># 启动自动激活 -&gt; pyenv activate xxx-3.6.3</span><br><span class="line">pyenv local xxx-3.6.3</span><br><span class="line"></span><br><span class="line">#删除现有virtualenv</span><br><span class="line">pyenv uninstall 虚拟环境名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>如何杀死一个已经detached的screen会话</title>
      <link href="/2018/10/31/%E5%A6%82%E4%BD%95%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E5%B7%B2%E7%BB%8Fdetached%E7%9A%84screen%E4%BC%9A%E8%AF%9D/"/>
      <url>/2018/10/31/%E5%A6%82%E4%BD%95%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E5%B7%B2%E7%BB%8Fdetached%E7%9A%84screen%E4%BC%9A%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<p>如果想杀死一个已经detached的screen会话，可以使用以下命令：<br><a id="more"></a></p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -X -S [session # you want to kill] quit</span><br></pre></td></tr></table></figure><p>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# screen -ls</span><br><span class="line">There are screens on:</span><br><span class="line">        9975.admin   (Detached)</span><br><span class="line">        4588.scheduler    (Detached)</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# screen -X -S 4588 quit</span><br><span class="line">[root@localhost ~]# screen -ls</span><br><span class="line">There is a screen on:</span><br><span class="line">        9975.pts-0.localhost    (Detached)</span><br><span class="line">1 Socket in /var/run/screen/S-root.</span><br></pre></td></tr></table></figure></p><p>可以看到，4588会话已经没有了。</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>激活screen：</p><pre><code>screen -r session_name并利用exit退出并kiil掉session。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux的常用命令</title>
      <link href="/2018/10/31/Linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/10/31/Linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="查看硬盘使用了多少容量"><a href="#查看硬盘使用了多少容量" class="headerlink" title="查看硬盘使用了多少容量"></a>查看硬盘使用了多少容量</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2ze32 ~]# df -hl</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/vda1        40G  3.7G   34G   10% /</span><br><span class="line">devtmpfs        1.9G     0  1.9G    0% /dev</span><br><span class="line">tmpfs           1.9G     0  1.9G    0% /dev/shm</span><br><span class="line">tmpfs           1.9G  364K  1.9G    1% /run</span><br><span class="line">tmpfs           1.9G     0  1.9G    0% /sys/fs/cgroup</span><br><span class="line">tmpfs           380M     0  380M    0% /run/user/0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@iZ2ze326 ~]# df</span><br><span class="line">文件系统          1K-块    已用     可用 已用% 挂载点</span><br><span class="line">/dev/vda1      41151808 3867112 35171264   10% /</span><br><span class="line">devtmpfs        1931336       0  1931336    0% /dev</span><br><span class="line">tmpfs           1940844       0  1940844    0% /dev/shm</span><br><span class="line">tmpfs           1940844     364  1940480    1% /run</span><br><span class="line">tmpfs           1940844       0  1940844    0% /sys/fs/cgroup</span><br><span class="line">tmpfs            388172       0   388172    0% /run/user/0</span><br></pre></td></tr></table></figure><h3 id="查看Linux系统是Centos还是Ubuntu"><a href="#查看Linux系统是Centos还是Ubuntu" class="headerlink" title="查看Linux系统是Centos还是Ubuntu"></a>查看Linux系统是Centos还是Ubuntu</h3><p>输入命令 <code>lsb_release -a</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## 现在有的系统可以用这个查出是否是centos还是ubuntu，如阿里云</span><br><span class="line">[root@iZ2ze326 ~]# lsb_release -a</span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.4.1708 (Core)</span><br><span class="line">Release:7.4.1708</span><br><span class="line">Codename:Core</span><br><span class="line"></span><br><span class="line">## 而在公司的本地服务器，却出现这种情况</span><br><span class="line">[root@hardwareupdate ~]# lsb_release -a</span><br><span class="line">-bash: lsb_release: command not found</span><br></pre></td></tr></table></figure><p>当这个命令不管用的时候，可以使用命令 <code>cat /etc/redhat-release</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 在ubuntu中会出现</span><br><span class="line">[root@hardwareupdate ~]# cat /etc/redhat-release</span><br><span class="line">-bash: /etc/redhat-release: command not found</span><br><span class="line"></span><br><span class="line">## 在centos中显示</span><br><span class="line">[root@hardwareupdate ~]# cat /etc/redhat-release</span><br><span class="line">CentOS release 6.10 (Final)</span><br></pre></td></tr></table></figure><h2 id="查看Linux-某些程序进程-ps-aux"><a href="#查看Linux-某些程序进程-ps-aux" class="headerlink" title="查看Linux 某些程序进程 ps aux"></a>查看Linux 某些程序进程 <code>ps aux</code></h2><p>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2ze3269b etc]# ps aux | grep mysql</span><br><span class="line">root      2371  0.0  0.0 112676   980 pts/0    S+   14:34   0:00 grep --color=auto mysql</span><br><span class="line">mysql    10810  0.1  9.4 1599384 367788 ?      Sl   10月11  13:13 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure></p><p>持续更新中。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Centos7安装mysql</title>
      <link href="/2018/10/31/Centos7%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2018/10/31/Centos7%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<p>mysql 官方下载地址：<br><a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a><br>查找最新的 rpm<img src="https://upload-images.jianshu.io/upload_images/2120155-cb6f36a82f444081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysqlrpm.png"><br><a id="more"></a><br>下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>确定 md5 值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum mysql80-community-release-el7-1.noarch.rpm</span><br><span class="line">739dc44566d739c5d7b893de96ee6848  mysql80-community-release-el7-1.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -ivh mysql80-community-release-el7-1.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>因为现今mysql已经更新到8.0以上了，所以可以根据需求是用5.5以上的某一个版本还是8.0等</p><h4 id="8-0版本"><a href="#8-0版本" class="headerlink" title="8.0版本"></a>8.0版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update -y</span><br><span class="line">$ sudo yum install -y mysql-server</span><br></pre></td></tr></table></figure><h4 id="5-7版本"><a href="#5-7版本" class="headerlink" title="5.7版本"></a>5.7版本</h4><p>查看可安装的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ yum repolist all | grep mysql</span><br><span class="line">mysql-cluster-7.5-community/x86_64 MySQL Cluster 7.5 Community    disabled</span><br><span class="line">mysql-cluster-7.5-community-source MySQL Cluster 7.5 Community -  disabled</span><br><span class="line">mysql-cluster-7.6-community/x86_64 MySQL Cluster 7.6 Community    disabled</span><br><span class="line">mysql-cluster-7.6-community-source MySQL Cluster 7.6 Community -  disabled</span><br><span class="line">mysql-connectors-community/x86_64  MySQL Connectors Community     enabled:    51</span><br><span class="line">mysql-connectors-community-source  MySQL Connectors Community - S disabled</span><br><span class="line">mysql-tools-community/x86_64       MySQL Tools Community          enabled:    63</span><br><span class="line">mysql-tools-community-source       MySQL Tools Community - Source disabled</span><br><span class="line">mysql-tools-preview/x86_64         MySQL Tools Preview            disabled</span><br><span class="line">mysql-tools-preview-source         MySQL Tools Preview - Source   disabled</span><br><span class="line">mysql55-community/x86_64           MySQL 5.5 Community Server     disabled</span><br><span class="line">mysql55-community-source           MySQL 5.5 Community Server - S disabled</span><br><span class="line">mysql56-community/x86_64           MySQL 5.6 Community Server     disabled</span><br><span class="line">mysql56-community-source           MySQL 5.6 Community Server - S disabled</span><br><span class="line">mysql57-community/x86_64           MySQL 5.7 Community Server     disabled</span><br><span class="line">mysql57-community-source           MySQL 5.7 Community Server - S disabled</span><br><span class="line">mysql80-community/x86_64           MySQL 8.0 Community Server     enabled:    17</span><br><span class="line">mysql80-community-source           MySQL 8.0 Community Server - S disabled</span><br></pre></td></tr></table></figure></p><p>因为默认的是8.0的版本，所以要选择5.7的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --disable mysql80-community</span><br><span class="line">$ sudo yum-config-manager --enable mysql57-community</span><br></pre></td></tr></table></figure></p><p>下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start mysqld</span><br></pre></td></tr></table></figure></p><p>查看运行状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status mysqld</span><br><span class="line"></span><br><span class="line">● mysqld.service - MySQL Server</span><br><span class="line"> Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line"> Active: active (running) since Fri 2018-06-01 10:35:58 UTC; 1h 39min ago</span><br><span class="line"> Docs: man:mysqld(8)</span><br><span class="line"> [http://dev.mysql.com/doc/refman/en/using-systemd.html](http://dev.mysql.com/doc/refman/en/using-systemd.html)</span><br><span class="line"> Process: 7474 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 7542 (mysqld)</span><br><span class="line"> Status: &quot;SERVER_OPERATING&quot;</span><br><span class="line"> CGroup: /system.slice/mysqld.service</span><br><span class="line"> └─7542 /usr/sbin/mysqld</span><br><span class="line"></span><br><span class="line">Jun 01 10:35:49 bogon systemd[1]: Starting MySQL Server...</span><br><span class="line">Jun 01 10:35:58 bogon systemd[1]: Started MySQL Server.&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p><p>这时候mysql已经安装成功了，下面是配置</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>Mysql 在安装时会默认设置一个随机密码，需要在第一次使用时修改</p><p>查看密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class="line">2018-06-01T10:35:51.710406Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: Vq9wOQ&amp;trFs*</span><br></pre></td></tr></table></figure></p><p>首先使用默认密码登录 Mysql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br></pre></td></tr></table></figure></p><p>查看所有 validatei_password<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br><span class="line"></span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| Variable_name                        | Value |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| validate_password.check_user_name    | ON    |</span><br><span class="line">| validate_password.dictionary_file    |       |</span><br><span class="line">| validate_password.length             | 8     |</span><br><span class="line">| validate_password.mixed_case_count   | 1     |</span><br><span class="line">| validate_password.number_count       | 1     |</span><br><span class="line">| validate_password.policy             | MEDIUM|</span><br><span class="line">| validate_password.special_char_count | 1     |</span><br><span class="line">| validate_password_check_user_name    | ON    |</span><br><span class="line">| validate_password_dictionary_file    |       |</span><br><span class="line">| validate_password_length             | 8     |</span><br><span class="line">| validate_password_mixed_case_count   | 1     |</span><br><span class="line">| validate_password_number_count       | 1     |</span><br><span class="line">| validate_password_policy             | MEDIUM|</span><br><span class="line">| validate_password_special_char_count | 1     |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这时候会看到mysql的密码策略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line"># 长度大于 8 位</span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line"># 长度大于 8 位，数字，混合大小写和特殊字符</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed case, and special characters</span><br><span class="line"># 长度大于 8 位，数字，混合大小写，特殊字符和字典</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG:</span><br><span class="line"></span><br><span class="line">他们分别对应了数字 0, 1, 2，Mysql 默认的等级为 MEDIUM，所以输入普通的密码就会报错，怎样修改策略呢？</span><br></pre></td></tr></table></figure></p><p>所以当出现下面的错误的时候，有可能就是因为密码强度的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed! Error: Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure></p><p>所以可以根据你想达到的安全程度，设置密码，比如我这里设置为最低:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br><span class="line">## 如果你不想让长度必须大于 8 位，也可以改为 4，这是最低长度</span><br><span class="line">set global validate_password_length=4;</span><br></pre></td></tr></table></figure></p><p>随后修改mysql密码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password=password(&apos;111111&apos;);</span><br></pre></td></tr></table></figure></p><p>最后可以将访问权限全部对外开放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;wxnacy&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></p><p>也可以指定 ip 开放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;192.168.33.11&apos; IDENTIFIED BY &apos;wxnacy&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></p><p>最后使配置生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><p>mysql 新设置用户或更改密码后需用flush privileges刷新MySQL的系统权限相关表，否则会出现拒绝访问，还有一种方法，就是重新启动mysql服务器，来使新设置生效</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Supervisor重新加载配置启动新的进程</title>
      <link href="/2018/10/31/Supervisor%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E6%96%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/10/31/Supervisor%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E6%96%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>一、添加好配置文件后<br><a id="more"></a><br>二、更新新的配置到supervisord<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure></p><p>三、重新启动配置中的所有程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure></p><p>四、启动某个进程(program_name=你配置中写的程序名称)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl start program_name</span><br></pre></td></tr></table></figure></p><p>五、查看正在守候的进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl</span><br></pre></td></tr></table></figure></p><p>六、停止某一进程 (program_name=你配置中写的程序名称)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pervisorctl stop program_name</span><br></pre></td></tr></table></figure></p><p>七、重启某一进程 (program_name=你配置中写的程序名称)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl restart program_name</span><br></pre></td></tr></table></figure></p><p>八、停止全部进程(显示用stop停止掉的进程，用reload或者update都不会自动重启)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl stop all</span><br></pre></td></tr></table></figure></p><p>参考：<br><a href="http://www.codeweblog.com/supervisor%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E6%96%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/" target="_blank" rel="noopener">Supervisor重新加载配置启动新的进程</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mac查看端口占用进程以及强制清理进程</title>
      <link href="/2018/10/31/mac%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%BC%BA%E5%88%B6%E6%B8%85%E7%90%86%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/10/31/mac%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%BC%BA%E5%88%B6%E6%B8%85%E7%90%86%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="查看5001段口被占用进程lsof-i-5001："><a href="#查看5001段口被占用进程lsof-i-5001：" class="headerlink" title="查看5001段口被占用进程lsof -i:5001："></a>查看5001段口被占用进程<code>lsof -i:5001</code>：</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">localhost:My$ lsof -i:5001</span><br><span class="line"></span><br><span class="line">COMMAND  PID        USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line"></span><br><span class="line">[Python](http://lib.csdn.net/base/python &quot;Python知识库&quot;)  6320 zhaozeguang    3u  IPv4 0x82d867c5ec4904d9      0t0  TCP localhost:51816-&gt;localhost:commplex-link (CLOSED)</span><br><span class="line"></span><br><span class="line">[python](http://lib.csdn.net/base/python &quot;Python知识库&quot;)  6323 zhaozeguang    3u  IPv4 0x82d867c5ec4916e9      0t0  TCP localhost:51820-&gt;localhost:commplex-link (CLOSED)</span><br><span class="line"></span><br><span class="line">Python  6327 zhaozeguang    3u  IPv4 0x82d867c5ed8b52c9      0t0  TCP localhost:51828-&gt;localhost:commplex-link (CLOSED)</span><br><span class="line"></span><br><span class="line">Python  6328 zhaozeguang    3u  IPv4 0x82d867c5edcf04d9      0t0  TCP localhost:51835-&gt;localhost:commplex-link (CLOSED)</span><br><span class="line"></span><br><span class="line">Python  6330 zhaozeguang    3u  IPv4 0x82d867c5e27d06e9      0t0  TCP localhost:51836-&gt;localhost:commplex-link (CLOSED)</span><br></pre></td></tr></table></figure><h3 id="kill掉无用进程-kill-PID"><a href="#kill掉无用进程-kill-PID" class="headerlink" title="kill掉无用进程 kill PID"></a>kill掉无用进程 <code>kill PID</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:My$ kill 6327 6328 6330</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
