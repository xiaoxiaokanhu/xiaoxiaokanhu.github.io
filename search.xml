<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>sudo -s 切换到root账户</title>
      <link href="/2018/11/20/sudo-s-%E5%88%87%E6%8D%A2%E5%88%B0root%E8%B4%A6%E6%88%B7/"/>
      <url>/2018/11/20/sudo-s-%E5%88%87%E6%8D%A2%E5%88%B0root%E8%B4%A6%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<p>sudo su 和 sudo -s都是切换到root用户，不同的是：</p><blockquote><p>sudo su 环境用的是目标用户(root)的环境<br>sudo -s 环境用的是当前用户本身的环境</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ubuntu系统下gitlab的创建</title>
      <link href="/2018/11/20/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bgitlab%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>/2018/11/20/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bgitlab%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要： gitlab的介绍、环境、创建步骤、关键点、卸载gitlab<br><a id="more"></a></p></blockquote><h1 id="gitlab的介绍"><a href="#gitlab的介绍" class="headerlink" title="gitlab的介绍"></a>gitlab的介绍</h1><blockquote><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><p>ubuntu 18.04LTS</p></blockquote><h1 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h1><p>gitlab官网上面有在ubuntu创建gitlab的步骤<br><a href="https://about.gitlab.com/install/" target="_blank" rel="noopener">https://about.gitlab.com/install/</a> 可以点击按照步骤来做</p><h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1><p>每次修改配置的时候记得<code>sudo gitlab-ctl reconfigure</code>，使配置生效</p><p><strong>指令</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">查看运行状态</span><br><span class="line">    sudo gitlab-ctl status</span><br><span class="line">启动所有 gitlab 组件</span><br><span class="line">    sudo gitlab-ctl <span class="keyword">start</span> </span><br><span class="line">停止所有 gitlab 组件   </span><br><span class="line">    sudo gitlab-ctl <span class="keyword">stop</span>       </span><br><span class="line">重启所有 gitlab 组件 </span><br><span class="line">    sudo gitlab-ctl restart  </span><br><span class="line">启动服务      </span><br><span class="line">    sudo gitlab-ctl reconfigure </span><br><span class="line">修改默认的配置文件       </span><br><span class="line">    sudo vim /etc/gitlab/gitlab.rb    </span><br><span class="line">检查gitlab    </span><br><span class="line">    gitlab-rake gitlab:<span class="keyword">check</span> SANITIZE=<span class="literal">true</span> <span class="comment">--trace  </span></span><br><span class="line">查看日志  </span><br><span class="line">    sudo gitlab-ctl tail</span><br></pre></td></tr></table></figure></p><p><strong>初始账户和密码</strong><br>有的笔记上说的默认账户和密码是下面的</p><blockquote><p>账户：root<br>密码：5iveL!fe</p></blockquote><p>但是我打开网页的时候，直接提示的是 change your password。这时候我做的就是把密码修改下，密码最少8个字，当你修改过了以后你就可以登录了。比如：</p><blockquote><p>账户：root<br>密码：xxkh1234</p></blockquote><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>1、停止gitlab<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl <span class="built_in">stop</span></span><br></pre></td></tr></table></figure></p><p>2、卸载gitlab（注意这里写的是gitlab-ce）<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo dpkg -r gitlab-ce</span></span><br></pre></td></tr></table></figure></p><p>3、查看gitlab进程<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> aux | <span class="keyword">grep</span> gitlab</span><br></pre></td></tr></table></figure></p><p><img src="http://blog.whsir.com/wp-content/uploads/2017/05/gitlab.png" alt=""><br>4、杀掉第一个进程（就是带有好多………….的进程）<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">-9</span> <span class="number">18777</span></span><br></pre></td></tr></table></figure></p><p>杀掉后，在ps aux | grep gitlab确认一遍，还有没有gitlab的进程</p><p>5、删除所有包含gitlab文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -name gitlab | xargs rm -rf</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux grep、tail命令的混合使用</title>
      <link href="/2018/11/14/Linux-grep%E3%80%81tail%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/11/14/Linux-grep%E3%80%81tail%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>Linux grep命令用于查找文件里符合条件的字符串。<br>grep指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设grep指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为”-“，则grep指令会从标准输入设备读取数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][–help][范本样式][文件或目录…]</p></blockquote><p>或</p><blockquote><p>grep [选项] “模式” [文件]</p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><blockquote><ul><li>-a 或 –text : 不要忽略二进制的数据。</li><li>-A&lt;显示行数&gt; 或 –after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</li><li>-b 或 –byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。</li><li>-B&lt;显示行数&gt; 或 –before-context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。</li><li>-c 或 –count : 计算符合样式的列数。</li><li>-C&lt;显示行数&gt; 或 –context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。</li><li>-d &lt;动作&gt; 或 –directories=&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。</li><li>-e&lt;范本样式&gt; 或 –regexp=&lt;范本样式&gt; : 指定字符串做为查找文件内容的样式。</li><li>-E 或 –extended-regexp : 将样式为延伸的普通表示法来使用。</li><li>-f&lt;规则文件&gt; 或 –file=&lt;规则文件&gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。</li><li>-F 或 –fixed-regexp : 将样式视为固定字符串的列表。</li><li>-G 或 –basic-regexp : 将样式视为普通的表示法来使用。</li><li>-h 或 –no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。</li><li>-H 或 –with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。</li><li>-i 或 –ignore-case : 忽略字符大小写的差别。</li><li>-l 或 –file-with-matches : 列出文件内容符合指定的样式的文件名称。</li><li>-L 或 –files-without-match : 列出文件内容不符合指定的样式的文件名称。</li><li>-n 或 –line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。</li><li>-q 或 –quiet或–silent : 不显示任何信息。</li><li>-r 或 –recursive : 此参数的效果和指定”-d recurse”参数相同。</li><li>-s 或 –no-messages : 不显示错误信息。</li><li>-v 或 –revert-match : 显示不包含匹配文本的所有行。</li><li>-V 或 –version : 显示版本信息。</li><li>-w 或 –word-regexp : 只显示全字符合的列。</li><li>-x –line-regexp : 只显示全列符合的列。</li><li>-y : 此参数的效果和指定”-i”参数相同</li></ul></blockquote><p><strong>实例</strong><br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@hard supervisord]# grep <span class="string">'POST.*play_order.*return 200'</span> tmd.log</span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">21</span>,<span class="number">190</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">14</span>:<span class="number">42</span>:<span class="number">03</span>,<span class="number">327</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">27</span>,<span class="number">720</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">25</span>,<span class="number">090</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">18</span>:<span class="number">33</span>:<span class="number">20</span>,<span class="number">517</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">20</span>:<span class="number">55</span>,<span class="number">863</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">36</span>,<span class="number">183</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">44</span>,<span class="number">021</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span> <span class="number">17</span>:<span class="number">55</span>:<span class="number">15</span>,<span class="number">172</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br></pre></td></tr></table></figure></p><p><code>grep &#39;POST.*play_order.*return 200&#39; tmd.log</code> 这个等同于<code>grep  &#39;play_order&#39; tmd.log  | grep &#39;POST&#39; | grep &#39;return 200&#39;</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hard supervisord]# <span class="keyword">grep</span> -<span class="keyword">c</span> <span class="string">'POST.*play_order.*return 200'</span> tmd.<span class="built_in">log</span></span><br><span class="line"><span class="number">62</span></span><br><span class="line">[root@hard supervisord]# <span class="keyword">grep</span> -<span class="keyword">c</span>  <span class="string">'play_order'</span> tmd.<span class="built_in">log</span>  | <span class="keyword">grep</span> <span class="string">'POST'</span> | <span class="keyword">grep</span> <span class="string">'return 200'</span></span><br><span class="line">[root@hard supervisord]# <span class="keyword">grep</span>  <span class="string">'play_order'</span> tmd.<span class="built_in">log</span>  | <span class="keyword">grep</span> <span class="string">'POST'</span> | <span class="keyword">grep</span> -<span class="keyword">c</span> <span class="string">'return 200'</span></span><br><span class="line"><span class="number">62</span></span><br></pre></td></tr></table></figure><p>grep可以和很多的命令一起使用<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看Linux 某些程序进程 ps aux </span><br><span class="line">[root@iZ2ze3269b etc]<span class="comment"># ps aux | grep mysql</span></span><br><span class="line">root     <span class="number"> 2371 </span> 0.0  0.0<span class="number"> 112676 </span> <span class="number"> 980 </span>pts/0    S+   14:34   0:00 grep --color=auto mysql</span><br><span class="line">mysql   <span class="number"> 10810 </span> 0.1  9.4<span class="number"> 1599384 </span>367788 ?      Sl   10月11  13:13 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure></p><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><p>tail 命令可用于查看文件的内容，有一个常用的参数 -f 常用于查阅正在改变的日志文件。<br>tail -f filename 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><blockquote><p>tail [参数] [文件]  </p></blockquote><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><blockquote><ul><li>-f 循环读取</li><li>-q 不显示处理信息</li><li>-v 显示详细的处理信息</li><li>-c&lt;数目&gt; 显示的字节数</li><li>-n&lt;行数&gt; 显示行数</li><li>–pid=PID 与-f合用,表示在进程ID,PID死掉之后结束.</li><li>-q, –quiet, –silent 从不输出给出文件名的首部</li><li>-s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒</li></ul></blockquote><p><strong>实例</strong></p><p>要显示 notes.log 文件的最后 10 行，请输入以下命令：</p><blockquote><p>tail notes.log</p></blockquote><p>要跟踪名为 notes.log 的文件的增长情况，请输入以下命令：</p><blockquote><p>tail -f notes.log</p></blockquote><p>此命令显示 notes.log 文件的最后 10 行。当将某些行添加至 notes.log 文件时，tail 命令会继续显示这些行。 显示一直继续，直到您按下（Ctrl-C）组合键停止显示。<br>显示文件 notes.log 的内容，从第 20 行至文件末尾:</p><blockquote><p>tail +20 notes.log</p></blockquote><h1 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h1><p>有时候我们会查询正在改变的文件，但是我们只想查看其中的某一些信息，这时候就可以使用tail、grep的混合使用</p><blockquote><p>tail -f filename | grep ‘DEBUG’ </p></blockquote><p><strong>实例</strong></p><blockquote><p>tail -f tmd.log | grep ‘DEBUG.<em>template.</em>begin’</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>vim 指令</title>
      <link href="/2018/11/14/vim-%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/11/14/vim-%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="上下左右"><a href="#上下左右" class="headerlink" title="上下左右"></a>上下左右</h3><p><code>h, j, k , l</code>四个键分别代表方向键<code>← ↓ ↑ →</code> ，也就是上下左右，每次只能向上、向左、向右、向下一下。<br>如果向下移动5行的话，可以用数字+快捷键<code>5j</code>,那么向右移动5个就是<code>5l</code>。</p><a id="more"></a><h3 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h3><p>组合键</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ctrl</span>&gt;</span> + f  向下移动一页 </span><br><span class="line"><span class="tag">&lt;<span class="name">ctrl</span>&gt;</span> + d  向下移动半页</span><br><span class="line"><span class="tag">&lt;<span class="name">ctrl</span>&gt;</span> + b  向上移动一页</span><br><span class="line"><span class="tag">&lt;<span class="name">ctrl</span>&gt;</span> + u  向上移动半页</span><br></pre></td></tr></table></figure><h3 id="行首行尾"><a href="#行首行尾" class="headerlink" title="行首行尾"></a>行首行尾</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="comment">#快速跳到行首</span></span><br><span class="line"><span class="variable">$ </span>  <span class="comment">#快速调到行尾</span></span><br><span class="line">g<span class="number">_</span>  <span class="comment">#快速跳到行尾最后一个非空字符</span></span><br></pre></td></tr></table></figure><h3 id="页头页尾"><a href="#页头页尾" class="headerlink" title="页头页尾"></a>页头页尾</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gg</span> <span class="comment">#快速跳到第一行</span></span><br><span class="line">G  <span class="comment">#快速跳到最后一行</span></span><br></pre></td></tr></table></figure><h3 id="行内查找"><a href="#行内查找" class="headerlink" title="行内查找"></a>行内查找</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fx     #从当前光标开始向右查找字符 <span class="keyword">x</span>，<span class="keyword">x</span> 为目标字符</span><br><span class="line">nfx    #从当前广告开始向右查找第 n 个字符 <span class="keyword">x</span>，n 为数字</span><br><span class="line">Fx     #从当前光标开始向左查找字符 <span class="keyword">x</span>，<span class="keyword">x</span> 为目标字符</span><br><span class="line">nfx    #从当前广告开始向左查找第 n 个字符 <span class="keyword">x</span>，n 为数字</span><br></pre></td></tr></table></figure><h3 id="全文查找"><a href="#全文查找" class="headerlink" title="全文查找"></a>全文查找</h3><p>如果你想要把全文的 native 都找到，可以按下 / 进入 command 模式，随后输入 native 然后回车，此时光标会定位在第一个目标上，并高亮所有找到的目标单词。此时按下 n 光标就会向下在高亮的单词上依次跳转，N 则会反方向跳转。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/word   <span class="string">" 输入 / 会进入 command 模式，再输入先要搜索的单词并回车进行搜索</span></span><br><span class="line">?word   <span class="string">" / 是向光标以后搜索，? 是向前搜索</span></span><br><span class="line">n       <span class="string">" 英文字母 n，根据 / 或 ? 搜索的方向定位到下一个匹配目标</span></span><br><span class="line">N       <span class="string">" 与 n 相反，定位匹配目标</span></span><br></pre></td></tr></table></figure><h3 id="复制、粘贴、删除"><a href="#复制、粘贴、删除" class="headerlink" title="复制、粘贴、删除"></a>复制、粘贴、删除</h3><p>复制当前行 <code>yy</code>，删除并复制当前行 <code>dd</code>，粘贴到光标下一行 <code>p</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dd          <span class="string">" 删除当前行</span></span><br><span class="line">ndd         <span class="string">" 向下删除 n 行</span></span><br><span class="line">d1G / dgg   <span class="string">" 删除第一行到当前行的数据</span></span><br><span class="line">dG          <span class="string">" 删除当前行到最后一行的数据</span></span><br><span class="line">d$          <span class="string">" 删除当前字符到行尾</span></span><br><span class="line">d0          <span class="string">" 从行首删除到当前字符</span></span><br><span class="line">yy          <span class="string">" 复制当前行</span></span><br><span class="line">nyy         <span class="string">" 从当前行开始复制 n 行</span></span><br><span class="line">y1G / ygg   <span class="string">" 从第一行复制到当前行</span></span><br><span class="line">yG          <span class="string">" 从当前行复制到最后一行</span></span><br><span class="line">y0          <span class="string">" 从行首复制到当前字符</span></span><br><span class="line">y$          <span class="string">" 从当前字符复制到行尾</span></span><br><span class="line">p, P        <span class="string">" 黏贴，p 黏贴到光标下一行，P 黏贴到光标上一行</span></span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x        <span class="string">" 向后删除一个字符</span></span><br><span class="line">nx       <span class="string">" 向后删除 n 个字符</span></span><br><span class="line">X        <span class="string">" 向前删除一个字符</span></span><br><span class="line">nX       <span class="string">" 向前删除 n 个字符</span></span><br></pre></td></tr></table></figure><h3 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">u</span>       <span class="comment">" 撤销</span></span><br><span class="line"><span class="symbol">&lt;c-r&gt;</span>   <span class="comment">" 重做</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux cp、ln命令的使用</title>
      <link href="/2018/11/13/Linux-cp%E3%80%81ln%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/11/13/Linux-cp%E3%80%81ln%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>cp命令主要用于复制文件或目录<br><a id="more"></a></p><p><strong>语法</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> [<span class="keyword">options</span>] <span class="keyword">source</span> dest</span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br>复制文件</p><blockquote><p>cp 源文件 目标文件</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FQY<span class="variable">@bogon</span> ~<span class="regexp">/Desktop/edc</span></span><br><span class="line">╰─<span class="variable">$ </span>cp /Users/FQY/Desktop/<span class="number">1</span>.xlsx <span class="number">1</span>.xlsx</span><br><span class="line">╭─FQY<span class="variable">@bogon</span> ~<span class="regexp">/Desktop/edc</span></span><br><span class="line">╰─<span class="variable">$ </span>ll</span><br><span class="line">total <span class="number">72</span></span><br><span class="line">-rw-------@ <span class="number">1</span> FQY  staff    <span class="number">28</span>K <span class="number">11</span> <span class="number">13</span> <span class="number">15</span><span class="symbol">:</span><span class="number">14</span> <span class="number">1</span>.xlsx</span><br><span class="line">-rw-r--r--  <span class="number">1</span> FQY  staff     0B <span class="number">11</span> <span class="number">13</span> <span class="number">14</span><span class="symbol">:</span><span class="number">31</span> bm.conf</span><br></pre></td></tr></table></figure><p>复制目录下面的所有文件<br>使用指令”cp”将当前目录”test/“下的所有文件复制到新目录”newtest”下，输入如下命令</p><blockquote><p>$ cp –r test/ newtest </p></blockquote><p>参数说明：</p><blockquote><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件。</li></ul></blockquote><h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><p>Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。<br>当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>ln [参数][源文件或目录][目标文件或目录]</p></blockquote><p><strong>软链接</strong></p><ul><li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>2.软链接可以 跨文件系统 ，硬链接不可以</li><li>3.软链接可以对一个不存在的文件名进行链接</li><li>4.软链接可以对目录进行链接</li></ul><p><strong>硬链接</strong></p><ul><li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>2.不允许给目录创建硬链接</li><li>3.硬链接只有在同一个文件系统中才能创建</li></ul><p><strong>必要参数</strong></p><ul><li>-b 删除，覆盖以前建立的链接</li><li>-d 允许超级用户制作目录的硬链接</li><li>-f 强制执行</li><li>-i 交互模式，文件存在则提示用户是否覆盖</li><li>-n 把符号链接视为一般目录</li><li>-s 软链接(符号链接)</li><li>-v 显示详细的处理过程</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>创建硬链接</p><blockquote><p>ln destop/1.xlsx 1.xlsx</p></blockquote><p>创建软链接</p><blockquote><p>ln -s destop/1.xlsx 1.xlsx</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>git clone 子模块</title>
      <link href="/2018/11/09/git-clone-%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/11/09/git-clone-%E5%AD%90%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>最近在做博客的时候，用到了其他的themes，因为配置，所以需要修改themes里面的代码，这时候有两种做法，一种是直接把代码下到本地，然后将代码直接拷贝项目中，另一种是用git做管理，项目中添加子项目。我先做的是先fork该theme一份，然后git我fork下来的这个项目。具体做法如下<br><a id="more"></a></p><h3 id="添加子项目"><a href="#添加子项目" class="headerlink" title="添加子项目"></a>添加子项目</h3><p><code>git submodule add [address]</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add <span class="string">https:</span><span class="comment">//github.com/chaconinc/DbConnector</span></span><br><span class="line">Cloning into <span class="string">'DbConnector'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">11</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">10</span>/<span class="number">10</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">11</span> (delta <span class="number">0</span>), reused <span class="number">11</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">11</span>/<span class="number">11</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure></p><p>默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 “DbConnector”。 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。</p><h3 id="自动初始化并更新仓库中的每一个子模块"><a href="#自动初始化并更新仓库中的每一个子模块" class="headerlink" title="自动初始化并更新仓库中的每一个子模块"></a>自动初始化并更新仓库中的每一个子模块</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --recursive <span class="string">https:</span><span class="comment">//github.com/chaconinc/MainProject</span></span><br><span class="line">Cloning into <span class="string">'MainProject'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">14</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">13</span>/<span class="number">13</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">14</span> (delta <span class="number">1</span>), reused <span class="number">13</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">14</span>/<span class="number">14</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule <span class="string">'DbConnector'</span> (<span class="string">https:</span><span class="comment">//github.com/chaconinc/DbConnector) registered for path 'DbConnector'</span></span><br><span class="line">Cloning into <span class="string">'DbConnector'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">11</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">10</span>/<span class="number">10</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">11</span> (delta <span class="number">0</span>), reused <span class="number">11</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">11</span>/<span class="number">11</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule path <span class="string">'DbConnector'</span>: checked out <span class="string">'c3f01dc8862123d317dd46284b05b6892c7b29bc'</span></span><br></pre></td></tr></table></figure><h3 id="在包含子模块的项目上工作"><a href="#在包含子模块的项目上工作" class="headerlink" title="在包含子模块的项目上工作"></a>在包含子模块的项目上工作</h3><p>如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，因为他们无法得到依赖的子模块改动。 那些改动只存在于我们本地的拷贝中。<br>为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。 git push 命令接受可以设置为 “check” 或 “on-demand” 的 –recurse-submodules 参数。 如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 push 操作失败。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git push <span class="comment">--recurse-submodules=check</span></span><br><span class="line">The following submodule paths <span class="keyword">contain</span> changes <span class="keyword">that</span> can</span><br><span class="line"><span class="keyword">not</span> be found <span class="keyword">on</span> any remote:</span><br><span class="line">  DbConnector</span><br><span class="line"></span><br><span class="line">Please <span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">    git push <span class="comment">--recurse-submodules=on-demand</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> cd <span class="keyword">to</span> <span class="keyword">the</span> path <span class="keyword">and</span> use</span><br><span class="line"></span><br><span class="line">    git push</span><br><span class="line"></span><br><span class="line"><span class="keyword">to</span> push them <span class="keyword">to</span> a remote.</span><br></pre></td></tr></table></figure></p><p>如你所见，它也给我们了一些有用的建议，指导接下来该如何做。 最简单的选项是进入每一个子模块中然后手动推送到远程仓库，确保它们能被外部访问到，之后再次尝试这次推送。</p><p>另一个选项是使用 “on-demand” 值，它会尝试为你这样做。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git push --recurse-submodules=<span class="keyword">on</span>-demand</span><br><span class="line">Pushing submodule <span class="string">'DbConnector'</span></span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">9</span>, done.</span><br><span class="line">Delta compression using <span class="keyword">up</span> <span class="keyword">to</span> <span class="number">8</span> threads.</span><br><span class="line">Compressing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">8</span>/<span class="number">8</span>), done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">9</span>/<span class="number">9</span>), <span class="number">917</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">9</span> (delta <span class="number">3</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To http<span class="variable">s:</span>//github.<span class="keyword">com</span>/chaconinc/DbConnector</span><br><span class="line">   c75e92a..<span class="number">82</span>d2ad3  stable -&gt; stable</span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">2</span>, done.</span><br><span class="line">Delta compression using <span class="keyword">up</span> <span class="keyword">to</span> <span class="number">8</span> threads.</span><br><span class="line">Compressing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), <span class="number">266</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">2</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To http<span class="variable">s:</span>//github.<span class="keyword">com</span>/chaconinc/MainProject</span><br><span class="line">   <span class="number">3</span>d6d338..<span class="number">9</span>a377d1  master -&gt; master</span><br></pre></td></tr></table></figure></p><p>如你所见，Git 进入到 DbConnector 模块中然后在推送主项目前推送了它</p><p>参考<br><a href="https://blog.csdn.net/xudailong_blog/article/details/79212220" target="_blank" rel="noopener">git clone 子模块（module）</a><br><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">git子模块</a> </p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ssh 免密码登录</title>
      <link href="/2018/11/08/ssh%20%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
      <url>/2018/11/08/ssh%20%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>通常的ssh登录有两种方式，一种是通过密码登录，一种是通过密钥登录，在实际使用过程中，会发现用密码登录很繁琐，需要每次都输入密码，这时候用密钥登录就会很方便。<br><a id="more"></a></p><h3 id="密码登录"><a href="#密码登录" class="headerlink" title="密码登录"></a>密码登录</h3><p><strong>格式</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@<span class="number">10.2</span><span class="meta">.8</span><span class="meta">.41</span></span><br><span class="line">root@<span class="number">10.2</span><span class="meta">.8</span><span class="meta">.41</span><span class="string">'s password:</span></span><br></pre></td></tr></table></figure></p><p>这时候输入密码就可以登录成功<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@<span class="number">10.2.8.41</span></span><br><span class="line">root@<span class="number">10.2.8.41</span>'s password:</span><br><span class="line">Last login: Thu Nov  <span class="number">1</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">05</span> <span class="number">2018</span> from <span class="number">10.2.0.33</span></span><br><span class="line"><span class="string">[root@hardwareupdate ~]</span>#</span><br></pre></td></tr></table></figure></p><h3 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h3><h5 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@host</span> ~]$ ssh-keygen -t rsa  &lt;== 建立密钥对</span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (<span class="regexp">/root/</span>.ssh/id_rsa): &lt;== 按 Enter</span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): &lt;== 输入密钥锁码，或直接按 Enter 留空</span><br><span class="line">Enter same passphrase <span class="string">again:</span> &lt;== 再输入一遍密钥锁码</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> <span class="regexp">/root/</span>.ssh/id_rsa. &lt;== 私钥</span><br><span class="line">Your <span class="keyword">public</span> key has been saved <span class="keyword">in</span> <span class="regexp">/root/</span>.ssh/id_rsa.pub. &lt;== 公钥</span><br><span class="line">The key fingerprint <span class="string">is:</span></span><br><span class="line"><span class="number">0</span><span class="string">f:</span><span class="string">d3:</span><span class="string">e7:</span><span class="number">1</span><span class="string">a:</span><span class="number">1</span><span class="string">c:</span><span class="string">bd:</span><span class="number">5</span><span class="string">c:</span><span class="number">03</span>:<span class="string">f1:</span><span class="number">19</span>:<span class="string">f1:</span><span class="number">22</span>:<span class="string">df:</span><span class="number">9</span><span class="string">b:</span><span class="string">cc:</span><span class="number">08</span> root<span class="meta">@host</span></span><br></pre></td></tr></table></figure><p>密钥生成以后，在.ssh下面会多两个文件，<code>id_rsa.pub</code>是公钥，<code>id_rsa</code>是私钥<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">[root@host <span class="string">.ssh</span>]$ <span class="keyword">ls</span></span><br><span class="line">id_rsa id_rsa.pub known_hosts config</span><br></pre></td></tr></table></figure></p><p>然后把公钥上传到服务器上，<code>scp</code>等同于<code>ssh-copy-id -i</code><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@A ~]# scp /root/.ssh/id_rsa.pub root@<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.181</span>:/root/.ssh/authorized_keys  </span><br><span class="line">root@<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.181</span><span class="string">'s password:</span></span><br><span class="line"><span class="string">id_rsa.pub                                    100%  223     0.2KB/s   00:00</span></span><br></pre></td></tr></table></figure></p><p>由于还没有免密码登录的，所以要输入一次服务器的密码登录,如果服务器没有authorized_keys文件，用touch authorized_keys 创建</p><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p>登录服务器，进入.ssh里面，给authorized_keys设置权限<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">[root@host <span class="string">.ssh</span>]$ <span class="keyword">ls</span></span><br><span class="line">authorized_keys  known_hosts</span><br><span class="line">[root@host <span class="string">.ssh</span>]$ chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></p><h5 id="本地配置权限"><a href="#本地配置权限" class="headerlink" title="本地配置权限"></a>本地配置权限</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">[root@host <span class="string">.ssh</span>]$ chmod 600 id_rsa</span><br></pre></td></tr></table></figure><p>这时候就可以用密钥登录了<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa root@<span class="number">192.168</span><span class="number">.100</span><span class="number">.39</span></span><br></pre></td></tr></table></figure></p><h3 id="用config去管理"><a href="#用config去管理" class="headerlink" title="用config去管理"></a>用config去管理</h3><p>用<code>ssh -i ~/.ssh/id_rsa root@192.168.100.39</code>登录时很繁琐的，这时候就可以用config去管理</p><p><strong>例如</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.ssh/config 文件示例</span></span><br><span class="line"><span class="comment"># Host 参数标明以下内容仅适用于访问 236 主机时适用，Host 参数本身只是一个入口字符串；</span></span><br><span class="line">Host fuwuqi</span><br><span class="line">　　HostName 192.168.99.236</span><br><span class="line">　<span class="built_in">　User </span>git</span><br><span class="line">　<span class="built_in">　Port </span>22</span><br><span class="line">　　IdentityFile ~/.ssh/rsa-michael-236</span><br><span class="line">Host github</span><br><span class="line">　　HostName 192.168.99.3</span><br><span class="line">　<span class="built_in">　User </span>root</span><br><span class="line">　<span class="built_in">　Port </span>22</span><br><span class="line">　　IdentityFile ~/.ssh/rsa-3root-michael</span><br></pre></td></tr></table></figure></p><p>配置完这些以后，就可以用这个登录了<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~] ssh fuwuqi</span><br><span class="line">Last login: Thu Nov  8 09:40:00 2018 <span class="keyword">from</span> 192.168.99.236</span><br><span class="line">Welcome <span class="keyword">to</span> Alibaba Cloud Elastic Compute<span class="built_in"> Service </span>!</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>centos7 安装zsh和oh-my-zsh</title>
      <link href="/2018/11/06/centos7-%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/"/>
      <url>/2018/11/06/centos7-%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/</url>
      
        <content type="html"><![CDATA[<p>目前的centos系统默认的shell还是bash，但是zsh被称为终极shell，国外有个程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」，Github 网址是：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a> 有了这玩意zsh用起来直接就变成神器了。<br><a id="more"></a></p><h4 id="查看系统当前的shell"><a href="#查看系统当前的shell" class="headerlink" title="查看系统当前的shell"></a>查看系统当前的shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>返回的结果是:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure></p><h3 id="查看bin下是否有zsh包"><a href="#查看bin下是否有zsh包" class="headerlink" title="查看bin下是否有zsh包"></a>查看bin下是否有zsh包</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">返回的结果是:</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br><span class="line">PS.默认没有安装zsh</span><br></pre></td></tr></table></figure><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> -y zsh</span><br></pre></td></tr></table></figure><p>然后在输入<code>cat /etc/shells</code>查看</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/bin/</span>sh</span><br><span class="line"><span class="meta-keyword">/bin/</span>bash</span><br><span class="line"><span class="meta-keyword">/sbin/</span>nologin</span><br><span class="line"><span class="meta-keyword">/usr/</span>bin/sh</span><br><span class="line"><span class="meta-keyword">/usr/</span>bin/bash</span><br><span class="line"><span class="meta-keyword">/usr/</span>sbin/nologin</span><br><span class="line"><span class="meta-keyword">/bin/</span>zsh</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>将zsh设置成默认的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s <span class="regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/4060631-102e57784c72f94b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/708/format/webp" alt=""><br>设置完以后不会立即生效，需要重启方能生效，所以我们可以配置完oh-my-zsh以后再重启</p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/robbyrussell/</span>oh-my-zsh<span class="regexp">/raw/m</span>aster<span class="regexp">/tools/i</span>nstall.sh -O - | sh</span><br></pre></td></tr></table></figure><p>如果出现以下界面表示成功</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__                                     __   </span><br><span class="line">  ____  <span class="regexp">/ /</span>_     ____ ___  __  __   ____  _____<span class="regexp">/ /</span>_  </span><br><span class="line"> <span class="regexp">/ __ \/</span> __ \   <span class="regexp">/ __ `__ \/</span> <span class="regexp">/ /</span> <span class="regexp">/  /</span>_  <span class="regexp">/ /</span> ___/ __ \ </span><br><span class="line"><span class="regexp">/ /</span>_<span class="regexp">/ /</span> <span class="regexp">/ /</span> <span class="regexp">/  /</span> <span class="regexp">/ /</span> <span class="regexp">/ /</span> <span class="regexp">/ /</span>_<span class="regexp">/ /</span>    <span class="regexp">/ /</span>_(__  ) <span class="regexp">/ /</span> / </span><br><span class="line">\____<span class="regexp">/_/</span> <span class="regexp">/_/</span>  <span class="regexp">/_/</span> <span class="regexp">/_/</span> <span class="regexp">/_/\_</span>_, <span class="regexp">/    /</span>___<span class="regexp">/____/</span>_<span class="regexp">/ /</span>_/  </span><br><span class="line">                        <span class="regexp">/____/</span>                       ....is now installed!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line"></span><br><span class="line">p.s. Follow us at <span class="string">https:</span><span class="comment">//twitter.com/ohmyzsh.</span></span><br><span class="line"></span><br><span class="line">p.p.s. Get stickers and t-shirts at <span class="string">http:</span><span class="comment">//shop.planetargon.com.</span></span><br></pre></td></tr></table></figure><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p><em>主题链接地址</em> <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">oh-my-zsh主题</a></p><p>目前我使用的主题是<code>bira</code><br><img src="https://cloud.githubusercontent.com/assets/2618447/6316716/51a0708e-ba00-11e4-8664-11a804f2fe3f.png" alt=""></p><p><strong>修改主题</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>vim ~<span class="regexp">/.zshrc</span></span><br></pre></td></tr></table></figure><p>刚安装oh-my-zsh默认的主题是robbyrussell，将<code>ZSH_THEME</code>改成<code>bira</code></p><p><strong>更新配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.zshrc</span></span><br></pre></td></tr></table></figure><p>然后重启, 使zsh配置生效</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>对Python装饰器的一些理解</title>
      <link href="/2018/10/31/%E5%AF%B9Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
      <url>/2018/10/31/%E5%AF%B9Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-装饰器的定义"><a href="#1-装饰器的定义" class="headerlink" title="1.装饰器的定义"></a>1.装饰器的定义</h2><p>装饰器是对在运行期间对函数进行一些外部功能的扩展。也就是在其他函数不需要做任何代码变动的前提下增加额外功能。<br><a id="more"></a></p><h2 id="2-装饰器的应用场景"><a href="#2-装饰器的应用场景" class="headerlink" title="2.装饰器的应用场景"></a>2.装饰器的应用场景</h2><p>插入日志、性能测试、事务处理、缓存、权限校验等场景</p><p><strong>例如</strong><br>我们在接收请求的时候多会看是否包含某一个元素。比如查看是否包含有code,如果有code，就打印错误并且ruturn返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">requestedCode</span><span class="params">(*params)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrappered</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'%s is running'</span> % func.__name__)</span><br><span class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> params:</span><br><span class="line">                print(<span class="string">'错误错误'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, *kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrappered</span><br><span class="line">    <span class="keyword">return</span> _wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">@requestedCode('code')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am world'</span>)</span><br><span class="line">    </span><br><span class="line">print(hello_world())</span><br></pre></td></tr></table></figure><h2 id="3-装饰器使用-functools-wraps-的理由"><a href="#3-装饰器使用-functools-wraps-的理由" class="headerlink" title="3.装饰器使用 @functools.wraps 的理由"></a>3.装饰器使用 @functools.wraps 的理由</h2><p>Python 中使用装饰器对在运行期对函数进行一些外部功能的扩展。但是在使用过程中，由于装饰器的加入导致解释器认为函数本身发生了改变，在某些情况下——比如测试时——会导致一些问题。Python 通过 functool.wraps 为我们解决了这个问题：在编写装饰器时，在实现前加入 @functools.wraps(func) 可以保证装饰器不会对被装饰函数造成影响。比如，在 Flask 中，我们要自己重写 login_required 装饰器，但不想影响被装饰器装饰的方法，则 login_required 装饰器本身可以写成下面的样子：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def login_required_(<span class="function"><span class="keyword">func</span>):</span></span><br><span class="line">    <span class="symbol">@wraps</span>(<span class="function"><span class="keyword">func</span>)</span></span><br><span class="line">    def decorated_view(*args, **kwargs):</span><br><span class="line">        <span class="keyword">if</span> current_app.login_manager._login_disabled:</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(*args, **kwargs)</span></span></span><br><span class="line">        elif <span class="literal">not</span> current_user.is_authenticated:</span><br><span class="line">            <span class="meta"># return current_app.login_manager.unauthorized()</span></span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">"login.loginPage"</span>, <span class="keyword">next</span>=request.url))</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(*args, **kwargs)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorated_view</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/26930016" target="_blank" rel="noopener">如何理解Python装饰器？</a><br><a href="http://blog.csdn.net/tiwoo/article/details/50835337" target="_blank" rel="noopener">Python 中实现装饰器时使用 @functools.wraps 的理由</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python基础学习----切片、迭代、列表生成式</title>
      <link href="/2018/10/31/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%88%87%E7%89%87%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
      <url>/2018/10/31/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%88%87%E7%89%87%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>通常我们取list里面的元素会这样写<br><a id="more"></a><br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="symbol">'zhangsan'</span>,<span class="symbol">'lisi'</span>,<span class="symbol">'wangwu'</span>]</span><br><span class="line"><span class="built_in">list</span>[<span class="number">0</span>] <span class="built_in">list</span>[<span class="number">1</span>] <span class="built_in">list</span>[<span class="number">2</span>]</span><br><span class="line">取n个的话：</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">   <span class="built_in">list</span>[i]</span><br></pre></td></tr></table></figure></p><p>但是这样用循环很麻烦，可以这样做</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment">#这样取的是从0开始，往后数3个数</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment">#这样取的是从1开始，往后数2个数</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>   如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代。在Python中，迭代是通过for … in来完成的<br><br>    在Python不是都是迭代的，所以有时候需要判断是否可以迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>列表生成式是Python中内置的非常简单却非常强大的可以用来创建list的生成式。<br>例如要生成list <code>[1,2,3,4,5,6,7,8,9]</code>,可以用<code>list(range(1,10))</code><br>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？<br><br>方法一是循环：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; L = []</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; for x in range(<span class="number">1</span>, <span class="number">11</span>)<span class="symbol">:</span></span><br><span class="line">...    L.append(x * x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; L</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>方法二：列表生成式</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">得出：</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><p>列表生成式还有其他的用法<br><br>*在for循环后面加if判断语句<br><br>例如：仅偶数的平方</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(<span class="number">1</span>,<span class="number">11</span>) if x % <span class="number">2</span> == <span class="number">0</span> ]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>*使用两层循环,生成全排列</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">m</span> + n for m in <span class="symbol">'ABC</span>' for n in <span class="symbol">'XYZ</span>']</span><br><span class="line">[<span class="symbol">'AX</span>', <span class="symbol">'AY</span>', <span class="symbol">'AZ</span>', <span class="symbol">'BX</span>', <span class="symbol">'BY</span>', <span class="symbol">'BZ</span>', <span class="symbol">'CX</span>', <span class="symbol">'CY</span>', <span class="symbol">'CZ</span>']</span><br></pre></td></tr></table></figure><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>判断是否可以迭代，在用列表生成式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">L = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="number">18</span>, <span class="string">'Apple'</span>, <span class="keyword">None</span>]</span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> L <span class="keyword">if</span> isinstance(x,str) == <span class="keyword">True</span>]</span><br><span class="line">结果：</span><br><span class="line">[<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'Apple'</span>]</span><br></pre></td></tr></table></figure><p>注：文章是在廖雪峰大大的网站学习后写下的学习摘要。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Flask 上下文全局变量</title>
      <link href="/2018/10/31/Flask-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
      <url>/2018/10/31/Flask-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">上下文</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">current_app</td><td style="text-align:left">程序上下文</td><td style="text-align:left">当前激活程序的程序实例</td></tr><tr><td style="text-align:left">g</td><td style="text-align:left">程序上下文</td><td style="text-align:left">处理请求时用作临时存储的对象，每次请求都会重设这个变量</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">请求上下文</td><td style="text-align:left">请求对象，封装了客户端发出的HTTP请求中的内容</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">请求上下文</td><td style="text-align:left">用户会话，用于存储请求之间需要记住的值的词典</td></tr></tbody></table><p>Flask 在分发请求之前激活(或推送)程序和请求上下文，请求处理完成后再将其删除。程 序上下文被推送后，就可以在线程中使用 current_app 和 g 变量。类似地，请求上下文被 推送后，就可以使用 request 和 session 变量。如果使用这些变量时我们没有激活程序上 下文或请求上下文，就会导致错误。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>flask下 gunicorn在Python中的使用</title>
      <link href="/2018/10/31/flask%E4%B8%8B-gunicorn%E5%9C%A8Python%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/flask%E4%B8%8B-gunicorn%E5%9C%A8Python%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>gunicorn使用非常简单，并且也非常好用，所以需要写一下自己的理解。😀<br><a id="more"></a></p><p>使用gunicorn的使用，需先安装flask,安装方法如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> flask</span><br></pre></td></tr></table></figure><p>下面为一个简单的用flask写的web服务,main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="keyword">True</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>gunicorn的作用就是用命令行来启动服务器。安装如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> gunicorn</span><br></pre></td></tr></table></figure><p>最简单的启动命令为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><p> 其中code就是指main.py.app就是那个wsgifunc的名字。<br> 这样运行的话， gunicorn 默认作为一个监听 127.0.0.1:8000 的web server，可以在本机通过： <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 访问。<br>如果要通过网络访问，则需要绑定不同的地址（也可以同时设置监听端口），设置0.0.0.0可以监听到所有ip的请求：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8080</span> <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><p>在多核服务器上，为了支持更多的并发访问并充分利用资源，可以使用更多的 gunicorn 进程：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><p>两者结合到一起就是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8080</span> <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：<br></h4><ul><li>-b 表示 gunicorn 开发的访问地址 <br></li><li>-w 表示开启多少个线程</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python之random的send()的使用</title>
      <link href="/2018/10/31/Python%E4%B9%8Brandom%E7%9A%84send-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/Python%E4%B9%8Brandom%E7%9A%84send-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>对于send方法的定义，在一篇文章中看到这样一个定义，发现很符合这个解释<br><a id="more"></a><br><code>seed( ) 用于指定随机数生成时所用算法开始的整数值，如果使用相同的seed( )值，则每次生成的随即数都相同，如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同</code></p><p>情况下面的几行代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">random</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random 5 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random 10 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random 7 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"random 5 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random <span class="number">5</span> is  <span class="number">0.6229016948897019</span></span><br><span class="line">random <span class="number">10</span> is  <span class="number">0.5714025946899135</span></span><br><span class="line">random <span class="number">7</span> is  <span class="number">0.32383276483316237</span></span><br><span class="line">random <span class="number">5</span> is  <span class="number">0.6229016948897019</span></span><br></pre></td></tr></table></figure><p>你会发现当seed()值是一样的时候，输出的结果是一样的。而不一样的值得出的结果不一样。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>python之random的random的使用</title>
      <link href="/2018/10/31/python%E4%B9%8Brandom%E7%9A%84random%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/python%E4%B9%8Brandom%E7%9A%84random%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>random.random()生成0和1之间的随机浮点数float<br><a id="more"></a><br>例如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">"random 7 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br></pre></td></tr></table></figure><p>运行结果为：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random <span class="number">7</span> is  <span class="number">0.32383276483316237</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>利用tablib、make_response 进行文件的下载</title>
      <link href="/2018/10/31/%E5%88%A9%E7%94%A8tablib%E3%80%81make-response-%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
      <url>/2018/10/31/%E5%88%A9%E7%94%A8tablib%E3%80%81make-response-%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>tablib 主要作用是将数据导出为各种不同的格式，包括excel，json，html，yaml，csv，tsv等格式。使用起来也非常简单。<br><a id="more"></a></p><p>tablib的下载<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> tablib</span><br></pre></td></tr></table></figure></p><p>下面就是文件下载的代码<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import tablib</span><br><span class="line">from flask import make_response</span><br><span class="line">def file_download():</span><br><span class="line"> dataset1 = tablib.<span class="symbol">Dataset</span>()</span><br><span class="line">    header1 = (<span class="string">'ID'</span>, <span class="string">'Name'</span>, <span class="string">'Tel'</span>, <span class="string">'Age'</span>)</span><br><span class="line">    dataset1.headers = header1</span><br><span class="line">    dataset1.append([<span class="number">1</span>, <span class="string">'zhangsands'</span>, <span class="number">13711111111</span>, <span class="number">16</span>])</span><br><span class="line">    dataset1.append([<span class="number">2</span>, <span class="string">'lisiasfasd阿斯顿发gwus'</span>, <span class="number">13911111111</span>, <span class="number">20</span>])</span><br><span class="line">    dataset1.append([<span class="number">4</span>, <span class="string">'zhao发送到li2u'</span>, <span class="number">15811111111</span>, <span class="number">25</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    header2 = (<span class="string">'ID'</span>, <span class="string">'Name'</span>, <span class="string">'Tel'</span>, <span class="string">'Age'</span>)</span><br><span class="line">    data2 = [</span><br><span class="line">        [<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="number">13711111111</span>, <span class="number">16</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="string">'lisi'</span>, <span class="number">13811111111</span>, <span class="number">18</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="string">'wangwu'</span>, <span class="number">13911111111</span>, <span class="number">20</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="string">'zhaoliu'</span>, <span class="number">15811111111</span>, <span class="number">25</span>]</span><br><span class="line">    ]</span><br><span class="line">    dataset2 = tablib.<span class="symbol">Dataset</span>(*data2, headers=header2)</span><br><span class="line"></span><br><span class="line">    dataset1.title = <span class="string">'dataset1'</span>  # 设置<span class="symbol">Excel</span>中表单的名称</span><br><span class="line">    dataset2.title = <span class="string">'dataset2'</span></span><br><span class="line">    </span><br><span class="line">      # 如果有多个sheet表单，使用<span class="symbol">DataBook</span>就可以了</span><br><span class="line">    myDataBook = tablib.<span class="symbol">Databook</span>((dataset1, dataset2))</span><br><span class="line">    ds = myDataBook.export(<span class="string">'xlsx'</span>)</span><br><span class="line"></span><br><span class="line">    response = make_response(ds)</span><br><span class="line">    response.headers[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=&#123;&#125;'</span>.format(<span class="string">'dhel.xlsx'</span>)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure></p><p>引用：<br><a href="https://blog.csdn.net/calling_wisdom/article/details/41447791" target="_blank" rel="noopener">Python tablib模块</a><br><a href="http://docs.python-tablib.org/en/master/" target="_blank" rel="noopener">tablib文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>pip 升级所遇到的问题</title>
      <link href="/2018/10/31/pip-%E5%8D%87%E7%BA%A7%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/31/pip-%E5%8D%87%E7%BA%A7%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>pip的原有版本是9.0.1，最近发现pip可以升级了，想到pip升级到10以上用了下面各种方法，都不管用,如下：<br><a id="more"></a><br>用了mac/limux方法 :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> pip <span class="keyword">install</span> -U pip </span><br><span class="line">easy_install  <span class="comment">--upgrade pip</span></span><br><span class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure></p><p>用了windows 方法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br><span class="line">python -m pip <span class="keyword">install</span> -U pip</span><br></pre></td></tr></table></figure></p><p>最后从源头做起，里面搞定<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">curl </span><span class="string">https:</span>//<span class="string">bootstrap.</span><span class="string">pypa.</span><span class="string">io/</span><span class="built_in">get-pip.py</span> | <span class="string">python3</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>pip安装时ReadTimeoutError解决办法</title>
      <link href="/2018/10/31/pip%E5%AE%89%E8%A3%85%E6%97%B6ReadTimeoutError%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/10/31/pip%E5%AE%89%E8%A3%85%E6%97%B6ReadTimeoutError%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>有一个本地服务器，网速很慢，下载老是出错，出现<br><a id="more"></a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip._vendor<span class="selector-class">.urllib3</span><span class="selector-class">.exceptions</span><span class="selector-class">.ReadTimeoutError</span>: </span><br><span class="line"><span class="function"><span class="title">HTTPSConnectionPool</span><span class="params">(host=<span class="string">'files.pythonhosted.org'</span>, port=<span class="number">443</span>)</span></span>: Read timed out.</span><br></pre></td></tr></table></figure></p><p>经过google，发现用下面的内容就可以完美解决<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --<span class="section">default</span>-timeout=<span class="number">100</span> install gevent</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>安装PyCrypto以后出现的错误</title>
      <link href="/2018/10/31/%E5%AE%89%E8%A3%85PyCrypto%E4%BB%A5%E5%90%8E%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/31/%E5%AE%89%E8%A3%85PyCrypto%E4%BB%A5%E5%90%8E%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p> 最近另一个同事安装了PyCrypto，并且在本地和服务器运行都没有错误。当我download下来的时候，安装PyCrypto，运行竟然出现了错误。如下：<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">homeassistant  | 16-07-01 18:35:24 ERROR (MainThread) [homeassistant.bootstrap] Error during setup of component wink</span><br><span class="line">homeassistant  | Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/src/app/homeassistant/bootstrap.py"</span>, line <span class="number">150</span>, <span class="keyword">in</span> _setup_component</span><br><span class="line">homeassistant  |     <span class="keyword">if</span> <span class="keyword">not</span> component.setup(hass, config):</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/src/app/homeassistant/components/wink.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> setup</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> pubnub <span class="keyword">import</span> Pubnub</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/local/lib/python3.4/site-packages/pubnub.py"</span>, line <span class="number">25</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/local/lib/python3.4/site-packages/Crypto/Cipher/__init__.py"</span>, line <span class="number">78</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> Crypto.Cipher._mode_ecb <span class="keyword">import</span> _create_ecb_cipher</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/local/lib/python3.4/site-packages/Crypto/Cipher/_mode_ecb.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> Crypto.Util._raw_api <span class="keyword">import</span> (load_pycryptodome_raw_lib,</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/local/lib/python3.4/site-packages/Crypto/Util/_raw_api.py"</span>, line <span class="number">33</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> Crypto.Util.py3compat <span class="keyword">import</span> byte_string</span><br><span class="line">homeassistant  | ImportError: cannot <span class="keyword">import</span> <span class="keyword">name</span> <span class="string">'byte_string'</span></span><br></pre></td></tr></table></figure></p><p>解决办法是<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 uninstall pycrypto</span><br><span class="line">pip3 uninstall pycryptodome</span><br><span class="line">pip3 install pycryptodome</span><br></pre></td></tr></table></figure></p><p>这时候就可以正常运行了</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用tablib出现的错误</title>
      <link href="/2018/10/31/%E4%BD%BF%E7%94%A8tablib%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/31/%E4%BD%BF%E7%94%A8tablib%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>最近公司要发邮件，基于tablib的强大功能，我理所当然的使用了它。但是在使用过程中发现一个bug，具体bug报这个错误<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using <span class="selector-tag">a</span> coordinate with ws<span class="selector-class">.cell</span> is deprecated. Use ws[coordinate] instead<span class="string">"</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>刚开始是报警告，后面因为换电脑直接更新requerement.txt，然后发邮件就直接报错<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DeprecationWarning: Call <span class="keyword">to</span> <span class="keyword">deprecated</span> <span class="function"><span class="keyword">function</span> <span class="title">remove_sheet</span></span></span><br><span class="line"><span class="function"> <span class="params">(Use wb.<span class="keyword">remove</span>(worksheet)</span> <span class="title">or</span> <span class="title">del</span> <span class="title">wb</span>[<span class="title">sheetname</span>]).</span></span><br><span class="line"><span class="function">  <span class="title">wb</span>.<span class="title">remove_sheet</span><span class="params">(sheet)</span></span></span><br></pre></td></tr></table></figure></p><p>后来经过查资料发现是因为tablib里面使用openpyxl的问题。openpyxl的版本过高，导致的问题，把openpyxl的版本改下就OK了。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原来的openpyxl版本是<span class="number">2.5</span><span class="number">.4</span>.将其降到<span class="number">2.5</span><span class="number">.0</span>以下就没问题了。</span><br><span class="line">pip install openpyxl==<span class="number">2.4</span><span class="number">.9</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>flask-excel 下载的时候出现OSError错误</title>
      <link href="/2018/10/31/flask-excel-%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0OSError%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/31/flask-excel-%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0OSError%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>最近在使用flask-excel报OSError: No content, file name. Nothing is given错误<br><a id="more"></a><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> excel.make_response_from_records(items, <span class="string">"xlsx"</span>, file_name=<span class="string">"all_content"</span>)</span><br></pre></td></tr></table></figure></p><p>经过查考是因为需要添加支持xlsx的控件<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pyexcel-xlsx</span><br></pre></td></tr></table></figure></p><p>这时候就会完美解决</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iOS开发杂记</title>
      <link href="/2018/10/31/iOS%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/"/>
      <url>/2018/10/31/iOS%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>因为记性不好，常常看到点东西，都感觉很好，但是经常时间一长都忘了，所以现在些杂记，记住这些。慢慢补充。<br><a id="more"></a></p><h2 id="1-iOS屏幕旋转"><a href="#1-iOS屏幕旋转" class="headerlink" title="1.iOS屏幕旋转"></a>1.iOS屏幕旋转</h2><p>iOS屏幕旋转可以用系统通知判断方向UIDeviceOrientationDidChangeNotification; 是在屏幕旋转过以后UIApplicationWillChangeStatusBarOrientationNotification;<br>屏幕没有旋转过的时候调用，可以用系统通知</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] <span class="string">addObserver:</span>self <span class="string">selector:</span></span><br><span class="line"><span class="meta">@selector</span>(autorotateDirection)<span class="string">name:</span>UIDeviceOrientationDidChangeNotification <span class="string">object:</span>nil];</span><br></pre></td></tr></table></figure><h2 id="2-tableView头部偏离问题"><a href="#2-tableView头部偏离问题" class="headerlink" title="2.tableView头部偏离问题"></a>2.tableView头部偏离问题</h2><p>最近在用tableView的时候，出现自动偏移了64PX，经过查资料，发现需要设置下</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>([selfrespondsToSelector:<span class="keyword">@selector</span>(edgesForExtendedLayout)])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">self</span>.edgesForExtendedLayout= <span class="built_in">UIRectEdgeNone</span>;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="keyword">self</span>.navigationController.navigationBar setTranslucent:<span class="literal">YES</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于cocoapods管理库遇到的坑</title>
      <link href="/2018/10/31/%E5%85%B3%E4%BA%8Ecocoapods%E7%AE%A1%E7%90%86%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2018/10/31/%E5%85%B3%E4%BA%8Ecocoapods%E7%AE%A1%E7%90%86%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>今天花了一点时间来做cocoapods管理自己写的库问题。发现遇到好多坑。<br><a id="more"></a></p><h3 id="记得这样放"><a href="#记得这样放" class="headerlink" title="记得这样放"></a>记得这样放</h3><p><img src="http://upload-images.jianshu.io/upload_images/2120155-24cc6c2668e503dc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cocoaspods1.png"></p><h3 id="记得当你pod-lib-lint-XXKH-podspec成功的时候，记得给库加入tag值"><a href="#记得当你pod-lib-lint-XXKH-podspec成功的时候，记得给库加入tag值" class="headerlink" title="记得当你pod lib lint XXKH.podspec成功的时候，记得给库加入tag值"></a>记得当你pod lib lint XXKH.podspec成功的时候，记得给库加入tag值</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">'1</span>.<span class="number">0.0</span>'</span><br><span class="line">git push --tags</span><br><span class="line">pod <span class="keyword">spec</span> lint</span><br></pre></td></tr></table></figure><p>然后是检查下，最后提交给pod，具体为pod trunk push XXKH.podspec</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>git Authentication failed 错误</title>
      <link href="/2018/10/31/git-Authentication-failed-%E9%94%99%E8%AF%AF/"/>
      <url>/2018/10/31/git-Authentication-failed-%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>最近在windows上面安装git的以后，git某一个项目，出现输入账号密码的界面，这时候应当输入你的用户名和密码。用户名是你的登录账号，密码是你的密码。这时候如果输入错误。那么你就git clone git… 会出现Authentication failed错误。<br><a id="more"></a><br>这时候你无论修改 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="selector-class">.name</span>  <span class="string">'name'</span></span><br><span class="line">git config --global user<span class="selector-class">.email</span>  <span class="string">'email'</span></span><br></pre></td></tr></table></figure><p>会发现还是报这个错误。然后我把git删除了，重装也还是不成。后来经大神指点，发现一个非常简单的解决方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> (一)进入控制面板</span><br><span class="line">（二）选择用户账户</span><br><span class="line">（三）选择管理你的凭据</span><br><span class="line">（四）选择Windows凭据</span><br><span class="line">（五）选择git保存的用户信息</span><br><span class="line">（六）选择编辑或者进行删除操作</span><br></pre></td></tr></table></figure><p>这时候你在git clone git…，你就会发现成功了。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">'good'</span></span></span><br><span class="line"><span class="bash">git push origin master</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git tag值的使用</title>
      <link href="/2018/10/31/Git-tag%E5%80%BC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/Git-tag%E5%80%BC%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>项目中因为业务的需要，需要打标签。所以这里就把常用的几个命令写下来，方便以后自己在打tag的时候可以直接用到。<br><a id="more"></a></p><h3 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span>   <span class="title">#这会看到项目下包含的标签</span></span><br><span class="line"><span class="title">git</span> show v1.<span class="number">1.0</span>    <span class="comment">#查看该标签下的版本信息</span></span><br></pre></td></tr></table></figure><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><p>打标签有两种，轻量标签和附注标签,轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">v1</span>.<span class="number">1.0</span>  <span class="comment">#创建轻量标签</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v1.<span class="number">1.0</span> -m <span class="string">"1.1.0版本"</span>   <span class="comment">#创建附注标签</span></span><br></pre></td></tr></table></figure><p>创建附注Tag时，参数a即annotated的缩写，指定Tag类型，后附Tag名。参数m指定Tag说明，说明信息会保存在Tag对象中。</p><h3 id="切换标签"><a href="#切换标签" class="headerlink" title="切换标签"></a>切换标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">v1</span><span class="selector-class">.1</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p>删除本地标签<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">-d</span> v1.<span class="number">1.0</span>   <span class="comment">#删除tag</span></span><br></pre></td></tr></table></figure></p><p>删除远程标签</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin <span class="symbol">:refs/tags/</span>标签名  </span><br><span class="line">  </span><br><span class="line">git push origin <span class="symbol">:refs/tags/protobuf-</span><span class="number">2.5</span>.0rc1</span><br></pre></td></tr></table></figure><h3 id="tag推送到项目管理仓库"><a href="#tag推送到项目管理仓库" class="headerlink" title="tag推送到项目管理仓库"></a>tag推送到项目管理仓库</h3><p>注意：打tag的时候先把代码提交到项目管理仓库，然后在提交tag,所以在提交tag值的时候可以先<br>git push origin master</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span> origin v1<span class="meta">.1</span><span class="meta">.0</span>   #将v1<span class="meta">.1</span><span class="meta">.0</span> Tag提交到git服务器</span><br><span class="line">git <span class="keyword">push</span> origin –-tags    # 将本地所有Tag一次性提交到git服务器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>git的初始用</title>
      <link href="/2018/10/31/git%E7%9A%84%E5%88%9D%E5%A7%8B%E7%94%A8/"/>
      <url>/2018/10/31/git%E7%9A%84%E5%88%9D%E5%A7%8B%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="git配置全局的用户名和邮箱"><a href="#git配置全局的用户名和邮箱" class="headerlink" title="git配置全局的用户名和邮箱"></a>git配置全局的用户名和邮箱</h3><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name xxkh</span><br><span class="line">git<span class="built_in"> config </span>--global user.email xxx@gmail.com</span><br></pre></td></tr></table></figure><h3 id="查看用户名和邮箱"><a href="#查看用户名和邮箱" class="headerlink" title="查看用户名和邮箱"></a>查看用户名和邮箱</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name</span><br><span class="line">git<span class="built_in"> config </span>user.email</span><br></pre></td></tr></table></figure><h3 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h3><p>在服务器上 clone 代码第一次通常会提示输入密码，为了下次不再提示，可以在 clone 后做如下操作<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>credential.helper store</span><br></pre></td></tr></table></figure></p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd project_root                             <span class="comment"># 进入项目目录</span></span><br><span class="line">git init                                    <span class="comment"># 初始化git仓库</span></span><br><span class="line">git add .                                   <span class="comment"># 添加文件到仓库</span></span><br><span class="line">git commit -m 'init commit'                 <span class="comment"># 提交代码到本地仓库</span></span><br><span class="line">git remote add origin $&#123;repository_path&#125;    <span class="comment"># 将项目关联到git server</span></span><br><span class="line">git pull origin <span class="keyword">master</span>                      <span class="title"># 同步代码</span></span><br><span class="line"><span class="title">git</span> push origin <span class="keyword">master</span>                      <span class="title"># push</span>代码到远程仓库</span><br><span class="line">git <span class="keyword">clone</span> <span class="title">$</span>&#123;repository_path&#125;                <span class="comment"># 新的位置clone项目</span></span><br></pre></td></tr></table></figure><h3 id="重新提交"><a href="#重新提交" class="headerlink" title="重新提交"></a>重新提交</h3><p>提交后如果发现遗漏可以使用 git commit –amend 重新提交<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">commit</span> -m <span class="string">'initial commit'</span></span><br><span class="line">git <span class="keyword">add</span> forgotten_file</span><br><span class="line">git <span class="keyword">commit</span> <span class="comment">--amend</span></span><br></pre></td></tr></table></figure></p><h3 id="撤销提交文件"><a href="#撤销提交文件" class="headerlink" title="撤销提交文件"></a>撤销提交文件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- &lt;file&gt;              # 取消对文件的修改。还原到最近的版本，废弃本地做的修改。</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span> &lt;<span class="keyword">file</span>&gt;...            <span class="comment"># 取消已经暂存的文件。即，撤销先前"git add"的操作</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>^                     <span class="comment"># 回退所有内容到上一个版本</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>^ a.py                <span class="comment"># 回退a.py这个文件的版本到上一个版本</span></span><br><span class="line">git <span class="keyword">reset</span> –soft <span class="keyword">HEAD</span>~<span class="number">3</span>              <span class="comment"># 向前回退到第3个版本</span></span><br><span class="line">git <span class="keyword">reset</span> –hard origin/<span class="keyword">master</span>       <span class="comment"># 将本地的状态回退到和远程的一样</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="number">057</span>d                      <span class="comment"># 回退到某个版本</span></span><br><span class="line">git revert <span class="keyword">HEAD</span>                     <span class="comment"># 回退到上一次提交的状态，按照某一次的commit完全反向的进行一次commit.(代码回滚到上个版本，并提交git)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>input radio attr动态赋值问题</title>
      <link href="/2018/10/31/input-radio-attr%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/31/input-radio-attr%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>程序环境：easyui+jQuery<br><a id="more"></a><br>代码</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">label</span> &gt;&lt;<span class="keyword">input</span> name=<span class="string">"Fruit"</span> <span class="keyword">type</span>=<span class="string">"radio"</span>  value=<span class="string">"苹果"</span>  /&gt;苹果 &lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;<span class="keyword">label</span> &gt;&lt;<span class="keyword">input</span> name=<span class="string">"Fruit"</span> <span class="keyword">type</span>=<span class="string">"radio"</span>  value=<span class="string">"西瓜"</span>  /&gt;西瓜 &lt;/<span class="keyword">label</span>&gt;</span><br></pre></td></tr></table></figure><p>最近发现用<code>$(&quot;input[name=&#39;Fruit&#39;][value=&#39;西瓜&#39;]&quot;).attr(&quot;checked&quot;,true);</code>动态赋值没有赋值成功。原来以为是easyui的问题，后来查考文档才发现jQuery中使用prop可以完美解决这个问题。<br><code>$(&quot;input[name=&#39;Fruit&#39;][value=&#39;西瓜&#39;]&quot;).prop(&quot;checked&quot;,true);</code></p><h5 id="那么，什么时候使用attr，什么时候使用prop？"><a href="#那么，什么时候使用attr，什么时候使用prop？" class="headerlink" title="那么，什么时候使用attr，什么时候使用prop？"></a>那么，什么时候使用attr，什么时候使用prop？</h5><p>1.添加属性名称该属性就会生效应该使用prop.<br>2.是有true,false两个属性使用prop.<br>3.其他则使用attr<br></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>jQuery实现获取年月日的一些方法总结</title>
      <link href="/2018/10/31/jQuery%E5%AE%9E%E7%8E%B0%E8%8E%B7%E5%8F%96%E5%B9%B4%E6%9C%88%E6%97%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2018/10/31/jQuery%E5%AE%9E%E7%8E%B0%E8%8E%B7%E5%8F%96%E5%B9%B4%E6%9C%88%E6%97%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1761761-7990e80ba13d67a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/580" alt="MacDown logo"><br><a id="more"></a></p><p>用jq来获取当前的时间：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">var</span> year = myDate.getFullYear();<span class="comment">//获取当前年</span></span><br><span class="line">    <span class="keyword">var</span> yue = myDate.getMonth()+<span class="number">1</span>;<span class="comment">//获取当前月</span></span><br><span class="line">    <span class="keyword">var</span> date = myDate.getDate();<span class="comment">//获取当前日</span></span><br><span class="line">    <span class="keyword">var</span> h = myDate.getHours();<span class="comment">//获取当前小时数(0-23)</span></span><br><span class="line">    <span class="keyword">var</span> m = myDate.getMinutes();<span class="comment">//获取当前分钟数(0-59)</span></span><br><span class="line">    <span class="keyword">var</span> s = myDate.getSeconds();<span class="comment">//获取当前秒</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>table宽度问题</title>
      <link href="/2018/10/31/table%E5%AE%BD%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/31/table%E5%AE%BD%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近在做table列表的时候，出现如果数据过多，导致列表的宽度越来越宽，后来在网上找了很多方法，通过在<code>td</code>里面添加<code>div</code>,通过设置div的宽度来解决。具体代码如下：<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">border</span>=<span class="string">"1"</span>  <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">bordercolor</span>=<span class="string">"#ccc"</span> <span class="attr">id</span>=<span class="string">"startId"</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>topicId<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>创建时间(北京)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>测试类型<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">th</span>&gt;</span>测试信息<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"tbMain"</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在请求数据的时候，在td里面添加div,设置div的宽度<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resultData1</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementById(<span class="string">'resultMain'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; data.length; i++)&#123; <span class="comment">//遍历一下json数据</span></span><br><span class="line">            <span class="keyword">var</span> trow = getresultRow(data[i]); <span class="comment">//定义一个方法,返回tr数据</span></span><br><span class="line">            tbody.appendChild(trow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getresultRow</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(h);</span><br><span class="line">        <span class="keyword">var</span> row = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>); <span class="comment">//创建行</span></span><br><span class="line">            <span class="keyword">var</span> idCell = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>); <span class="comment">//创建第一列id</span></span><br><span class="line">            idCell.innerHTML = h.debug_info.topic_id; <span class="comment">//填充数据</span></span><br><span class="line">            row.appendChild(idCell); <span class="comment">//加入行  ，下面类似</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> ddd = <span class="string">""</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"create_ts"</span> <span class="keyword">in</span> h.debug_info)&#123;</span><br><span class="line">                <span class="keyword">var</span> ddd =  formatTS2YYYYMMDDHHMMSS(h.create_ts.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> nameCell = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);<span class="comment">//创建第二列name</span></span><br><span class="line">            nameCell.innerHTML = ddd;</span><br><span class="line">            row.appendChild(nameCell);</span><br><span class="line"></span><br><span class="line">             jobCell = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);<span class="comment">//创建第三列</span></span><br><span class="line">            jobCell.innerHTML = h.debug_info.type;</span><br><span class="line">            row.appendChild(jobCell);</span><br><span class="line"></span><br><span class="line">             jobCell = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);<span class="comment">//创建第四列</span></span><br><span class="line">            <span class="keyword">var</span> mesDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            mesDiv.className = <span class="string">'mes_div'</span>; #这里添加div，并且设置div的<span class="keyword">class</span></span><br><span class="line">            mesDiv.innerHTML = h.debug_info.message;</span><br><span class="line">            jobCell.appendChild(mesDiv);</span><br><span class="line"></span><br><span class="line">            row.appendChild(jobCell);</span><br><span class="line"></span><br><span class="line">             jobCell = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);<span class="comment">//创建第五列</span></span><br><span class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            div.innerHTML = h.debug_info.result;</span><br><span class="line">            jobCell.appendChild(div);</span><br><span class="line">            row.appendChild(jobCell);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> row; <span class="comment">//返回tr数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .mes_div&#123;</span><br><span class="line">        width: <span class="number">100</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>easyui弹窗窗口无法移动</title>
      <link href="/2018/10/31/easyui%E5%BC%B9%E7%AA%97%E7%AA%97%E5%8F%A3%E6%97%A0%E6%B3%95%E7%A7%BB%E5%8A%A8/"/>
      <url>/2018/10/31/easyui%E5%BC%B9%E7%AA%97%E7%AA%97%E5%8F%A3%E6%97%A0%E6%B3%95%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>最近在使用easyui 弹出窗口的时候，发现窗口无法拖动。具体代码如下<br><a id="more"></a><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function openLookUp(url, <span class="built_in">title</span>) &#123;</span><br><span class="line">lookUpWin.dialogFrameHtml(url);</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">title</span>) &#123;</span><br><span class="line">    lookUpWin.panel(&#123;<span class="built_in">title</span>: <span class="built_in">title</span>&#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后来经过对比是因为修改title引起的，这个easyui 还没有解决这个bug。知道是哪出现问题，后面就好办了，具体代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openLookUp</span>(<span class="params">url, title</span>) </span>&#123;</span><br><span class="line">lookUpWin.dialogFrameHtml(url);</span><br><span class="line">$(<span class="string">'.panel-title'</span>)[<span class="number">0</span>].innerHTML=title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>fetch的使用</title>
      <link href="/2018/10/31/fetch%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/31/fetch%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>最近的工作过程中，在做js调取接口的时候，使用了fetch，原来是只知道fetch，但是没有怎么使用过。正好最近使用到，所以对其详细了解了下。<br><a id="more"></a></p><h4 id="fetch的基本方式"><a href="#fetch的基本方式" class="headerlink" title="fetch的基本方式"></a>fetch的基本方式</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fetch(url,&#123;</span><br><span class="line">method:<span class="string">'GET'</span>, # <span class="string">'POST'</span>,<span class="string">'PUT'</span>,<span class="string">'DELETE'</span></span><br><span class="line">headers:&#123;</span><br><span class="line"><span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>, <span class="comment">//'application/x-www-form-urlencoded'</span></span><br><span class="line"><span class="string">'Accept'</span>:<span class="string">'application/json'</span></span><br><span class="line">&#125;,</span><br><span class="line">body:<span class="built_in">JSON</span>.stringfiy(body)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res.json() <span class="comment">//返回一个Promise,解析成JSON,具体请看下面返回的数据</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">//获取json数据</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error)  <span class="comment">//请求错误时返回</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="返回的数据"><a href="#返回的数据" class="headerlink" title="返回的数据"></a>返回的数据</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span>.arrayBuffer()</span><br><span class="line">读取 <span class="keyword">res</span>对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为ArrayBuffer格式的promise对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span>.blob()</span><br><span class="line">读取 <span class="keyword">res</span>对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为Blob格式的promise对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span>.formData()</span><br><span class="line">读取<span class="keyword">res</span>对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为FormData格式的promise对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span>.json()</span><br><span class="line">读取 <span class="keyword">res</span>对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为JSON格式的promise对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span>.text()</span><br><span class="line">读取 <span class="keyword">res</span>对象并且将它设置为已读（因为Responses对象被设置为了 stream 的方式，所以它们只能被读取一次） ,并返回一个被解析为USVString格式的promise对象</span><br></pre></td></tr></table></figure><h4 id="强制带Cookie"><a href="#强制带Cookie" class="headerlink" title="强制带Cookie"></a>强制带Cookie</h4><p>默认情况下, fetch不会从服务端发送或接收任何 cookies, 如果站点依赖于维护一个用户会话，则导致未经认证的请求(要发送 cookies，必须发送凭据头).</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    credentials: <span class="string">'include'</span> <span class="regexp">//</span> 强制加入凭据头</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.text()</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ansible自动化部署</title>
      <link href="/2018/10/31/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/10/31/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Ansible可通过 “pip” 安装(安装和管理Python包的工具),若你还没有安装 pip,可执行如下命令安装:<br><a id="more"></a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo easy_install pip</span><br></pre></td></tr></table></figure><p>然后安装Ansible:<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip <span class="keyword">install</span> ansible</span><br></pre></td></tr></table></figure></p><p>如果你是在 OS X Mavericks 上安装,编译器可能或告警或报错,可通过如下设置避免这种情况:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="attribute">CFLAGS</span>=-Qunused-arguments <span class="attribute">CPPFLAGS</span>=-Qunused-arguments pip install ansible</span><br></pre></td></tr></table></figure></p><p>使用 virtualenv 的读者可通过 virtualenv 安装 Ansible, 然而我们建议不用这样做,直接在全局安装 Ansible.不要使用 easy_install 直接安装 ansible.</p><h2 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h2><p>修改/etc/ansible/hosts 全局hosts文件，没有的话自己创建<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim <span class="regexp">/etc/</span>ansible<span class="regexp">/hosts</span></span><br></pre></td></tr></table></figure></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[localhost] # 如果服务器使用密码登录就用这个方式保存密码，避免每次输入</span><br><span class="line">127.0.0.1 <span class="attribute">ansible_ssh_pass</span>=your_pass <span class="attribute">ansible_ssh_user</span>=your_name</span><br><span class="line"></span><br><span class="line">[prod] # 如果服务器使用sshkey登陆（推荐使用）</span><br><span class="line">prod.server.org <span class="attribute">ansible_ssh_user</span>=your_name <span class="attribute">ansible_ssh_private_key_file</span>=key_path</span><br></pre></td></tr></table></figure><p>具体的是 <code>prod.server.org</code>是IP, <code>your_pass</code>是服务器的密码,<code>your_name</code>是服务器的名字, <code>key_path</code>是用key登录.</p><h2 id="第一条命令"><a href="#第一条命令" class="headerlink" title="第一条命令"></a>第一条命令</h2><p>首先执行ping,看是否可以连接上服务器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m ping</span><br><span class="line"></span><br><span class="line">127.0.0.1 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">prod.server.org | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如上样式结果即为正确,另外执行 ansible prod -m ping 可以针对某一个服务器<br>组进行操作</p><p>这时候说明你的ansible已经跑通，下面可以进行其他操作</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ansible sshpass的部署问题</title>
      <link href="/2018/10/31/sshpass%E7%9A%84%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/31/sshpass%E7%9A%84%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在使用ansible配置好hosts，运行ping<br><a id="more"></a><br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> ansible <span class="keyword">all</span> -m ping</span><br></pre></td></tr></table></figure></p><p>发现出现错误，错误原因是需要安装sshpass。就用yum去安装，因为用的是mac，导致没有安装yum，所以就想用brew去安装，直接使用<code>brew install sshpass</code>,发现发现错误。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Shell代码  收藏代码</span><br><span class="line">$ brew install sshpass  </span><br><span class="line"><span class="keyword">Error: </span>No available formula for sshpass  </span><br><span class="line">We won't add sshpass because it makes it too easy for novice SSH users to  </span><br><span class="line">ruin SSH's security.</span><br></pre></td></tr></table></figure><p>使用homebrew强制安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install https:<span class="regexp">//</span>raw.github.com<span class="regexp">/eugeneoden/</span>homebrew<span class="regexp">/eca9de1/</span>Library<span class="regexp">/Formula/</span>sshpass.rb</span><br></pre></td></tr></table></figure><p>就可以成功了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ansible playbook</title>
      <link href="/2018/10/31/playbook/"/>
      <url>/2018/10/31/playbook/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合.</p></blockquote> <a id="more"></a><p> 一个playbook就是一个YAML文件，所以playbook文件一般都以.yml结尾，一个playbook文件由一个或多个play组成，每个play定义了在一个或多个远程主机上执行的一系列的task，其中每个task一般就是调用一个ansible的模块，如调用copy模块复制文件到远程主机或调用shell模块执行命令。</p><h2 id="简单的配置"><a href="#简单的配置" class="headerlink" title="简单的配置"></a>简单的配置</h2><p>配置deploy.yml完成进入远程服务器的某个目录并执行git pull操作</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span> - hosts: wxnacy # 它会默认使用/etc/ansible/hosts 中配置的服务器组名 也可以单独设置hosts地址</span><br><span class="line"><span class="symbol">2 </span> tasks:</span><br><span class="line"><span class="symbol">3 </span> - <span class="keyword">name</span>: cd path <span class="keyword">and</span> git pull # 命令名称</span><br><span class="line"><span class="symbol">4 </span>   <span class="keyword">shell</span>: git pull # 执行命令</span><br><span class="line"><span class="symbol">5 </span>   args:</span><br><span class="line"><span class="symbol">6 </span>     <span class="keyword">chdir</span>: ~/workdir # 进入目录</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook deploy.yml</span><br><span class="line">PLAY [wxnacy] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span><br><span class="line">TASK [cd path and git pull] <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span><br><span class="line">ok: [wxnacy.server.org]</span><br><span class="line">PLAY RECAP <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span><br><span class="line">wxnacy.server.org             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>执行完运行命令ansible会在webservers组中依次执行tasks，返回以上样式结果极为成功，结果通过红黄绿三种颜色标明了不同的执行结果，红色表示有task执行失败，黄色表示改变了远程主机状态。</p><p>可以查看相关文章<br><a href="https://docs.ansible.com/ansible/latest/modules/shell_module.html" target="_blank" rel="noopener">shell - Execute commands in nodes</a><br><a href="https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html" target="_blank" rel="noopener">All modules</a><br><a href="https://blog.csdn.net/AhhSong/article/details/78757720" target="_blank" rel="noopener">Ansible playbook简介与配置</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ansible 自动化</title>
      <link href="/2018/10/31/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2018/10/31/%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/f8a145ca97dd" target="_blank" rel="noopener">ansible 自动化部署</a><br><a href="https://www.jianshu.com/p/cd5b7d9a841e" target="_blank" rel="noopener">ansible playbook</a><br><a href="https://www.jianshu.com/p/ddcf8f3ab7af" target="_blank" rel="noopener">ansible sshpass的部署问题</a>  </p><h2 id="ansible介绍"><a href="#ansible介绍" class="headerlink" title="ansible介绍"></a>ansible介绍</h2><p>国内的中文站点：<a href="http://www.ansible.com.cn/" target="_blank" rel="noopener">Ansible中文权威指南</a><br><a id="more"></a></p><p>ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。</p><p>ansible是基于 paramiko 开发的,并且基于模块化工作，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远程主机通讯的。ansible目前已经已经被红帽官方收购，是自动化运维工具中大家认可度最高的，并且上手容易，学习简单。<strong>是每位运维工程师必须掌握的技能之一。</strong><br>ansible特点<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、部署简单，只需在主控端部署Ansible环境，被控端无需做任何操作；</span><br><span class="line"><span class="number">2</span>、默认使用SSH协议对设备进行管理；</span><br><span class="line"><span class="number">3</span>、有大量常规运维操作模块，可实现日常绝大部分操作。</span><br><span class="line"><span class="number">4</span>、配置简单、功能强大、扩展性强；</span><br><span class="line"><span class="number">5</span>、支持API及自定义模块，可通过Python轻松扩展；</span><br><span class="line"><span class="number">6</span>、通过Playbooks来定制强大的配置、状态管理；</span><br><span class="line"><span class="number">7</span>、轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</span><br><span class="line"><span class="number">8</span>、提供一个功能强大、操作性强的Web管理界面和REST API接口——AWX平台。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>item2快捷键的应用</title>
      <link href="/2018/10/31/item2%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2018/10/31/item2%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>使用item2已经一段时间了，发现item2和苹果自带的终端工具Terminal相比，简直完爆它。下面是一些基础的快捷键<br><a id="more"></a></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新建标签  <span class="keyword">command</span> + <span class="title">t</span></span><br><span class="line">切换标签  <span class="keyword">command</span> + 左右方向键 或者 <span class="title">command</span>+数字</span><br></pre></td></tr></table></figure><h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">垂直分屏：<span class="keyword">command</span> + <span class="title">d</span></span><br><span class="line">水平分屏：<span class="keyword">command</span> + <span class="title">shift</span> + <span class="title">d</span></span><br><span class="line">切换屏幕：<span class="keyword">command</span> + [ 或 <span class="title">command</span> + ]</span><br></pre></td></tr></table></figure><h2 id="共同标签或者分屏的快键键为"><a href="#共同标签或者分屏的快键键为" class="headerlink" title="共同标签或者分屏的快键键为"></a>共同标签或者分屏的快键键为</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关闭标签或者分屏：<span class="keyword">command</span> + <span class="title">w</span></span><br><span class="line">切换全屏：<span class="keyword">command</span> + <span class="title">enter</span></span><br></pre></td></tr></table></figure><h2 id="command-相关的快捷键"><a href="#command-相关的快捷键" class="headerlink" title="command 相关的快捷键"></a>command 相关的快捷键</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查找：<span class="keyword">command</span> + <span class="title">f</span></span><br><span class="line">查看历史命令：<span class="keyword">command</span> + ;</span><br><span class="line">查看剪贴板历史：<span class="keyword">command</span> + <span class="title">shift</span> + <span class="title">h</span></span><br><span class="line">清屏：<span class="keyword">command</span> + <span class="title">r</span></span><br></pre></td></tr></table></figure><h2 id="control-相关的快捷键"><a href="#control-相关的快捷键" class="headerlink" title="control 相关的快捷键"></a>control 相关的快捷键</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">清除当前行：ctrl + u</span><br><span class="line">到行首：ctrl + a</span><br><span class="line">到行尾：ctrl + e</span><br><span class="line">前进后退：ctrl + f/<span class="selector-tag">b</span> (翻页)</span><br><span class="line">上一条命令：ctrl + p</span><br><span class="line">搜索命令历史：ctrl + r</span><br><span class="line">删除当前光标的字符：ctrl + d</span><br><span class="line">删除光标之前的字符：ctrl + h</span><br><span class="line">删除光标之前的单词：ctrl + w</span><br><span class="line">删除到文本末尾：ctrl + k</span><br><span class="line">交换光标处文本：ctrl + t</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mac下pyenv与pyenv-virtualenv的安装</title>
      <link href="/2018/10/31/Mac%E4%B8%8Bpyenv%E4%B8%8Epyenv-virtualenv%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2018/10/31/Mac%E4%B8%8Bpyenv%E4%B8%8Epyenv-virtualenv%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>在 Mac 上使用 brew 可以很方便的安装 pyenv<br><a id="more"></a></p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>pyenv</span><br></pre></td></tr></table></figure><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>打开<code>vim  ~/.bash_profile</code>，在最后写入<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PYENV_ROOT</span>=<span class="string">"<span class="variable">$HOME</span>/.pyenv"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="keyword">if</span> which pyenv &gt; /dev/<span class="literal">null</span>;</span><br><span class="line">  then eval <span class="string">"<span class="variable">$(pyenv init -)</span>"</span>;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>配置完以后别忘了<code>source  ~/.bash_profile</code>，使配置生效</p><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看可安装的版本</span></span><br><span class="line">pyenv <span class="keyword">install</span> <span class="comment">--list</span></span><br><span class="line"><span class="comment">#安装python版本</span></span><br><span class="line">pyenv <span class="keyword">install</span> <span class="number">3.5</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#查看当前已安装的python版本</span></span><br><span class="line">pyenv <span class="keyword">versions</span></span><br><span class="line"><span class="comment">#重置版本设置 (只有 pyenv shell 和 pyenv local 命令有--unset参数)</span></span><br><span class="line">pyenv shell <span class="comment">--unset</span></span><br><span class="line">pyenv <span class="keyword">local</span> <span class="comment">--unset</span></span><br><span class="line"><span class="comment">#卸载版本</span></span><br><span class="line">pyenv <span class="keyword">uninstall</span> <span class="number">3.5</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>设置python版本<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对所有的Shell全局有效，会把版本号写入到~/.pyenv/version文件中</span></span><br><span class="line">pyenv <span class="built_in">global</span> <span class="number">3.5</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只对当前目录有效，会在当前目录创建.python-version文件</span></span><br><span class="line">pyenv <span class="built_in">local</span> <span class="number">3.5</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只在当前会话有效</span></span><br><span class="line">pyenv <span class="built_in">shell</span> <span class="number">3.5</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></p><p>这个时候，pyenv已经安装成功了，下面咱们安装设置python版本 </p><h1 id="pyenv-virtualenv"><a href="#pyenv-virtualenv" class="headerlink" title="pyenv-virtualenv"></a><a href="https://github.com/pyenv/pyenv-virtualenv" target="_blank" rel="noopener">pyenv-virtualenv</a></h1><blockquote><p>pyenv-virtualenv 是pyenv的插件，为pyenv设置的python版本提供隔离的虚拟环境，设置虚拟环境后，在当前目录下面安装的第三方库都不会影响其他环境</p></blockquote><h3 id="1、安装-1"><a href="#1、安装-1" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>pyenv-virtualenv</span><br></pre></td></tr></table></figure><h3 id="2、配置-1"><a href="#2、配置-1" class="headerlink" title="2、配置"></a>2、配置</h3><p>打开<code>vim  ~/.bash_profile</code>，在最后写入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> pyenv-virtualenv-init &gt; /dev/null;</span><br><span class="line">  <span class="keyword">then</span> <span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>配置完以后别忘了<code>source  ~/.bash_profile</code>，使配置生效</p><h3 id="3、使用-1"><a href="#3、使用-1" class="headerlink" title="3、使用"></a>3、使用</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#从当前版本创建virtualenv</span></span><br><span class="line">pyenv virtualenv env350</span><br><span class="line"></span><br><span class="line"><span class="meta">#指定版本创建virtualenv</span></span><br><span class="line"><span class="meta">#pyenv virtualenv 版本号 虚拟环境名</span></span><br><span class="line">pyenv virtualenv <span class="number">3.6</span><span class="number">.3</span> xxx<span class="number">-3.6</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#查看已创建的virtualenv</span></span><br><span class="line">pyenv versions</span><br><span class="line"></span><br><span class="line"><span class="meta">#激活和停用virtualenv</span></span><br><span class="line"><span class="meta"># 手动激活</span></span><br><span class="line">pyenv activate 虚拟环境名</span><br><span class="line">pyenv deactivate</span><br><span class="line"></span><br><span class="line"><span class="meta"># 自动激活</span></span><br><span class="line"><span class="meta"># 使用pyenv local 虚拟环境名</span></span><br><span class="line"><span class="meta"># 会把`虚拟环境名`写入当前目录的.python-version文件中</span></span><br><span class="line"><span class="meta"># 关闭自动激活 -&gt; pyenv deactivate</span></span><br><span class="line"><span class="meta"># 启动自动激活 -&gt; pyenv activate xxx-3.6.3</span></span><br><span class="line">pyenv local xxx<span class="number">-3.6</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#删除现有virtualenv</span></span><br><span class="line">pyenv uninstall 虚拟环境名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>如何杀死一个已经detached的screen会话</title>
      <link href="/2018/10/31/%E5%A6%82%E4%BD%95%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E5%B7%B2%E7%BB%8Fdetached%E7%9A%84screen%E4%BC%9A%E8%AF%9D/"/>
      <url>/2018/10/31/%E5%A6%82%E4%BD%95%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E5%B7%B2%E7%BB%8Fdetached%E7%9A%84screen%E4%BC%9A%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<p>如果想杀死一个已经detached的screen会话，可以使用以下命令：<br><a id="more"></a></p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">screen </span>-X -S [session <span class="comment"># you want to kill] quit</span></span><br></pre></td></tr></table></figure><p>比如<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#<span class="built_in"> screen </span>-ls</span><br><span class="line">There are screens on:</span><br><span class="line">        9975.admin   (Detached)</span><br><span class="line">        4588.scheduler    (Detached)</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#<span class="built_in"> screen </span>-X -S 4588 quit</span><br><span class="line">[root@localhost ~]#<span class="built_in"> screen </span>-ls</span><br><span class="line">There is a<span class="built_in"> screen </span>on:</span><br><span class="line">        9975.pts-0.localhost    (Detached)</span><br><span class="line">1 Socket <span class="keyword">in</span> /var/run/screen/S-root.</span><br></pre></td></tr></table></figure></p><p>可以看到，4588会话已经没有了。</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>激活screen：</p><pre><code>screen -r session_name并利用exit退出并kiil掉session。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux 查看硬盘容量，Linux系统是Centos还是Ubuntu</title>
      <link href="/2018/10/31/Linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/10/31/Linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="查看硬盘使用了多少容量"><a href="#查看硬盘使用了多少容量" class="headerlink" title="查看硬盘使用了多少容量"></a>查看硬盘使用了多少容量</h3><a id="more"></a><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2ze32 ~]# df -hl</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/vda1        <span class="number">40</span>G  <span class="number">3.7</span>G   <span class="number">34</span>G   <span class="number">10</span>% /</span><br><span class="line">devtmpfs        <span class="number">1.9</span>G     <span class="number">0</span>  <span class="number">1.9</span>G    <span class="number">0</span>% /dev</span><br><span class="line">tmpfs           <span class="number">1.9</span>G     <span class="number">0</span>  <span class="number">1.9</span>G    <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">1.9</span>G  <span class="number">364</span>K  <span class="number">1.9</span>G    <span class="number">1</span>% /run</span><br><span class="line">tmpfs           <span class="number">1.9</span>G     <span class="number">0</span>  <span class="number">1.9</span>G    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">tmpfs           <span class="number">380</span>M     <span class="number">0</span>  <span class="number">380</span>M    <span class="number">0</span>% /run/user/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@iZ2ze326 ~]# df</span><br><span class="line">文件系统          <span class="number">1</span>K-块    已用     可用 已用% 挂载点</span><br><span class="line">/dev/vda1      <span class="number">41151808</span> <span class="number">3867112</span> <span class="number">35171264</span>   <span class="number">10</span>% /</span><br><span class="line">devtmpfs        <span class="number">1931336</span>       <span class="number">0</span>  <span class="number">1931336</span>    <span class="number">0</span>% /dev</span><br><span class="line">tmpfs           <span class="number">1940844</span>       <span class="number">0</span>  <span class="number">1940844</span>    <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">1940844</span>     <span class="number">364</span>  <span class="number">1940480</span>    <span class="number">1</span>% /run</span><br><span class="line">tmpfs           <span class="number">1940844</span>       <span class="number">0</span>  <span class="number">1940844</span>    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">tmpfs            <span class="number">388172</span>       <span class="number">0</span>   <span class="number">388172</span>    <span class="number">0</span>% /run/user/<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="查看Linux系统是Centos还是Ubuntu"><a href="#查看Linux系统是Centos还是Ubuntu" class="headerlink" title="查看Linux系统是Centos还是Ubuntu"></a>查看Linux系统是Centos还是Ubuntu</h3><p>输入命令 <code>lsb_release -a</code> </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 现在有的系统可以用这个查出是否是centos还是ubuntu，如阿里云</span></span><br><span class="line">[root<span class="variable">@iZ2ze326</span> ~]<span class="comment"># lsb_release -a</span></span><br><span class="line">LSB <span class="symbol">Version:</span><span class="symbol">:core-</span><span class="number">4.1</span>-<span class="symbol">amd64:</span>core-<span class="number">4.1</span>-noarch</span><br><span class="line">Distributor <span class="symbol">ID:</span>CentOS</span><br><span class="line"><span class="symbol">Description:</span>CentOS Linux release <span class="number">7.4</span>.<span class="number">1708</span> (Core)</span><br><span class="line"><span class="symbol">Release:</span><span class="number">7.4</span>.<span class="number">1708</span></span><br><span class="line"><span class="symbol">Codename:</span>Core</span><br><span class="line"></span><br><span class="line"><span class="comment">## 而在公司的本地服务器，却出现这种情况</span></span><br><span class="line">[root<span class="variable">@hardwareupdate</span> ~]<span class="comment"># lsb_release -a</span></span><br><span class="line">-<span class="symbol">bash:</span> <span class="symbol">lsb_release:</span> command <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><p>当这个命令不管用的时候，可以使用命令 <code>cat /etc/redhat-release</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在ubuntu中会出现</span></span><br><span class="line">[root@hardwareupdate ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">-bash: /etc/redhat-<span class="keyword">release</span>: command <span class="keyword">not</span> <span class="keyword">found</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在centos中显示</span></span><br><span class="line">[root@hardwareupdate ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS <span class="keyword">release</span> <span class="number">6.10</span> (<span class="keyword">Final</span>)</span><br></pre></td></tr></table></figure><h2 id="查看Linux-某些程序进程-ps-aux"><a href="#查看Linux-某些程序进程-ps-aux" class="headerlink" title="查看Linux 某些程序进程 ps aux"></a>查看Linux 某些程序进程 <code>ps aux</code></h2><p>比如：<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2ze3269b etc]<span class="comment"># ps aux | grep mysql</span></span><br><span class="line">root     <span class="number"> 2371 </span> 0.0  0.0<span class="number"> 112676 </span> <span class="number"> 980 </span>pts/0    S+   14:34   0:00 grep --color=auto mysql</span><br><span class="line">mysql   <span class="number"> 10810 </span> 0.1  9.4<span class="number"> 1599384 </span>367788 ?      Sl   10月11  13:13 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Centos7安装mysql</title>
      <link href="/2018/10/31/Centos7%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2018/10/31/Centos7%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<p>mysql 官方下载地址：<br><a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a><br>查找最新的 rpm<img src="https://upload-images.jianshu.io/upload_images/2120155-cb6f36a82f444081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysqlrpm.png"><br><a id="more"></a><br>下载<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http<span class="variable">s:</span>//dev.mysql.<span class="keyword">com</span>/<span class="built_in">get</span>/mysql80-community-release-el7-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>确定 md5 值<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum mysql80-community-release-el7-<span class="number">1</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br><span class="line"><span class="number">739</span>dc44566d739c5d7b893de96ee6848  mysql80-community-release-el7-<span class="number">1</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -ivh mysql80-community-release-el7-<span class="number">1</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure></p><p>因为现今mysql已经更新到8.0以上了，所以可以根据需求是用5.5以上的某一个版本还是8.0等</p><h4 id="8-0版本"><a href="#8-0版本" class="headerlink" title="8.0版本"></a>8.0版本</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="keyword">update</span> -y</span><br><span class="line">$ sudo yum <span class="keyword">install</span> -y mysql-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><h4 id="5-7版本"><a href="#5-7版本" class="headerlink" title="5.7版本"></a>5.7版本</h4><p>查看可安装的版本<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ yum repolist all | grep mysql</span><br><span class="line">mysql-cluster-7.5-community/x86_64 MySQL Cluster 7.5<span class="built_in"> Community </span>   disabled</span><br><span class="line">mysql-cluster-7.5-community-source MySQL Cluster 7.5<span class="built_in"> Community </span>-  disabled</span><br><span class="line">mysql-cluster-7.6-community/x86_64 MySQL Cluster 7.6<span class="built_in"> Community </span>   disabled</span><br><span class="line">mysql-cluster-7.6-community-source MySQL Cluster 7.6<span class="built_in"> Community </span>-  disabled</span><br><span class="line">mysql-connectors-community/x86_64  MySQL Connectors<span class="built_in"> Community </span>    enabled:    51</span><br><span class="line">mysql-connectors-community-source  MySQL Connectors<span class="built_in"> Community </span>- S disabled</span><br><span class="line">mysql-tools-community/x86_64       MySQL Tools<span class="built_in"> Community </span>         enabled:    63</span><br><span class="line">mysql-tools-community-source       MySQL Tools<span class="built_in"> Community </span>- Source disabled</span><br><span class="line">mysql-tools-preview/x86_64         MySQL Tools Preview            disabled</span><br><span class="line">mysql-tools-preview-source         MySQL Tools Preview - Source   disabled</span><br><span class="line">mysql55-community/x86_64           MySQL 5.5<span class="built_in"> Community Server </span>    disabled</span><br><span class="line">mysql55-community-source           MySQL 5.5<span class="built_in"> Community Server </span>- S disabled</span><br><span class="line">mysql56-community/x86_64           MySQL 5.6<span class="built_in"> Community Server </span>    disabled</span><br><span class="line">mysql56-community-source           MySQL 5.6<span class="built_in"> Community Server </span>- S disabled</span><br><span class="line">mysql57-community/x86_64           MySQL 5.7<span class="built_in"> Community Server </span>    disabled</span><br><span class="line">mysql57-community-source           MySQL 5.7<span class="built_in"> Community Server </span>- S disabled</span><br><span class="line">mysql80-community/x86_64           MySQL 8.0<span class="built_in"> Community Server </span>    enabled:    17</span><br><span class="line">mysql80-community-source           MySQL 8.0<span class="built_in"> Community Server </span>- S disabled</span><br></pre></td></tr></table></figure></p><p>因为默认的是8.0的版本，所以要选择5.7的版本<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--disable mysql80-community</span></span><br><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--enable mysql57-community</span></span><br></pre></td></tr></table></figure></p><p>下载<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="keyword">install</span> mysql-community-<span class="keyword">server</span></span><br></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="literal">start</span> mysqld</span><br></pre></td></tr></table></figure></p><p>查看运行状态<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status mysqld</span><br><span class="line"></span><br><span class="line">● mysqld.service - MySQL Server</span><br><span class="line"><span class="symbol"> Loaded:</span> loaded (<span class="meta-keyword">/usr/</span>lib<span class="meta-keyword">/systemd/</span>system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line"><span class="symbol"> Active:</span> active (running) since Fri <span class="number">2018</span><span class="number">-06</span><span class="number">-01</span> <span class="number">10</span>:<span class="number">35</span>:<span class="number">58</span> UTC; <span class="number">1</span>h <span class="number">39</span>min ago</span><br><span class="line"><span class="symbol"> Docs:</span> man:mysqld(<span class="number">8</span>)</span><br><span class="line"> [http:<span class="comment">//dev.mysql.com/doc/refman/en/using-systemd.html](http://dev.mysql.com/doc/refman/en/using-systemd.html)</span></span><br><span class="line"><span class="symbol"> Process:</span> <span class="number">7474</span> ExecStartPre=<span class="meta-keyword">/usr/</span>bin/mysqld_pre_systemd (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main PID: <span class="number">7542</span> (mysqld)</span><br><span class="line"><span class="symbol"> Status:</span> <span class="string">"SERVER_OPERATING"</span></span><br><span class="line"><span class="symbol"> CGroup:</span> /system.slice/mysqld.service</span><br><span class="line"> └─<span class="number">7542</span> <span class="meta-keyword">/usr/</span>sbin/mysqld</span><br><span class="line"></span><br><span class="line">Jun <span class="number">01</span> <span class="number">10</span>:<span class="number">35</span>:<span class="number">49</span> bogon systemd[<span class="number">1</span>]: Starting MySQL Server...</span><br><span class="line">Jun <span class="number">01</span> <span class="number">10</span>:<span class="number">35</span>:<span class="number">58</span> bogon systemd[<span class="number">1</span>]: Started MySQL Server.<span class="params">&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure></p><p>这时候mysql已经安装成功了，下面是配置</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>Mysql 在安装时会默认设置一个随机密码，需要在第一次使用时修改</p><p>查看密码<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="keyword">grep</span> <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.<span class="built_in">log</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">06</span>-<span class="number">01</span>T10:<span class="number">35</span>:<span class="number">51.710406</span>Z <span class="number">5</span> [Note] [MY-<span class="number">010454</span>] [Server] A temporary password <span class="keyword">is</span> generated <span class="keyword">for</span> root@localhos<span class="variable">t:</span> Vq9wOQ&amp;trFs*</span><br></pre></td></tr></table></figure></p><p>首先使用默认密码登录 Mysql<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>mysql -uroot -p</span><br></pre></td></tr></table></figure></p><p>查看所有 validatei_password<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE 'validate_password%';</span><br><span class="line"></span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">|<span class="string"> Variable_name                        </span>|<span class="string"> Value </span>|</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">|<span class="string"> validate_password.check_user_name    </span>|<span class="string"> ON    </span>|</span><br><span class="line">|<span class="string"> validate_password.dictionary_file    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> validate_password.length             </span>|<span class="string"> 8     </span>|</span><br><span class="line">|<span class="string"> validate_password.mixed_case_count   </span>|<span class="string"> 1     </span>|</span><br><span class="line">|<span class="string"> validate_password.number_count       </span>|<span class="string"> 1     </span>|</span><br><span class="line">|<span class="string"> validate_password.policy             </span>|<span class="string"> MEDIUM</span>|</span><br><span class="line">|<span class="string"> validate_password.special_char_count </span>|<span class="string"> 1     </span>|</span><br><span class="line">|<span class="string"> validate_password_check_user_name    </span>|<span class="string"> ON    </span>|</span><br><span class="line">|<span class="string"> validate_password_dictionary_file    </span>|<span class="string">       </span>|</span><br><span class="line">|<span class="string"> validate_password_length             </span>|<span class="string"> 8     </span>|</span><br><span class="line">|<span class="string"> validate_password_mixed_case_count   </span>|<span class="string"> 1     </span>|</span><br><span class="line">|<span class="string"> validate_password_number_count       </span>|<span class="string"> 1     </span>|</span><br><span class="line">|<span class="string"> validate_password_policy             </span>|<span class="string"> MEDIUM</span>|</span><br><span class="line">|<span class="string"> validate_password_special_char_count </span>|<span class="string"> 1     </span>|</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>这时候会看到mysql的密码策略<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">There are <span class="literal">three</span> levels <span class="keyword">of</span> password validation policy:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 长度大于 8 位</span></span><br><span class="line">LOW    Length &gt;= <span class="number">8</span></span><br><span class="line"><span class="comment"># 长度大于 8 位，数字，混合大小写和特殊字符</span></span><br><span class="line">MEDIUM Length &gt;= <span class="number">8</span>, <span class="keyword">numeric</span>, mixed <span class="keyword">case</span>, <span class="keyword">and</span> special <span class="keyword">characters</span></span><br><span class="line"><span class="comment"># 长度大于 8 位，数字，混合大小写，特殊字符和字典</span></span><br><span class="line">STRONG Length &gt;= <span class="number">8</span>, <span class="keyword">numeric</span>, mixed <span class="keyword">case</span>, special <span class="keyword">characters</span> <span class="keyword">and</span> dictionary</span><br><span class="line"></span><br><span class="line">Please enter <span class="number">0</span> = LOW, <span class="number">1</span> = MEDIUM <span class="keyword">and</span> <span class="number">2</span> = STRONG:</span><br><span class="line"></span><br><span class="line">他们分别对应了数字 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>，Mysql 默认的等级为 MEDIUM，所以输入普通的密码就会报错，怎样修改策略呢？</span><br></pre></td></tr></table></figure></p><p>所以当出现下面的错误的时候，有可能就是因为密码强度的问题<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed! Error: Your password does <span class="keyword">not</span> satisfy the current<span class="built_in"> policy </span>requirements</span><br></pre></td></tr></table></figure></p><p>所以可以根据你想达到的安全程度，设置密码，比如我这里设置为最低:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> global <span class="attribute">validate_password_policy</span>=0;</span><br><span class="line"><span class="comment">## 如果你不想让长度必须大于 8 位，也可以改为 4，这是最低长度</span></span><br><span class="line"><span class="builtin-name">set</span> global <span class="attribute">validate_password_length</span>=4;</span><br></pre></td></tr></table></figure></p><p>随后修改mysql密码:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">'111111'</span>);</span><br></pre></td></tr></table></figure></p><p>最后可以将访问权限全部对外开放<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'wxnacy'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure></p><p>也可以指定 ip 开放<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'192.168.33.11'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'wxnacy'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure></p><p>最后使配置生效<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></p><p>mysql 新设置用户或更改密码后需用flush privileges刷新MySQL的系统权限相关表，否则会出现拒绝访问，还有一种方法，就是重新启动mysql服务器，来使新设置生效</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Supervisor重新加载配置启动新的进程</title>
      <link href="/2018/10/31/Supervisor%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E6%96%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/10/31/Supervisor%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E6%96%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>一、添加好配置文件后<br><a id="more"></a><br>二、更新新的配置到supervisord<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">supervisorctl update</span></span><br></pre></td></tr></table></figure></p><p>三、重新启动配置中的所有程序<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">supervisorctl reload</span></span><br></pre></td></tr></table></figure></p><p>四、启动某个进程(program_name=你配置中写的程序名称)<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="literal">start</span> program_name</span><br></pre></td></tr></table></figure></p><p>五、查看正在守候的进程<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">supervisorctl</span></span><br></pre></td></tr></table></figure></p><p>六、停止某一进程 (program_name=你配置中写的程序名称)<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pervisorctl <span class="built_in">stop</span> program_name</span><br></pre></td></tr></table></figure></p><p>七、重启某一进程 (program_name=你配置中写的程序名称)<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="built_in">restart</span> program_name</span><br></pre></td></tr></table></figure></p><p>八、停止全部进程(显示用stop停止掉的进程，用reload或者update都不会自动重启)<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="keyword">stop</span> <span class="built_in">all</span></span><br></pre></td></tr></table></figure></p><p>参考：<br><a href="http://www.codeweblog.com/supervisor%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8%E6%96%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/" target="_blank" rel="noopener">Supervisor重新加载配置启动新的进程</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mac查看端口占用进程以及强制清理进程</title>
      <link href="/2018/10/31/mac%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%BC%BA%E5%88%B6%E6%B8%85%E7%90%86%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/10/31/mac%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%BC%BA%E5%88%B6%E6%B8%85%E7%90%86%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="查看5001段口被占用进程lsof-i-5001："><a href="#查看5001段口被占用进程lsof-i-5001：" class="headerlink" title="查看5001段口被占用进程lsof -i:5001："></a>查看5001段口被占用进程<code>lsof -i:5001</code>：</h3><a id="more"></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">localhost:My$ lsof -i:5001</span><br><span class="line"></span><br><span class="line">COMMAND  PID        USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line"></span><br><span class="line">[<span class="string">Python</span>](<span class="link">http://lib.csdn.net/base/python "Python知识库"</span>)  6320 zhaozeguang    3u  IPv4 0x82d867c5ec4904d9      0t0  TCP localhost:51816-&gt;localhost:commplex-link (CLOSED)</span><br><span class="line"></span><br><span class="line">[<span class="string">python</span>](<span class="link">http://lib.csdn.net/base/python "Python知识库"</span>)  6323 zhaozeguang    3u  IPv4 0x82d867c5ec4916e9      0t0  TCP localhost:51820-&gt;localhost:commplex-link (CLOSED)</span><br><span class="line"></span><br><span class="line">Python  6327 zhaozeguang    3u  IPv4 0x82d867c5ed8b52c9      0t0  TCP localhost:51828-&gt;localhost:commplex-link (CLOSED)</span><br><span class="line"></span><br><span class="line">Python  6328 zhaozeguang    3u  IPv4 0x82d867c5edcf04d9      0t0  TCP localhost:51835-&gt;localhost:commplex-link (CLOSED)</span><br><span class="line"></span><br><span class="line">Python  6330 zhaozeguang    3u  IPv4 0x82d867c5e27d06e9      0t0  TCP localhost:51836-&gt;localhost:commplex-link (CLOSED)</span><br></pre></td></tr></table></figure><h3 id="kill掉无用进程-kill-PID"><a href="#kill掉无用进程-kill-PID" class="headerlink" title="kill掉无用进程 kill PID"></a>kill掉无用进程 <code>kill PID</code></h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">localhost:</span>My$ kill <span class="number">6327</span> <span class="number">6328</span> <span class="number">6330</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
