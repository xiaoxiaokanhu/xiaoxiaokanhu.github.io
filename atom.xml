<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小看护</title>
  
  <subtitle>守护自己，守护家人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-09T07:44:20.676Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小小看护</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git clone 子模块</title>
    <link href="http://yoursite.com/2018/11/09/git-clone-%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/11/09/git-clone-子模块/</id>
    <published>2018-11-09T07:20:04.000Z</published>
    <updated>2018-11-09T07:44:20.676Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做博客的时候，用到了其他的themes，因为配置，所以需要修改themes里面的代码，这时候有两种做法，一种是直接把代码下到本地，然后将代码直接拷贝项目中，另一种是用git做管理，项目中添加子项目。我先做的是先fork该theme一份，然后git我fork下来的这个项目。具体做法如下<br><a id="more"></a></p><h3 id="添加子项目"><a href="#添加子项目" class="headerlink" title="添加子项目"></a>添加子项目</h3><p><code>git submodule add [address]</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add <span class="string">https:</span><span class="comment">//github.com/chaconinc/DbConnector</span></span><br><span class="line">Cloning into <span class="string">'DbConnector'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">11</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">10</span>/<span class="number">10</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">11</span> (delta <span class="number">0</span>), reused <span class="number">11</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">11</span>/<span class="number">11</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure></p><p>默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 “DbConnector”。 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。</p><h3 id="自动初始化并更新仓库中的每一个子模块"><a href="#自动初始化并更新仓库中的每一个子模块" class="headerlink" title="自动初始化并更新仓库中的每一个子模块"></a>自动初始化并更新仓库中的每一个子模块</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --recursive <span class="string">https:</span><span class="comment">//github.com/chaconinc/MainProject</span></span><br><span class="line">Cloning into <span class="string">'MainProject'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">14</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">13</span>/<span class="number">13</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">14</span> (delta <span class="number">1</span>), reused <span class="number">13</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">14</span>/<span class="number">14</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule <span class="string">'DbConnector'</span> (<span class="string">https:</span><span class="comment">//github.com/chaconinc/DbConnector) registered for path 'DbConnector'</span></span><br><span class="line">Cloning into <span class="string">'DbConnector'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">11</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">10</span>/<span class="number">10</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">11</span> (delta <span class="number">0</span>), reused <span class="number">11</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">11</span>/<span class="number">11</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule path <span class="string">'DbConnector'</span>: checked out <span class="string">'c3f01dc8862123d317dd46284b05b6892c7b29bc'</span></span><br></pre></td></tr></table></figure><h3 id="在包含子模块的项目上工作"><a href="#在包含子模块的项目上工作" class="headerlink" title="在包含子模块的项目上工作"></a>在包含子模块的项目上工作</h3><p>如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，因为他们无法得到依赖的子模块改动。 那些改动只存在于我们本地的拷贝中。<br>为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。 git push 命令接受可以设置为 “check” 或 “on-demand” 的 –recurse-submodules 参数。 如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 push 操作失败。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git push <span class="comment">--recurse-submodules=check</span></span><br><span class="line">The following submodule paths <span class="keyword">contain</span> changes <span class="keyword">that</span> can</span><br><span class="line"><span class="keyword">not</span> be found <span class="keyword">on</span> any remote:</span><br><span class="line">  DbConnector</span><br><span class="line"></span><br><span class="line">Please <span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">    git push <span class="comment">--recurse-submodules=on-demand</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> cd <span class="keyword">to</span> <span class="keyword">the</span> path <span class="keyword">and</span> use</span><br><span class="line"></span><br><span class="line">    git push</span><br><span class="line"></span><br><span class="line"><span class="keyword">to</span> push them <span class="keyword">to</span> a remote.</span><br></pre></td></tr></table></figure></p><p>如你所见，它也给我们了一些有用的建议，指导接下来该如何做。 最简单的选项是进入每一个子模块中然后手动推送到远程仓库，确保它们能被外部访问到，之后再次尝试这次推送。</p><p>另一个选项是使用 “on-demand” 值，它会尝试为你这样做。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git push --recurse-submodules=<span class="keyword">on</span>-demand</span><br><span class="line">Pushing submodule <span class="string">'DbConnector'</span></span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">9</span>, done.</span><br><span class="line">Delta compression using <span class="keyword">up</span> <span class="keyword">to</span> <span class="number">8</span> threads.</span><br><span class="line">Compressing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">8</span>/<span class="number">8</span>), done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">9</span>/<span class="number">9</span>), <span class="number">917</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">9</span> (delta <span class="number">3</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To http<span class="variable">s:</span>//github.<span class="keyword">com</span>/chaconinc/DbConnector</span><br><span class="line">   c75e92a..<span class="number">82</span>d2ad3  stable -&gt; stable</span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">2</span>, done.</span><br><span class="line">Delta compression using <span class="keyword">up</span> <span class="keyword">to</span> <span class="number">8</span> threads.</span><br><span class="line">Compressing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), <span class="number">266</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">2</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To http<span class="variable">s:</span>//github.<span class="keyword">com</span>/chaconinc/MainProject</span><br><span class="line">   <span class="number">3</span>d6d338..<span class="number">9</span>a377d1  master -&gt; master</span><br></pre></td></tr></table></figure></p><p>如你所见，Git 进入到 DbConnector 模块中然后在推送主项目前推送了它</p><p>参考<br><a href="https://blog.csdn.net/xudailong_blog/article/details/79212220" target="_blank" rel="noopener">git clone 子模块（module）</a><br><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">git子模块</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做博客的时候，用到了其他的themes，因为配置，所以需要修改themes里面的代码，这时候有两种做法，一种是直接把代码下到本地，然后将代码直接拷贝项目中，另一种是用git做管理，项目中添加子项目。我先做的是先fork该theme一份，然后git我fork下来的这个项目。具体做法如下&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh 免密码登录</title>
    <link href="http://yoursite.com/2018/11/08/ssh%20%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2018/11/08/ssh 免密码登录/</id>
    <published>2018-11-08T06:56:06.000Z</published>
    <updated>2018-11-08T09:19:17.176Z</updated>
    
    <content type="html"><![CDATA[<p>通常的ssh登录有两种方式，一种是通过密码登录，一种是通过密钥登录，在实际使用过程中，会发现用密码登录很繁琐，需要每次都输入密码，这时候用密钥登录就会很方便。<br><a id="more"></a></p><h3 id="密码登录"><a href="#密码登录" class="headerlink" title="密码登录"></a>密码登录</h3><p><strong>格式</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@<span class="number">10.2</span><span class="meta">.8</span><span class="meta">.41</span></span><br><span class="line">root@<span class="number">10.2</span><span class="meta">.8</span><span class="meta">.41</span><span class="string">'s password:</span></span><br></pre></td></tr></table></figure></p><p>这时候输入密码就可以登录成功<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@<span class="number">10.2.8.41</span></span><br><span class="line">root@<span class="number">10.2.8.41</span>'s password:</span><br><span class="line">Last login: Thu Nov  <span class="number">1</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">05</span> <span class="number">2018</span> from <span class="number">10.2.0.33</span></span><br><span class="line"><span class="string">[root@hardwareupdate ~]</span>#</span><br></pre></td></tr></table></figure></p><h3 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h3><h5 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@host</span> ~]$ ssh-keygen -t rsa  &lt;== 建立密钥对</span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (<span class="regexp">/root/</span>.ssh/id_rsa): &lt;== 按 Enter</span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): &lt;== 输入密钥锁码，或直接按 Enter 留空</span><br><span class="line">Enter same passphrase <span class="string">again:</span> &lt;== 再输入一遍密钥锁码</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> <span class="regexp">/root/</span>.ssh/id_rsa. &lt;== 私钥</span><br><span class="line">Your <span class="keyword">public</span> key has been saved <span class="keyword">in</span> <span class="regexp">/root/</span>.ssh/id_rsa.pub. &lt;== 公钥</span><br><span class="line">The key fingerprint <span class="string">is:</span></span><br><span class="line"><span class="number">0</span><span class="string">f:</span><span class="string">d3:</span><span class="string">e7:</span><span class="number">1</span><span class="string">a:</span><span class="number">1</span><span class="string">c:</span><span class="string">bd:</span><span class="number">5</span><span class="string">c:</span><span class="number">03</span>:<span class="string">f1:</span><span class="number">19</span>:<span class="string">f1:</span><span class="number">22</span>:<span class="string">df:</span><span class="number">9</span><span class="string">b:</span><span class="string">cc:</span><span class="number">08</span> root<span class="meta">@host</span></span><br></pre></td></tr></table></figure><p>密钥生成以后，在.ssh下面会多两个文件，<code>id_rsa.pub</code>是公钥，<code>id_rsa</code>是私钥<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">[root@host <span class="string">.ssh</span>]$ <span class="keyword">ls</span></span><br><span class="line">id_rsa id_rsa.pub known_hosts config</span><br></pre></td></tr></table></figure></p><p>然后把公钥上传到服务器上，<code>scp</code>等同于<code>ssh-copy-id -i</code><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@A ~]# scp /root/.ssh/id_rsa.pub root@<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.181</span>:/root/.ssh/authorized_keys  </span><br><span class="line">root@<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.181</span><span class="string">'s password:</span></span><br><span class="line"><span class="string">id_rsa.pub                                    100%  223     0.2KB/s   00:00</span></span><br></pre></td></tr></table></figure></p><p>由于还没有免密码登录的，所以要输入一次服务器的密码登录,如果服务器没有authorized_keys文件，用touch authorized_keys 创建</p><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p>登录服务器，进入.ssh里面，给authorized_keys设置权限<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">[root@host <span class="string">.ssh</span>]$ <span class="keyword">ls</span></span><br><span class="line">authorized_keys  known_hosts</span><br><span class="line">[root@host <span class="string">.ssh</span>]$ chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></p><h5 id="本地配置权限"><a href="#本地配置权限" class="headerlink" title="本地配置权限"></a>本地配置权限</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">[root@host <span class="string">.ssh</span>]$ chmod 600 id_rsa</span><br></pre></td></tr></table></figure><p>这时候就可以用密钥登录了<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa root@<span class="number">192.168</span><span class="number">.100</span><span class="number">.39</span></span><br></pre></td></tr></table></figure></p><h3 id="用config去管理"><a href="#用config去管理" class="headerlink" title="用config去管理"></a>用config去管理</h3><p>用<code>ssh -i ~/.ssh/id_rsa root@192.168.100.39</code>登录时很繁琐的，这时候就可以用config去管理</p><p><strong>例如</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.ssh/config 文件示例</span></span><br><span class="line"><span class="comment"># Host 参数标明以下内容仅适用于访问 236 主机时适用，Host 参数本身只是一个入口字符串；</span></span><br><span class="line">Host fuwuqi</span><br><span class="line">　　HostName 192.168.99.236</span><br><span class="line">　<span class="built_in">　User </span>git</span><br><span class="line">　<span class="built_in">　Port </span>22</span><br><span class="line">　　IdentityFile ~/.ssh/rsa-michael-236</span><br><span class="line">Host github</span><br><span class="line">　　HostName 192.168.99.3</span><br><span class="line">　<span class="built_in">　User </span>root</span><br><span class="line">　<span class="built_in">　Port </span>22</span><br><span class="line">　　IdentityFile ~/.ssh/rsa-3root-michael</span><br></pre></td></tr></table></figure></p><p>配置完这些以后，就可以用这个登录了<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~] ssh fuwuqi</span><br><span class="line">Last login: Thu Nov  8 09:40:00 2018 <span class="keyword">from</span> 192.168.99.236</span><br><span class="line">Welcome <span class="keyword">to</span> Alibaba Cloud Elastic Compute<span class="built_in"> Service </span>!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常的ssh登录有两种方式，一种是通过密码登录，一种是通过密钥登录，在实际使用过程中，会发现用密码登录很繁琐，需要每次都输入密码，这时候用密钥登录就会很方便。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7 安装zsh和oh-my-zsh</title>
    <link href="http://yoursite.com/2018/11/06/centos7-%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/"/>
    <id>http://yoursite.com/2018/11/06/centos7-安装zsh和oh-my-zsh/</id>
    <published>2018-11-06T08:53:06.000Z</published>
    <updated>2018-11-06T08:55:33.984Z</updated>
    
    <content type="html"><![CDATA[<p>目前的centos系统默认的shell还是bash，但是zsh被称为终极shell，国外有个程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」，Github 网址是：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a> 有了这玩意zsh用起来直接就变成神器了。<br><a id="more"></a></p><h4 id="查看系统当前的shell"><a href="#查看系统当前的shell" class="headerlink" title="查看系统当前的shell"></a>查看系统当前的shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>返回的结果是:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure></p><h3 id="查看bin下是否有zsh包"><a href="#查看bin下是否有zsh包" class="headerlink" title="查看bin下是否有zsh包"></a>查看bin下是否有zsh包</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">返回的结果是:</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br><span class="line">PS.默认没有安装zsh</span><br></pre></td></tr></table></figure><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> -y zsh</span><br></pre></td></tr></table></figure><p>然后在输入<code>cat /etc/shells</code>查看</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/bin/</span>sh</span><br><span class="line"><span class="meta-keyword">/bin/</span>bash</span><br><span class="line"><span class="meta-keyword">/sbin/</span>nologin</span><br><span class="line"><span class="meta-keyword">/usr/</span>bin/sh</span><br><span class="line"><span class="meta-keyword">/usr/</span>bin/bash</span><br><span class="line"><span class="meta-keyword">/usr/</span>sbin/nologin</span><br><span class="line"><span class="meta-keyword">/bin/</span>zsh</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>将zsh设置成默认的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s <span class="regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/4060631-102e57784c72f94b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/708/format/webp" alt=""><br>设置完以后不会立即生效，需要重启方能生效，所以我们可以配置完oh-my-zsh以后再重启</p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/robbyrussell/</span>oh-my-zsh<span class="regexp">/raw/m</span>aster<span class="regexp">/tools/i</span>nstall.sh -O - | sh</span><br></pre></td></tr></table></figure><p>如果出现以下界面表示成功</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__                                     __   </span><br><span class="line">  ____  <span class="regexp">/ /</span>_     ____ ___  __  __   ____  _____<span class="regexp">/ /</span>_  </span><br><span class="line"> <span class="regexp">/ __ \/</span> __ \   <span class="regexp">/ __ `__ \/</span> <span class="regexp">/ /</span> <span class="regexp">/  /</span>_  <span class="regexp">/ /</span> ___/ __ \ </span><br><span class="line"><span class="regexp">/ /</span>_<span class="regexp">/ /</span> <span class="regexp">/ /</span> <span class="regexp">/  /</span> <span class="regexp">/ /</span> <span class="regexp">/ /</span> <span class="regexp">/ /</span>_<span class="regexp">/ /</span>    <span class="regexp">/ /</span>_(__  ) <span class="regexp">/ /</span> / </span><br><span class="line">\____<span class="regexp">/_/</span> <span class="regexp">/_/</span>  <span class="regexp">/_/</span> <span class="regexp">/_/</span> <span class="regexp">/_/\_</span>_, <span class="regexp">/    /</span>___<span class="regexp">/____/</span>_<span class="regexp">/ /</span>_/  </span><br><span class="line">                        <span class="regexp">/____/</span>                       ....is now installed!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line"></span><br><span class="line">p.s. Follow us at <span class="string">https:</span><span class="comment">//twitter.com/ohmyzsh.</span></span><br><span class="line"></span><br><span class="line">p.p.s. Get stickers and t-shirts at <span class="string">http:</span><span class="comment">//shop.planetargon.com.</span></span><br></pre></td></tr></table></figure><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p><em>主题链接地址</em> <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">oh-my-zsh主题</a></p><p>目前我使用的主题是<code>bira</code><br><img src="https://cloud.githubusercontent.com/assets/2618447/6316716/51a0708e-ba00-11e4-8664-11a804f2fe3f.png" alt=""></p><p><strong>修改主题</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>vim ~<span class="regexp">/.zshrc</span></span><br></pre></td></tr></table></figure><p>刚安装oh-my-zsh默认的主题是robbyrussell，将<code>ZSH_THEME</code>改成<code>bira</code></p><p><strong>更新配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.zshrc</span></span><br></pre></td></tr></table></figure><p>然后重启, 使zsh配置生效</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前的centos系统默认的shell还是bash，但是zsh被称为终极shell，国外有个程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」，Github 网址是：&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/robbyrussell/oh-my-zsh&lt;/a&gt; 有了这玩意zsh用起来直接就变成神器了。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>对Python装饰器的一些理解</title>
    <link href="http://yoursite.com/2018/10/31/%E5%AF%B9Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/10/31/对Python装饰器的一些理解/</id>
    <published>2018-10-31T10:13:52.000Z</published>
    <updated>2018-11-01T06:39:44.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-装饰器的定义"><a href="#1-装饰器的定义" class="headerlink" title="1.装饰器的定义"></a>1.装饰器的定义</h2><p>装饰器是对在运行期间对函数进行一些外部功能的扩展。也就是在其他函数不需要做任何代码变动的前提下增加额外功能。<br><a id="more"></a></p><h2 id="2-装饰器的应用场景"><a href="#2-装饰器的应用场景" class="headerlink" title="2.装饰器的应用场景"></a>2.装饰器的应用场景</h2><p>插入日志、性能测试、事务处理、缓存、权限校验等场景</p><p><strong>例如</strong><br>我们在接收请求的时候多会看是否包含某一个元素。比如查看是否包含有code,如果有code，就打印错误并且ruturn返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">requestedCode</span><span class="params">(*params)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrappered</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'%s is running'</span> % func.__name__)</span><br><span class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> params:</span><br><span class="line">                print(<span class="string">'错误错误'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, *kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrappered</span><br><span class="line">    <span class="keyword">return</span> _wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">@requestedCode('code')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am world'</span>)</span><br><span class="line">    </span><br><span class="line">print(hello_world())</span><br></pre></td></tr></table></figure><h2 id="3-装饰器使用-functools-wraps-的理由"><a href="#3-装饰器使用-functools-wraps-的理由" class="headerlink" title="3.装饰器使用 @functools.wraps 的理由"></a>3.装饰器使用 @functools.wraps 的理由</h2><p>Python 中使用装饰器对在运行期对函数进行一些外部功能的扩展。但是在使用过程中，由于装饰器的加入导致解释器认为函数本身发生了改变，在某些情况下——比如测试时——会导致一些问题。Python 通过 functool.wraps 为我们解决了这个问题：在编写装饰器时，在实现前加入 @functools.wraps(func) 可以保证装饰器不会对被装饰函数造成影响。比如，在 Flask 中，我们要自己重写 login_required 装饰器，但不想影响被装饰器装饰的方法，则 login_required 装饰器本身可以写成下面的样子：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def login_required_(<span class="function"><span class="keyword">func</span>):</span></span><br><span class="line">    <span class="symbol">@wraps</span>(<span class="function"><span class="keyword">func</span>)</span></span><br><span class="line">    def decorated_view(*args, **kwargs):</span><br><span class="line">        <span class="keyword">if</span> current_app.login_manager._login_disabled:</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(*args, **kwargs)</span></span></span><br><span class="line">        elif <span class="literal">not</span> current_user.is_authenticated:</span><br><span class="line">            <span class="meta"># return current_app.login_manager.unauthorized()</span></span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">"login.loginPage"</span>, <span class="keyword">next</span>=request.url))</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(*args, **kwargs)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorated_view</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/26930016" target="_blank" rel="noopener">如何理解Python装饰器？</a><br><a href="http://blog.csdn.net/tiwoo/article/details/50835337" target="_blank" rel="noopener">Python 中实现装饰器时使用 @functools.wraps 的理由</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-装饰器的定义&quot;&gt;&lt;a href=&quot;#1-装饰器的定义&quot; class=&quot;headerlink&quot; title=&quot;1.装饰器的定义&quot;&gt;&lt;/a&gt;1.装饰器的定义&lt;/h2&gt;&lt;p&gt;装饰器是对在运行期间对函数进行一些外部功能的扩展。也就是在其他函数不需要做任何代码变动的前提下增加额外功能。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python基础学习----切片、迭代、列表生成式</title>
    <link href="http://yoursite.com/2018/10/31/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%88%87%E7%89%87%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/31/Python基础学习-切片、迭代、列表生成式/</id>
    <published>2018-10-31T10:13:32.000Z</published>
    <updated>2018-11-01T06:43:22.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>通常我们取list里面的元素会这样写<br><a id="more"></a><br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="symbol">'zhangsan'</span>,<span class="symbol">'lisi'</span>,<span class="symbol">'wangwu'</span>]</span><br><span class="line"><span class="built_in">list</span>[<span class="number">0</span>] <span class="built_in">list</span>[<span class="number">1</span>] <span class="built_in">list</span>[<span class="number">2</span>]</span><br><span class="line">取n个的话：</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">   <span class="built_in">list</span>[i]</span><br></pre></td></tr></table></figure></p><p>但是这样用循环很麻烦，可以这样做</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment">#这样取的是从0开始，往后数3个数</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment">#这样取的是从1开始，往后数2个数</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>   如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代。在Python中，迭代是通过for … in来完成的<br><br>    在Python不是都是迭代的，所以有时候需要判断是否可以迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>列表生成式是Python中内置的非常简单却非常强大的可以用来创建list的生成式。<br>例如要生成list <code>[1,2,3,4,5,6,7,8,9]</code>,可以用<code>list(range(1,10))</code><br>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？<br><br>方法一是循环：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; L = []</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; for x in range(<span class="number">1</span>, <span class="number">11</span>)<span class="symbol">:</span></span><br><span class="line">...    L.append(x * x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; L</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>方法二：列表生成式</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">得出：</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><p>列表生成式还有其他的用法<br><br>*在for循环后面加if判断语句<br><br>例如：仅偶数的平方</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(<span class="number">1</span>,<span class="number">11</span>) if x % <span class="number">2</span> == <span class="number">0</span> ]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>*使用两层循环,生成全排列</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">m</span> + n for m in <span class="symbol">'ABC</span>' for n in <span class="symbol">'XYZ</span>']</span><br><span class="line">[<span class="symbol">'AX</span>', <span class="symbol">'AY</span>', <span class="symbol">'AZ</span>', <span class="symbol">'BX</span>', <span class="symbol">'BY</span>', <span class="symbol">'BZ</span>', <span class="symbol">'CX</span>', <span class="symbol">'CY</span>', <span class="symbol">'CZ</span>']</span><br></pre></td></tr></table></figure><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>判断是否可以迭代，在用列表生成式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">L = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="number">18</span>, <span class="string">'Apple'</span>, <span class="keyword">None</span>]</span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> L <span class="keyword">if</span> isinstance(x,str) == <span class="keyword">True</span>]</span><br><span class="line">结果：</span><br><span class="line">[<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'Apple'</span>]</span><br></pre></td></tr></table></figure><p>注：文章是在廖雪峰大大的网站学习后写下的学习摘要。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h2&gt;&lt;p&gt;通常我们取list里面的元素会这样写&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask 上下文全局变量</title>
    <link href="http://yoursite.com/2018/10/31/Flask-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/10/31/Flask-上下文全局变量/</id>
    <published>2018-10-31T10:13:21.000Z</published>
    <updated>2018-11-01T06:41:36.829Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">上下文</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">current_app</td><td style="text-align:left">程序上下文</td><td style="text-align:left">当前激活程序的程序实例</td></tr><tr><td style="text-align:left">g</td><td style="text-align:left">程序上下文</td><td style="text-align:left">处理请求时用作临时存储的对象，每次请求都会重设这个变量</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">请求上下文</td><td style="text-align:left">请求对象，封装了客户端发出的HTTP请求中的内容</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">请求上下文</td><td style="text-align:left">用户会话，用于存储请求之间需要记住的值的词典</td></tr></tbody></table><p>Flask 在分发请求之前激活(或推送)程序和请求上下文，请求处理完成后再将其删除。程 序上下文被推送后，就可以在线程中使用 current_app 和 g 变量。类似地，请求上下文被 推送后，就可以使用 request 和 session 变量。如果使用这些变量时我们没有激活程序上 下文或请求上下文，就会导致错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;变量名&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;上下文&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/t
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>flask下 gunicorn在Python中的使用</title>
    <link href="http://yoursite.com/2018/10/31/flask%E4%B8%8B-gunicorn%E5%9C%A8Python%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/flask下-gunicorn在Python中的使用/</id>
    <published>2018-10-31T10:13:09.000Z</published>
    <updated>2018-11-01T06:41:51.737Z</updated>
    
    <content type="html"><![CDATA[<p>gunicorn使用非常简单，并且也非常好用，所以需要写一下自己的理解。😀<br><a id="more"></a></p><p>使用gunicorn的使用，需先安装flask,安装方法如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> flask</span><br></pre></td></tr></table></figure><p>下面为一个简单的用flask写的web服务,main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="keyword">True</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>gunicorn的作用就是用命令行来启动服务器。安装如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> gunicorn</span><br></pre></td></tr></table></figure><p>最简单的启动命令为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><p> 其中code就是指main.py.app就是那个wsgifunc的名字。<br> 这样运行的话， gunicorn 默认作为一个监听 127.0.0.1:8000 的web server，可以在本机通过： <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 访问。<br>如果要通过网络访问，则需要绑定不同的地址（也可以同时设置监听端口），设置0.0.0.0可以监听到所有ip的请求：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8080</span> <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><p>在多核服务器上，为了支持更多的并发访问并充分利用资源，可以使用更多的 gunicorn 进程：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><p>两者结合到一起就是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8080</span> <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：<br></h4><ul><li>-b 表示 gunicorn 开发的访问地址 <br></li><li>-w 表示开启多少个线程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gunicorn使用非常简单，并且也非常好用，所以需要写一下自己的理解。😀&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python之random的send()的使用</title>
    <link href="http://yoursite.com/2018/10/31/Python%E4%B9%8Brandom%E7%9A%84send-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/Python之random的send-的使用/</id>
    <published>2018-10-31T10:12:55.000Z</published>
    <updated>2018-11-01T06:43:42.386Z</updated>
    
    <content type="html"><![CDATA[<p>对于send方法的定义，在一篇文章中看到这样一个定义，发现很符合这个解释<br><a id="more"></a><br><code>seed( ) 用于指定随机数生成时所用算法开始的整数值，如果使用相同的seed( )值，则每次生成的随即数都相同，如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同</code></p><p>情况下面的几行代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">random</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random 5 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random 10 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random 7 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"random 5 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random <span class="number">5</span> is  <span class="number">0.6229016948897019</span></span><br><span class="line">random <span class="number">10</span> is  <span class="number">0.5714025946899135</span></span><br><span class="line">random <span class="number">7</span> is  <span class="number">0.32383276483316237</span></span><br><span class="line">random <span class="number">5</span> is  <span class="number">0.6229016948897019</span></span><br></pre></td></tr></table></figure><p>你会发现当seed()值是一样的时候，输出的结果是一样的。而不一样的值得出的结果不一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于send方法的定义，在一篇文章中看到这样一个定义，发现很符合这个解释&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>python之random的random的使用</title>
    <link href="http://yoursite.com/2018/10/31/python%E4%B9%8Brandom%E7%9A%84random%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/python之random的random的使用/</id>
    <published>2018-10-31T10:12:33.000Z</published>
    <updated>2018-11-01T06:43:30.522Z</updated>
    
    <content type="html"><![CDATA[<p>random.random()生成0和1之间的随机浮点数float<br><a id="more"></a><br>例如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">"random 7 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br></pre></td></tr></table></figure><p>运行结果为：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random <span class="number">7</span> is  <span class="number">0.32383276483316237</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;random.random()生成0和1之间的随机浮点数float&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>利用tablib、make_response 进行文件的下载</title>
    <link href="http://yoursite.com/2018/10/31/%E5%88%A9%E7%94%A8tablib%E3%80%81make-response-%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/10/31/利用tablib、make-response-进行文件的下载/</id>
    <published>2018-10-31T10:12:23.000Z</published>
    <updated>2018-11-01T06:40:12.180Z</updated>
    
    <content type="html"><![CDATA[<p>tablib 主要作用是将数据导出为各种不同的格式，包括excel，json，html，yaml，csv，tsv等格式。使用起来也非常简单。<br><a id="more"></a></p><p>tablib的下载<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> tablib</span><br></pre></td></tr></table></figure></p><p>下面就是文件下载的代码<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import tablib</span><br><span class="line">from flask import make_response</span><br><span class="line">def file_download():</span><br><span class="line"> dataset1 = tablib.<span class="symbol">Dataset</span>()</span><br><span class="line">    header1 = (<span class="string">'ID'</span>, <span class="string">'Name'</span>, <span class="string">'Tel'</span>, <span class="string">'Age'</span>)</span><br><span class="line">    dataset1.headers = header1</span><br><span class="line">    dataset1.append([<span class="number">1</span>, <span class="string">'zhangsands'</span>, <span class="number">13711111111</span>, <span class="number">16</span>])</span><br><span class="line">    dataset1.append([<span class="number">2</span>, <span class="string">'lisiasfasd阿斯顿发gwus'</span>, <span class="number">13911111111</span>, <span class="number">20</span>])</span><br><span class="line">    dataset1.append([<span class="number">4</span>, <span class="string">'zhao发送到li2u'</span>, <span class="number">15811111111</span>, <span class="number">25</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    header2 = (<span class="string">'ID'</span>, <span class="string">'Name'</span>, <span class="string">'Tel'</span>, <span class="string">'Age'</span>)</span><br><span class="line">    data2 = [</span><br><span class="line">        [<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="number">13711111111</span>, <span class="number">16</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="string">'lisi'</span>, <span class="number">13811111111</span>, <span class="number">18</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="string">'wangwu'</span>, <span class="number">13911111111</span>, <span class="number">20</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="string">'zhaoliu'</span>, <span class="number">15811111111</span>, <span class="number">25</span>]</span><br><span class="line">    ]</span><br><span class="line">    dataset2 = tablib.<span class="symbol">Dataset</span>(*data2, headers=header2)</span><br><span class="line"></span><br><span class="line">    dataset1.title = <span class="string">'dataset1'</span>  # 设置<span class="symbol">Excel</span>中表单的名称</span><br><span class="line">    dataset2.title = <span class="string">'dataset2'</span></span><br><span class="line">    </span><br><span class="line">      # 如果有多个sheet表单，使用<span class="symbol">DataBook</span>就可以了</span><br><span class="line">    myDataBook = tablib.<span class="symbol">Databook</span>((dataset1, dataset2))</span><br><span class="line">    ds = myDataBook.export(<span class="string">'xlsx'</span>)</span><br><span class="line"></span><br><span class="line">    response = make_response(ds)</span><br><span class="line">    response.headers[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=&#123;&#125;'</span>.format(<span class="string">'dhel.xlsx'</span>)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure></p><p>引用：<br><a href="https://blog.csdn.net/calling_wisdom/article/details/41447791" target="_blank" rel="noopener">Python tablib模块</a><br><a href="http://docs.python-tablib.org/en/master/" target="_blank" rel="noopener">tablib文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tablib 主要作用是将数据导出为各种不同的格式，包括excel，json，html，yaml，csv，tsv等格式。使用起来也非常简单。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>pip 升级所遇到的问题</title>
    <link href="http://yoursite.com/2018/10/31/pip-%E5%8D%87%E7%BA%A7%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/31/pip-升级所遇到的问题/</id>
    <published>2018-10-31T10:12:11.000Z</published>
    <updated>2018-11-01T06:43:03.091Z</updated>
    
    <content type="html"><![CDATA[<p>pip的原有版本是9.0.1，最近发现pip可以升级了，想到pip升级到10以上用了下面各种方法，都不管用,如下：<br><a id="more"></a><br>用了mac/limux方法 :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> pip <span class="keyword">install</span> -U pip </span><br><span class="line">easy_install  <span class="comment">--upgrade pip</span></span><br><span class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure></p><p>用了windows 方法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br><span class="line">python -m pip <span class="keyword">install</span> -U pip</span><br></pre></td></tr></table></figure></p><p>最后从源头做起，里面搞定<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">curl </span><span class="string">https:</span>//<span class="string">bootstrap.</span><span class="string">pypa.</span><span class="string">io/</span><span class="built_in">get-pip.py</span> | <span class="string">python3</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pip的原有版本是9.0.1，最近发现pip可以升级了，想到pip升级到10以上用了下面各种方法，都不管用,如下：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>pip安装时ReadTimeoutError解决办法</title>
    <link href="http://yoursite.com/2018/10/31/pip%E5%AE%89%E8%A3%85%E6%97%B6ReadTimeoutError%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/31/pip安装时ReadTimeoutError解决办法/</id>
    <published>2018-10-31T10:12:00.000Z</published>
    <updated>2018-11-01T06:43:08.586Z</updated>
    
    <content type="html"><![CDATA[<p>有一个本地服务器，网速很慢，下载老是出错，出现<br><a id="more"></a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip._vendor<span class="selector-class">.urllib3</span><span class="selector-class">.exceptions</span><span class="selector-class">.ReadTimeoutError</span>: </span><br><span class="line"><span class="function"><span class="title">HTTPSConnectionPool</span><span class="params">(host=<span class="string">'files.pythonhosted.org'</span>, port=<span class="number">443</span>)</span></span>: Read timed out.</span><br></pre></td></tr></table></figure></p><p>经过google，发现用下面的内容就可以完美解决<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --<span class="section">default</span>-timeout=<span class="number">100</span> install gevent</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个本地服务器，网速很慢，下载老是出错，出现&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>安装PyCrypto以后出现的错误</title>
    <link href="http://yoursite.com/2018/10/31/%E5%AE%89%E8%A3%85PyCrypto%E4%BB%A5%E5%90%8E%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/10/31/安装PyCrypto以后出现的错误/</id>
    <published>2018-10-31T10:11:50.000Z</published>
    <updated>2018-11-01T06:39:16.786Z</updated>
    
    <content type="html"><![CDATA[<p> 最近另一个同事安装了PyCrypto，并且在本地和服务器运行都没有错误。当我download下来的时候，安装PyCrypto，运行竟然出现了错误。如下：<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">homeassistant  | 16-07-01 18:35:24 ERROR (MainThread) [homeassistant.bootstrap] Error during setup of component wink</span><br><span class="line">homeassistant  | Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/src/app/homeassistant/bootstrap.py"</span>, line <span class="number">150</span>, <span class="keyword">in</span> _setup_component</span><br><span class="line">homeassistant  |     <span class="keyword">if</span> <span class="keyword">not</span> component.setup(hass, config):</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/src/app/homeassistant/components/wink.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> setup</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> pubnub <span class="keyword">import</span> Pubnub</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/local/lib/python3.4/site-packages/pubnub.py"</span>, line <span class="number">25</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/local/lib/python3.4/site-packages/Crypto/Cipher/__init__.py"</span>, line <span class="number">78</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> Crypto.Cipher._mode_ecb <span class="keyword">import</span> _create_ecb_cipher</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/local/lib/python3.4/site-packages/Crypto/Cipher/_mode_ecb.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> Crypto.Util._raw_api <span class="keyword">import</span> (load_pycryptodome_raw_lib,</span><br><span class="line">homeassistant  |   <span class="keyword">File</span> <span class="string">"/usr/local/lib/python3.4/site-packages/Crypto/Util/_raw_api.py"</span>, line <span class="number">33</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">homeassistant  |     <span class="keyword">from</span> Crypto.Util.py3compat <span class="keyword">import</span> byte_string</span><br><span class="line">homeassistant  | ImportError: cannot <span class="keyword">import</span> <span class="keyword">name</span> <span class="string">'byte_string'</span></span><br></pre></td></tr></table></figure></p><p>解决办法是<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 uninstall pycrypto</span><br><span class="line">pip3 uninstall pycryptodome</span><br><span class="line">pip3 install pycryptodome</span><br></pre></td></tr></table></figure></p><p>这时候就可以正常运行了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近另一个同事安装了PyCrypto，并且在本地和服务器运行都没有错误。当我download下来的时候，安装PyCrypto，运行竟然出现了错误。如下：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>使用tablib出现的错误</title>
    <link href="http://yoursite.com/2018/10/31/%E4%BD%BF%E7%94%A8tablib%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/10/31/使用tablib出现的错误/</id>
    <published>2018-10-31T10:11:39.000Z</published>
    <updated>2018-11-01T06:40:34.073Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司要发邮件，基于tablib的强大功能，我理所当然的使用了它。但是在使用过程中发现一个bug，具体bug报这个错误<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using <span class="selector-tag">a</span> coordinate with ws<span class="selector-class">.cell</span> is deprecated. Use ws[coordinate] instead<span class="string">"</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>刚开始是报警告，后面因为换电脑直接更新requerement.txt，然后发邮件就直接报错<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DeprecationWarning: Call <span class="keyword">to</span> <span class="keyword">deprecated</span> <span class="function"><span class="keyword">function</span> <span class="title">remove_sheet</span></span></span><br><span class="line"><span class="function"> <span class="params">(Use wb.<span class="keyword">remove</span>(worksheet)</span> <span class="title">or</span> <span class="title">del</span> <span class="title">wb</span>[<span class="title">sheetname</span>]).</span></span><br><span class="line"><span class="function">  <span class="title">wb</span>.<span class="title">remove_sheet</span><span class="params">(sheet)</span></span></span><br></pre></td></tr></table></figure></p><p>后来经过查资料发现是因为tablib里面使用openpyxl的问题。openpyxl的版本过高，导致的问题，把openpyxl的版本改下就OK了。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原来的openpyxl版本是<span class="number">2.5</span><span class="number">.4</span>.将其降到<span class="number">2.5</span><span class="number">.0</span>以下就没问题了。</span><br><span class="line">pip install openpyxl==<span class="number">2.4</span><span class="number">.9</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司要发邮件，基于tablib的强大功能，我理所当然的使用了它。但是在使用过程中发现一个bug，具体bug报这个错误&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Using &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; coordinate with ws&lt;span class=&quot;selector-class&quot;&gt;.cell&lt;/span&gt; is deprecated. Use ws[coordinate] instead&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>flask-excel 下载的时候出现OSError错误</title>
    <link href="http://yoursite.com/2018/10/31/flask-excel-%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0OSError%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/10/31/flask-excel-下载的时候出现OSError错误/</id>
    <published>2018-10-31T10:11:27.000Z</published>
    <updated>2018-11-01T06:41:45.466Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用flask-excel报OSError: No content, file name. Nothing is given错误<br><a id="more"></a><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> excel.make_response_from_records(items, <span class="string">"xlsx"</span>, file_name=<span class="string">"all_content"</span>)</span><br></pre></td></tr></table></figure></p><p>经过查考是因为需要添加支持xlsx的控件<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pyexcel-xlsx</span><br></pre></td></tr></table></figure></p><p>这时候就会完美解决</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用flask-excel报OSError: No content, file name. Nothing is given错误&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS开发杂记</title>
    <link href="http://yoursite.com/2018/10/31/iOS%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/31/iOS开发杂记/</id>
    <published>2018-10-31T10:10:26.000Z</published>
    <updated>2018-11-01T06:42:23.540Z</updated>
    
    <content type="html"><![CDATA[<p>因为记性不好，常常看到点东西，都感觉很好，但是经常时间一长都忘了，所以现在些杂记，记住这些。慢慢补充。<br><a id="more"></a></p><h2 id="1-iOS屏幕旋转"><a href="#1-iOS屏幕旋转" class="headerlink" title="1.iOS屏幕旋转"></a>1.iOS屏幕旋转</h2><p>iOS屏幕旋转可以用系统通知判断方向UIDeviceOrientationDidChangeNotification; 是在屏幕旋转过以后UIApplicationWillChangeStatusBarOrientationNotification;<br>屏幕没有旋转过的时候调用，可以用系统通知</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] <span class="string">addObserver:</span>self <span class="string">selector:</span></span><br><span class="line"><span class="meta">@selector</span>(autorotateDirection)<span class="string">name:</span>UIDeviceOrientationDidChangeNotification <span class="string">object:</span>nil];</span><br></pre></td></tr></table></figure><h2 id="2-tableView头部偏离问题"><a href="#2-tableView头部偏离问题" class="headerlink" title="2.tableView头部偏离问题"></a>2.tableView头部偏离问题</h2><p>最近在用tableView的时候，出现自动偏移了64PX，经过查资料，发现需要设置下</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>([selfrespondsToSelector:<span class="keyword">@selector</span>(edgesForExtendedLayout)])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">self</span>.edgesForExtendedLayout= <span class="built_in">UIRectEdgeNone</span>;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="keyword">self</span>.navigationController.navigationBar setTranslucent:<span class="literal">YES</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为记性不好，常常看到点东西，都感觉很好，但是经常时间一长都忘了，所以现在些杂记，记住这些。慢慢补充。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>关于cocoapods管理库遇到的坑</title>
    <link href="http://yoursite.com/2018/10/31/%E5%85%B3%E4%BA%8Ecocoapods%E7%AE%A1%E7%90%86%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2018/10/31/关于cocoapods管理库遇到的坑/</id>
    <published>2018-10-31T10:10:15.000Z</published>
    <updated>2018-11-01T06:40:05.149Z</updated>
    
    <content type="html"><![CDATA[<p>今天花了一点时间来做cocoapods管理自己写的库问题。发现遇到好多坑。<br><a id="more"></a></p><h3 id="记得这样放"><a href="#记得这样放" class="headerlink" title="记得这样放"></a>记得这样放</h3><p><img src="http://upload-images.jianshu.io/upload_images/2120155-24cc6c2668e503dc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cocoaspods1.png"></p><h3 id="记得当你pod-lib-lint-XXKH-podspec成功的时候，记得给库加入tag值"><a href="#记得当你pod-lib-lint-XXKH-podspec成功的时候，记得给库加入tag值" class="headerlink" title="记得当你pod lib lint XXKH.podspec成功的时候，记得给库加入tag值"></a>记得当你pod lib lint XXKH.podspec成功的时候，记得给库加入tag值</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">'1</span>.<span class="number">0.0</span>'</span><br><span class="line">git push --tags</span><br><span class="line">pod <span class="keyword">spec</span> lint</span><br></pre></td></tr></table></figure><p>然后是检查下，最后提交给pod，具体为pod trunk push XXKH.podspec</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天花了一点时间来做cocoapods管理自己写的库问题。发现遇到好多坑。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>git Authentication failed 错误</title>
    <link href="http://yoursite.com/2018/10/31/git-Authentication-failed-%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/10/31/git-Authentication-failed-错误/</id>
    <published>2018-10-31T10:08:47.000Z</published>
    <updated>2018-11-01T06:41:57.407Z</updated>
    
    <content type="html"><![CDATA[<p>最近在windows上面安装git的以后，git某一个项目，出现输入账号密码的界面，这时候应当输入你的用户名和密码。用户名是你的登录账号，密码是你的密码。这时候如果输入错误。那么你就git clone git… 会出现Authentication failed错误。<br><a id="more"></a><br>这时候你无论修改 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="selector-class">.name</span>  <span class="string">'name'</span></span><br><span class="line">git config --global user<span class="selector-class">.email</span>  <span class="string">'email'</span></span><br></pre></td></tr></table></figure><p>会发现还是报这个错误。然后我把git删除了，重装也还是不成。后来经大神指点，发现一个非常简单的解决方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> (一)进入控制面板</span><br><span class="line">（二）选择用户账户</span><br><span class="line">（三）选择管理你的凭据</span><br><span class="line">（四）选择Windows凭据</span><br><span class="line">（五）选择git保存的用户信息</span><br><span class="line">（六）选择编辑或者进行删除操作</span><br></pre></td></tr></table></figure><p>这时候你在git clone git…，你就会发现成功了。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">'good'</span></span></span><br><span class="line"><span class="bash">git push origin master</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在windows上面安装git的以后，git某一个项目，出现输入账号密码的界面，这时候应当输入你的用户名和密码。用户名是你的登录账号，密码是你的密码。这时候如果输入错误。那么你就git clone git… 会出现Authentication failed错误。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Git tag值的使用</title>
    <link href="http://yoursite.com/2018/10/31/Git-tag%E5%80%BC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/Git-tag值的使用/</id>
    <published>2018-10-31T10:07:55.000Z</published>
    <updated>2018-11-01T06:42:02.403Z</updated>
    
    <content type="html"><![CDATA[<p>项目中因为业务的需要，需要打标签。所以这里就把常用的几个命令写下来，方便以后自己在打tag的时候可以直接用到。<br><a id="more"></a></p><h3 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span>   <span class="title">#这会看到项目下包含的标签</span></span><br><span class="line"><span class="title">git</span> show v1.<span class="number">1.0</span>    <span class="comment">#查看该标签下的版本信息</span></span><br></pre></td></tr></table></figure><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><p>打标签有两种，轻量标签和附注标签,轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">v1</span>.<span class="number">1.0</span>  <span class="comment">#创建轻量标签</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v1.<span class="number">1.0</span> -m <span class="string">"1.1.0版本"</span>   <span class="comment">#创建附注标签</span></span><br></pre></td></tr></table></figure><p>创建附注Tag时，参数a即annotated的缩写，指定Tag类型，后附Tag名。参数m指定Tag说明，说明信息会保存在Tag对象中。</p><h3 id="切换标签"><a href="#切换标签" class="headerlink" title="切换标签"></a>切换标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">v1</span><span class="selector-class">.1</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p>删除本地标签<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">-d</span> v1.<span class="number">1.0</span>   <span class="comment">#删除tag</span></span><br></pre></td></tr></table></figure></p><p>删除远程标签</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin <span class="symbol">:refs/tags/</span>标签名  </span><br><span class="line">  </span><br><span class="line">git push origin <span class="symbol">:refs/tags/protobuf-</span><span class="number">2.5</span>.0rc1</span><br></pre></td></tr></table></figure><h3 id="tag推送到项目管理仓库"><a href="#tag推送到项目管理仓库" class="headerlink" title="tag推送到项目管理仓库"></a>tag推送到项目管理仓库</h3><p>注意：打tag的时候先把代码提交到项目管理仓库，然后在提交tag,所以在提交tag值的时候可以先<br>git push origin master</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span> origin v1<span class="meta">.1</span><span class="meta">.0</span>   #将v1<span class="meta">.1</span><span class="meta">.0</span> Tag提交到git服务器</span><br><span class="line">git <span class="keyword">push</span> origin –-tags    # 将本地所有Tag一次性提交到git服务器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中因为业务的需要，需要打标签。所以这里就把常用的几个命令写下来，方便以后自己在打tag的时候可以直接用到。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>git的初始用</title>
    <link href="http://yoursite.com/2018/10/31/git%E7%9A%84%E5%88%9D%E5%A7%8B%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/git的初始用/</id>
    <published>2018-10-31T10:07:44.000Z</published>
    <updated>2018-11-01T06:42:09.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git配置全局的用户名和邮箱"><a href="#git配置全局的用户名和邮箱" class="headerlink" title="git配置全局的用户名和邮箱"></a>git配置全局的用户名和邮箱</h3><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name xxkh</span><br><span class="line">git<span class="built_in"> config </span>--global user.email xxx@gmail.com</span><br></pre></td></tr></table></figure><h3 id="查看用户名和邮箱"><a href="#查看用户名和邮箱" class="headerlink" title="查看用户名和邮箱"></a>查看用户名和邮箱</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name</span><br><span class="line">git<span class="built_in"> config </span>user.email</span><br></pre></td></tr></table></figure><h3 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h3><p>在服务器上 clone 代码第一次通常会提示输入密码，为了下次不再提示，可以在 clone 后做如下操作<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>credential.helper store</span><br></pre></td></tr></table></figure></p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd project_root                             <span class="comment"># 进入项目目录</span></span><br><span class="line">git init                                    <span class="comment"># 初始化git仓库</span></span><br><span class="line">git add .                                   <span class="comment"># 添加文件到仓库</span></span><br><span class="line">git commit -m 'init commit'                 <span class="comment"># 提交代码到本地仓库</span></span><br><span class="line">git remote add origin $&#123;repository_path&#125;    <span class="comment"># 将项目关联到git server</span></span><br><span class="line">git pull origin <span class="keyword">master</span>                      <span class="title"># 同步代码</span></span><br><span class="line"><span class="title">git</span> push origin <span class="keyword">master</span>                      <span class="title"># push</span>代码到远程仓库</span><br><span class="line">git <span class="keyword">clone</span> <span class="title">$</span>&#123;repository_path&#125;                <span class="comment"># 新的位置clone项目</span></span><br></pre></td></tr></table></figure><h3 id="重新提交"><a href="#重新提交" class="headerlink" title="重新提交"></a>重新提交</h3><p>提交后如果发现遗漏可以使用 git commit –amend 重新提交<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">commit</span> -m <span class="string">'initial commit'</span></span><br><span class="line">git <span class="keyword">add</span> forgotten_file</span><br><span class="line">git <span class="keyword">commit</span> <span class="comment">--amend</span></span><br></pre></td></tr></table></figure></p><h3 id="撤销提交文件"><a href="#撤销提交文件" class="headerlink" title="撤销提交文件"></a>撤销提交文件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- &lt;file&gt;              # 取消对文件的修改。还原到最近的版本，废弃本地做的修改。</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span> &lt;<span class="keyword">file</span>&gt;...            <span class="comment"># 取消已经暂存的文件。即，撤销先前"git add"的操作</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>^                     <span class="comment"># 回退所有内容到上一个版本</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>^ a.py                <span class="comment"># 回退a.py这个文件的版本到上一个版本</span></span><br><span class="line">git <span class="keyword">reset</span> –soft <span class="keyword">HEAD</span>~<span class="number">3</span>              <span class="comment"># 向前回退到第3个版本</span></span><br><span class="line">git <span class="keyword">reset</span> –hard origin/<span class="keyword">master</span>       <span class="comment"># 将本地的状态回退到和远程的一样</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="number">057</span>d                      <span class="comment"># 回退到某个版本</span></span><br><span class="line">git revert <span class="keyword">HEAD</span>                     <span class="comment"># 回退到上一次提交的状态，按照某一次的commit完全反向的进行一次commit.(代码回滚到上个版本，并提交git)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git配置全局的用户名和邮箱&quot;&gt;&lt;a href=&quot;#git配置全局的用户名和邮箱&quot; class=&quot;headerlink&quot; title=&quot;git配置全局的用户名和邮箱&quot;&gt;&lt;/a&gt;git配置全局的用户名和邮箱&lt;/h3&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
</feed>
