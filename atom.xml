<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小看护</title>
  
  <subtitle>守护自己，守护家人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-07T07:45:49.825Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小小看护</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 修改文件权限命令chmod、chgrp、chown详解</title>
    <link href="http://yoursite.com/2018/12/07/%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%91%BD%E4%BB%A4chmod%E3%80%81chgrp%E3%80%81chown%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/12/07/修改文件权限命令chmod、chgrp、chown详解/</id>
    <published>2018-12-07T03:39:55.000Z</published>
    <updated>2018-12-07T07:45:49.825Z</updated>
    
    <content type="html"><![CDATA[<p>Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。</p><p>文件或目录的访问权限分为只读，只写和可执行三种。以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。可执行权限表示允许将该文件作为一个程序执行。文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。用户也可根据需要把访问权限设置为需要的任何组合。<br><a id="more"></a></p><p>有三种不同类型的用户可对文件或目录进行访问：文件所有者，同组用户、其他用户。所有者一般是文件的创建者。所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。</p><h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1><p>chmod命令是非常重要的，用于改变文件或目录的访问权限。用户用它控制文件或目录的访问权限。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>chmod [-cfvR] [–help] [–version] mode file…</p></blockquote><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>mode : 权限设定字串，格式如下 :</p><blockquote><p>[ugoa…][[+-=][rwxX]…][,…]</p></blockquote><p>其中</p><ul><li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li><li>+表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li><li>r 表示可读取，w 表示可写入，x 表示可执行，X<br>表示只有当该文件是个子目录或者该文件已经被设定过为可执行。<ul><li>r(Read，读取，权限值为4)：对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目 录的权限</li><li>w(Write,写入，权限值为2)：对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。</li><li>x(eXecute，执行，权限值为1)：对文件而言，具有执行文件的权限；对目录了来说该用户具有进入目录的权限。</li></ul></li></ul><p>其他参数说明：</p><ul><li>-c : 若该文件权限确实已经更改，才显示其更改动作</li><li>-f : 若该文件权限无法被更改也不要显示错误讯息</li><li>-v : 显示权限变更的详细资料</li><li>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</li><li>–help : 显示辅助说明</li><li>–version : 显示版本</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在桌面创建一个hello的文件夹，里面有一个hello的文件。<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─FQY@bogon ~/Desktop</span><br><span class="line">╰─$ ll  | grep hello                                                     </span><br><span class="line">drwxr-xr-x  <span class="number"> 3 </span>FQY  staff    96B<span class="number"> 12 </span><span class="number"> 7 </span>11:55 hello</span><br><span class="line">╭─FQY@bogon ~/Desktop</span><br><span class="line">╰─$ cd hello</span><br><span class="line">╭─FQY@bogon ~/Desktop/hello</span><br><span class="line">╰─$ ll  | grep hello</span><br><span class="line">-rw-r--r-- <span class="number"> 1 </span>FQY  staff     0B<span class="number"> 12 </span><span class="number"> 7 </span>11:55 hello</span><br></pre></td></tr></table></figure></p><p>咱们首先看<code>hello</code>文件夹，是<code>drwxr-xr-x</code>, <code>d</code>表示是文件夹,如果不是文件夹，则第一个是<code>-</code>。咱们上面说到有3种用户类型:文件所有者，同组用户、其他用户.<code>rwx</code>表示文件所有者的权限，<code>r-x</code>表示同组用户的权限,<code>r-x</code>表示其他用户。</p><p>根据上面所说的那样，<strong>r</strong>为4，<strong>w</strong>为2，<strong>x</strong>为1，所以<code>rwx</code>就是7，<code>r-x</code>表示5，所以当咱们需要让同组和其他用户都可以对<code>hello.rtf</code>有读写的权利,<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─FQY<span class="variable">@bogon</span> ~<span class="regexp">/Desktop/hello</span></span><br><span class="line">╰─<span class="variable">$ </span>chmod <span class="number">766</span> hello</span><br><span class="line">╭─FQY<span class="variable">@bogon</span> ~<span class="regexp">/Desktop/hello</span></span><br><span class="line">╰─<span class="variable">$ </span>ll  | grep hello</span><br><span class="line">-rwxrw-rw-  <span class="number">1</span> FQY  staff     0B <span class="number">12</span>  <span class="number">7</span> <span class="number">11</span><span class="symbol">:</span><span class="number">55</span> hello</span><br></pre></td></tr></table></figure></p><p>下面来举些例子熟悉下:</p><table><thead><tr><th>权限</th><th>数值</th></tr></thead><tbody><tr><td>-rwxrw-r–-</td><td>764</td></tr><tr><td>-rw-r–-r–-</td><td>644</td></tr><tr><td>-rw-rw-r–-</td><td>664</td></tr></tbody></table><p>创建一个file1.text文件，将文件 file1.txt 设为所有人皆可读取:</p><blockquote><p>chmod ugo+r file1.txt</p></blockquote><p>将文件 file1.txt 设为所有人皆可读取 :</p><blockquote><p>chmod a+r file1.txt</p></blockquote><p>将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</p><blockquote><p>chmod ug+w,o-w file1.txt file2.txt</p></blockquote><p>所以咱们晓得:<br><code>chmod ug=rwx,o=x file</code> 和 <code>chmod 771 file</code>，效果是一样的。</p><h1 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h1><blockquote><p>Linux chgrp命令用于变更文件或目录的所属群组。</p></blockquote><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><blockquote><p>chgrp [选项] [组] [文件]</p></blockquote><p>参数说明:</p><pre><code>-c或--changes 效果类似&quot;-v&quot;参数，但仅回报更改的部分。　　-f或--quiet或--silent 　不显示错误信息。-h或--no-dereference 只对符号连接的文件作修改，而不更动其他任何相关文件。-R或--recursive 递归处理，将指定目录下的所有文件及子目录一并处理。-v或--verbose 　显示指令执行过程。--help 　在线帮助。--reference=&lt;参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。--version 　显示版本信息。</code></pre><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>将log2012.log文件由root群组改为bin群组</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> test]<span class="meta"># ll</span></span><br><span class="line">---xrw-r-- <span class="number">1</span> root root <span class="number">302108</span> <span class="number">11</span><span class="number">-13</span> <span class="number">06</span>:<span class="number">03</span> log2012.<span class="built_in">log</span></span><br><span class="line">[root<span class="symbol">@localhost</span> test]<span class="meta"># chgrp -v bin log2012.log</span></span><br><span class="line">“log2012.<span class="built_in">log</span>” 的所属组已更改为 bin</span><br><span class="line">[root<span class="symbol">@localhost</span> test]<span class="meta"># ll</span></span><br><span class="line">---xrw-r-- <span class="number">1</span> root bin  <span class="number">302108</span> <span class="number">11</span><span class="number">-13</span> <span class="number">06</span>:<span class="number">03</span> log2012.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><strong>根据指定文件改变文件的群组属性</strong></p><p>改变文件log2013.log的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]<span class="comment"># ll</span></span><br><span class="line">---xrw-r--<span class="number"> 1 </span>root bin <span class="number"> 302108 </span>11-13 06:03 log2012.log</span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root    <span class="number"> 61 </span>11-13 06:03 log2013.log</span><br><span class="line">[root@localhost test]<span class="comment">#  chgrp --reference=log2012.log log2013.log </span></span><br><span class="line">[root@localhost test]<span class="comment"># ll</span></span><br><span class="line">---xrw-r--<span class="number"> 1 </span>root bin <span class="number"> 302108 </span>11-13 06:03 log2012.log</span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root bin     <span class="number"> 61 </span>11-13 06:03 log2013.log</span><br></pre></td></tr></table></figure><h1 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h1><p>使用权限: root</p><p>使用方式 : chown [-cfhvR] [–help] [–version] user[:group] file… </p><p>说明 : Linux/Unix 是多人多工作业系统，所有的档案皆有拥有者。利用 chown 可以将档案的拥<br>有者加以改变。一般来说，这个指令只有是由系统管理者(root)所使用，一般使用者没有权限可以<br>改变别人的档案拥有者，也没有权限可以自己的档案拥有者改设为别人。只有系统管理者(root)才<br>有这样的权限。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre><code>user : 新的档案拥有者的使用者 IDgroup : 新的档案拥有者的使用者群体(group)-c或-change：作用与-v相似，但只传回修改的部分 -f或–quiet或–silent：不显示错误信息 -h或–no-dereference：只对符号链接的文件做修改，而不更改其他任何相关文件 -R或-recursive：递归处理，将指定目录下的所有文件及子目录一并处理 -v或–verbose：显示指令执行过程 –dereference：作用和-h刚好相反 –help：显示在线说明 –reference=&lt;参考文件或目录&gt;：把指定文件或目录的所有者与所属组，统统设置成和参考文件或目录的所有者与所属组相同 –version：显示版本信息</code></pre><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>将文件 file1.txt 的拥有者设为 users 群体的使用者 runoob :</p><blockquote><p>chown runoob:users file1.txt</p></blockquote><p>将目前目录下的所有文件与子目录的拥有者皆设为 users 群体的使用者 lamport :</p><blockquote><p>chown -R lamport:users *</p></blockquote><h1 id="chmod和chown的区别"><a href="#chmod和chown的区别" class="headerlink" title="chmod和chown的区别"></a>chmod和chown的区别</h1><blockquote><p>chmod与chown看似拼写还有点差不多，但是两者的用途是不同的。chmod是用来设置文件夹和文件权限的，比如我们在VPS主机中文件不可读写，需要用来设置777权限；而chown是用来设置用户组的，比如授权某用户组，方便控制用户权限。</p></blockquote><p><strong>chown 修改文件和文件夹的用户和用户组属性</strong><br>1。要修改文件hh.c的所有者.修改为sakia的这个用户所有</p><blockquote><p>chown sakia hh.c</p></blockquote><p>这样就把hh.c的用户访问权限应用到sakia作为所有者</p><p>2。将目录 /tmp/sco 这个目录的所有者和组改为sakia和组net</p><blockquote><p>chown -R sakia:net /tmp/sco</p></blockquote><p><strong>chmod 修改文件和文件夹读写执行属性</strong></p><p>1。把hh.c文件修改为可写可读可执行</p><blockquote><p>chmod 777 hh.c</p></blockquote><p>要修改某目录下所有的文件属性为可写可读可执行</p><blockquote><p>chmod 777 <em>.</em></p></blockquote><p>把文件夹名称与后缀名用*来代替就可以了。 </p><p>同理若是要修改所有htm文件的属性</p><blockquote><p>chmod 777 *.htm</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。&lt;/p&gt;
&lt;p&gt;文件或目录的访问权限分为只读，只写和可执行三种。以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。可执行权限表示允许将该文件作为一个程序执行。文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。用户也可根据需要把访问权限设置为需要的任何组合。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下chattr命令详解</title>
    <link href="http://yoursite.com/2018/12/05/linux%E4%B8%8Bchattr%E3%80%81chgrp%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/12/05/linux下chattr、chgrp命令详解/</id>
    <published>2018-12-05T09:04:13.000Z</published>
    <updated>2018-12-05T09:36:22.434Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>chattr 可以修改文件属性</p></blockquote><p>有时候你发现用root权限都不能修改某个文件，大部分原因是曾经用chattr命令锁定该文件了。chattr命令的作用很大，通过chattr命令修改属性能够提高系统的安全性，但是它并不适合所有的目录。chattr命令不能保护/、/dev、/tmp、/var目录。lsattr命令是显示chattr命令设置的文件属性</p><h3 id="lsattr"><a href="#lsattr" class="headerlink" title="lsattr"></a>lsattr</h3><p>lsattr命令是显示chattr命令设置的文件属性<br><a id="more"></a></p><h3 id="chattr和chmod的区别"><a href="#chattr和chmod的区别" class="headerlink" title="chattr和chmod的区别"></a>chattr和chmod的区别</h3><p>这两个命令是用来查看和改变文件、目录属性的，与chmod这个命令相比，chmod只是改变文件的读写、执行权限，更底层的属性控制是由chattr来改变的。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>chattr [-RV][-v&lt;版本编号&gt;][+/-/=&lt;属性&gt;][文件或目录…]</p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote></blockquote><pre><code>+ ：在原有参数设定基础上，追加参数。- ：在原有参数设定基础上，移除参数。= ：更新为指定参数设定。A：文件或目录的 atime (access time)不可被修改(modified), 可以有效预防例如手提电脑磁盘I/O错误的发生。S：硬盘I/O同步选项，功能类似sync。a：即append，设定该参数后，只能向文件中添加数据，而不能删除，多用于服务器日志文件安全，对于日志系统很好用，这个权限让目标文件只能追加，不能删除，而且不能通过编辑器追加。c：即compresse，设定文件是否经压缩后再存储。读取时需要经过自动解压操作。d：即no dump，设定文件不能成为dump程序的备份目标。i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。i参数对于文件 系统的安全设置有很大帮助。j：即journal，设定此参数使得当通过mount参数：data=ordered 或者 data=writeback 挂 载的文件系统，文件在写入时会先被记录(在journal中)。如果filesystem被设定参数为 data=journal，则该参数自动失效。s：保密性地删除文件或目录，即硬盘空间被全部收回。u：与s相反，当设定为u时，数据内容其实还存在磁盘中，可以用于undeletion。各参数选项中常用到的是a和i。a选项强制只可添加不可删除，多用于日志系统的安全设定。而i是更为严格的安全设定，只有superuser (root) 或具有CAP_LINUX_IMMUTABLE处理能力（标识）的进程能够施加该选项</code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre><code>-R 递归处理，将指定目录下的所有文件及子目录一并处理。-v&lt;版本编号&gt; 设置文件或目录版本。-V 显示指令执行过程。+&lt;属性&gt; 开启文件或目录的该项属性。-&lt;属性&gt; 关闭文件或目录的该项属性。=&lt;属性&gt; 指定文件或目录的该项属性</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">╭─root@iz ~</span><br><span class="line">╰─# <span class="keyword">ls</span> </span><br><span class="line">hello.<span class="keyword">conf</span>   # 我在下面创建一个hello.<span class="keyword">conf</span>文件</span><br><span class="line">╭─root@iz~</span><br><span class="line">╰─# chattr -V +i  hello.<span class="keyword">conf</span>   # 设定文件不能被删除、改名等</span><br><span class="line">chattr 1.42.9 (28-<span class="keyword">Dec</span>-2013)</span><br><span class="line">hello.<span class="keyword">conf</span>的标志被设为 ----i--------<span class="keyword">e</span>--</span><br><span class="line">╭─root@iz ~</span><br><span class="line">╰─# <span class="keyword">rm</span> hello.<span class="keyword">conf</span></span><br><span class="line"><span class="keyword">rm</span>: 无法删除<span class="string">"hello.conf"</span>: 不允许的操作</span><br><span class="line">╭─root@iz ~</span><br><span class="line">╰─# lsattr hello.<span class="keyword">conf</span>   # 用lsattr 可以查看chattr下面的设置</span><br><span class="line">----i--------<span class="keyword">e</span>-- hello.<span class="keyword">conf</span></span><br><span class="line">╭─root@iz ~</span><br><span class="line">╰─# lsattr hello.<span class="keyword">conf</span></span><br><span class="line">----i--------<span class="keyword">e</span>-- hello.<span class="keyword">conf</span></span><br><span class="line">╭─root@iz ~</span><br><span class="line">╰─# chattr -V -i hello.<span class="keyword">conf</span></span><br><span class="line">chattr 1.42.9 (28-<span class="keyword">Dec</span>-2013)</span><br><span class="line">hello.<span class="keyword">conf</span>的标志被设为 -------------<span class="keyword">e</span>--</span><br><span class="line">这时候在删除就可以删除了</span><br><span class="line">╭─root@iz ~</span><br><span class="line">╰─# <span class="keyword">rm</span> hello.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;chattr 可以修改文件属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时候你发现用root权限都不能修改某个文件，大部分原因是曾经用chattr命令锁定该文件了。chattr命令的作用很大，通过chattr命令修改属性能够提高系统的安全性，但是它并不适合所有的目录。chattr命令不能保护/、/dev、/tmp、/var目录。lsattr命令是显示chattr命令设置的文件属性&lt;/p&gt;
&lt;h3 id=&quot;lsattr&quot;&gt;&lt;a href=&quot;#lsattr&quot; class=&quot;headerlink&quot; title=&quot;lsattr&quot;&gt;&lt;/a&gt;lsattr&lt;/h3&gt;&lt;p&gt;lsattr命令是显示chattr命令设置的文件属性&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>python 批量上传文件到阿里云oss，并写入Excel，存到本地</title>
    <link href="http://yoursite.com/2018/11/29/python-%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss/"/>
    <id>http://yoursite.com/2018/11/29/python-批量上传文件到阿里云oss/</id>
    <published>2018-11-29T05:59:03.000Z</published>
    <updated>2018-11-29T07:43:02.708Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近公司要往阿里云oss上传视频，大小差不多有200G，原先让运营去一个一个的添加，但是这能麻烦死人，所以就让技术去批量上传。所以研究了一下用python往oss上传视频<br><a id="more"></a></p></blockquote><p>首先需引用以下几个模块<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> oss2</span><br><span class="line">pip <span class="keyword">install</span> tablib</span><br><span class="line">pip <span class="keyword">install</span> pyexcel-xlsx</span><br></pre></td></tr></table></figure></p><p>其次因为本地的视频都是比如<code>中文.mp4</code>这样的，所以引入一个随机字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_random_str</span><span class="params">(randomlength=<span class="number">8</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生成一个指定长度的随机字符串</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    random_str = <span class="string">''</span></span><br><span class="line">    base_str = <span class="string">'ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789'</span></span><br><span class="line">    length = len(base_str) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(randomlength):</span><br><span class="line">        random_str += base_str[random.randint(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">return</span> random_str</span><br></pre></td></tr></table></figure></p><p>因为是文件夹里面套文件夹，但是只上传文件，所以需要获取子文件夹下面的视频<br><img src="https://upload-images.jianshu.io/upload_images/2120155-938d3901bc70ab14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>代码如下：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def upload(dir):</span><br><span class="line">    fs = os.listdir(dir)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> fs:</span><br><span class="line">        <span class="built_in">file</span> = dir + <span class="string">"/"</span> + f</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(<span class="built_in">file</span>):</span><br><span class="line">            upload(<span class="built_in">file</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'DS_Store'</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">file</span> <span class="keyword">and</span> <span class="string">'png'</span> <span class="keyword">not</span> <span class="keyword">in</span> f <span class="keyword">and</span> <span class="string">'JPG'</span> <span class="keyword">not</span> <span class="keyword">in</span> f:</span><br><span class="line">                putAliyun(<span class="built_in">file</span>, f)</span><br></pre></td></tr></table></figure></p><p><strong>备注</strong>：因为文件夹里面还有图片，所以去除后缀为<code>png</code>、<code>JPG</code>的图片。因为用的是mac上传，所以文件夹里面有<code>.DS_Store</code>，所以也需要去除</p><p>所以这个的整个代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># ! -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tablib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ossDir = <span class="string">'/Users/FQY/Desktop/upload'</span></span><br><span class="line">key = XXX</span><br><span class="line">secret = XXX</span><br><span class="line">bucketname = XXX</span><br><span class="line"></span><br><span class="line">dataset = tablib.Dataset()</span><br><span class="line">header = (<span class="string">'title'</span>, <span class="string">'url'</span>)</span><br><span class="line">dataset.headers = header</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_random_str</span><span class="params">(randomlength=<span class="number">8</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生成一个指定长度的随机字符串</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    random_str = <span class="string">''</span></span><br><span class="line">    base_str = <span class="string">'ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789'</span></span><br><span class="line">    length = len(base_str) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(randomlength):</span><br><span class="line">        random_str += base_str[random.randint(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">return</span> random_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getmkname</span><span class="params">(path)</span>:</span></span><br><span class="line">    remoteName = path.replace(ossDir, <span class="string">''</span>)</span><br><span class="line">    dir_names = remoteName.split(<span class="string">'/'</span>)</span><br><span class="line">    dir_names.pop()</span><br><span class="line">    res = filter(<span class="keyword">None</span>, dir_names)</span><br><span class="line">    mkdir_name = <span class="string">'-'</span>.join(res)</span><br><span class="line">    <span class="keyword">return</span> mkdir_name</span><br><span class="line"></span><br><span class="line"><span class="comment">#获得上传的时长</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">progress_callback</span><span class="params">(bytes_consumed, total_bytes)</span>:</span></span><br><span class="line">    print(<span class="string">'bytes_consumed is &#123;&#125;'</span>.format(bytes_consumed))</span><br><span class="line">    print(<span class="string">'total_bytes is &#123;&#125;'</span>.format(total_bytes))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">putAliyun</span><span class="params">(path, f)</span>:</span></span><br><span class="line">    key = <span class="string">'language/'</span> + str(int(time.time())) + generate_random_str() + <span class="string">'.mp4'</span></span><br><span class="line">    auth = oss2.Auth(key, secret)</span><br><span class="line">    bucket = oss2.Bucket(auth, <span class="string">'http://oss-cn-hangzhou.aliyuncs.com'</span>, bucketname)</span><br><span class="line">    result = bucket.put_object_from_file(key=key, filename=path,progress_callback=progress_callback)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result.status == <span class="number">200</span>:</span><br><span class="line">        aliyun = <span class="string">'http://mewevideo.oss-cn-hangzhou.aliyuncs.com/&#123;&#125;'</span>.format(key)</span><br><span class="line">        title = <span class="string">'【&#123;&#125;】&#123;&#125;'</span>.format(getmkname(path), f.split(<span class="string">'.mp4'</span>)[<span class="number">0</span>])</span><br><span class="line">        dataset.append([title, aliyun])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'upload fail,error code'</span>, result.status)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(dir)</span>:</span></span><br><span class="line">    fs = os.listdir(dir)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> fs:</span><br><span class="line">        file = dir + <span class="string">"/"</span> + f</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(file):</span><br><span class="line">            upload(file)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'DS_Store'</span> <span class="keyword">not</span> <span class="keyword">in</span> file <span class="keyword">and</span> <span class="string">'png'</span> <span class="keyword">not</span> <span class="keyword">in</span> f <span class="keyword">and</span> <span class="string">'JPG'</span> <span class="keyword">not</span> <span class="keyword">in</span> f:</span><br><span class="line">                putAliyun(file, f)</span><br><span class="line"></span><br><span class="line">upload(ossDir)</span><br><span class="line"></span><br><span class="line">myfile = open(<span class="string">'/Users/FQY/Desktop/mydata_video.xlsx'</span>, <span class="string">'wb'</span>)</span><br><span class="line">myfile.write(dataset.xlsx)</span><br><span class="line">myfile.close()</span><br></pre></td></tr></table></figure></p><p>tablib的介绍，可以观看以下的文章<br><br><a href="https://blog.gideondudu.com/2018/10/31/%E5%88%A9%E7%94%A8tablib%E3%80%81make-response-%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/" target="_blank" rel="noopener">利用tablib、make_response 进行文件的下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近公司要往阿里云oss上传视频，大小差不多有200G，原先让运营去一个一个的添加，但是这能麻烦死人，所以就让技术去批量上传。所以研究了一下用python往oss上传视频&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>sudo -s 切换到root账户</title>
    <link href="http://yoursite.com/2018/11/20/sudo-s-%E5%88%87%E6%8D%A2%E5%88%B0root%E8%B4%A6%E6%88%B7/"/>
    <id>http://yoursite.com/2018/11/20/sudo-s-切换到root账户/</id>
    <published>2018-11-20T09:50:31.000Z</published>
    <updated>2018-11-20T09:51:22.647Z</updated>
    
    <content type="html"><![CDATA[<p>sudo su 和 sudo -s都是切换到root用户，不同的是：</p><blockquote><p>sudo su 环境用的是目标用户(root)的环境<br>sudo -s 环境用的是当前用户本身的环境</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sudo su 和 sudo -s都是切换到root用户，不同的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo su 环境用的是目标用户(root)的环境&lt;br&gt;sudo -s 环境用的是当前用户本身的环境&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu系统下gitlab的创建</title>
    <link href="http://yoursite.com/2018/11/20/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bgitlab%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/11/20/ubuntu系统下gitlab的创建/</id>
    <published>2018-11-20T08:37:22.000Z</published>
    <updated>2018-11-20T09:36:44.442Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要： gitlab的介绍、环境、创建步骤、关键点、卸载gitlab<br><a id="more"></a></p></blockquote><h1 id="gitlab的介绍"><a href="#gitlab的介绍" class="headerlink" title="gitlab的介绍"></a>gitlab的介绍</h1><blockquote><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><p>ubuntu 18.04LTS</p></blockquote><h1 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h1><p>gitlab官网上面有在ubuntu创建gitlab的步骤<br><a href="https://about.gitlab.com/install/" target="_blank" rel="noopener">https://about.gitlab.com/install/</a> 可以点击按照步骤来做</p><h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1><p>每次修改配置的时候记得<code>sudo gitlab-ctl reconfigure</code>，使配置生效</p><p><strong>指令</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">查看运行状态</span><br><span class="line">    sudo gitlab-ctl status</span><br><span class="line">启动所有 gitlab 组件</span><br><span class="line">    sudo gitlab-ctl <span class="keyword">start</span> </span><br><span class="line">停止所有 gitlab 组件   </span><br><span class="line">    sudo gitlab-ctl <span class="keyword">stop</span>       </span><br><span class="line">重启所有 gitlab 组件 </span><br><span class="line">    sudo gitlab-ctl restart  </span><br><span class="line">启动服务      </span><br><span class="line">    sudo gitlab-ctl reconfigure </span><br><span class="line">修改默认的配置文件       </span><br><span class="line">    sudo vim /etc/gitlab/gitlab.rb    </span><br><span class="line">检查gitlab    </span><br><span class="line">    gitlab-rake gitlab:<span class="keyword">check</span> SANITIZE=<span class="literal">true</span> <span class="comment">--trace  </span></span><br><span class="line">查看日志  </span><br><span class="line">    sudo gitlab-ctl tail</span><br></pre></td></tr></table></figure></p><p><strong>初始账户和密码</strong><br>有的笔记上说的默认账户和密码是下面的</p><blockquote><p>账户：root<br>密码：5iveL!fe</p></blockquote><p>但是我打开网页的时候，直接提示的是 change your password。这时候我做的就是把密码修改下，密码最少8个字，当你修改过了以后你就可以登录了。比如：</p><blockquote><p>账户：root<br>密码：xxkh1234</p></blockquote><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>1、停止gitlab<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl <span class="built_in">stop</span></span><br></pre></td></tr></table></figure></p><p>2、卸载gitlab（注意这里写的是gitlab-ce）<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo dpkg -r gitlab-ce</span></span><br></pre></td></tr></table></figure></p><p>3、查看gitlab进程<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> aux | <span class="keyword">grep</span> gitlab</span><br></pre></td></tr></table></figure></p><p><img src="http://blog.whsir.com/wp-content/uploads/2017/05/gitlab.png" alt=""><br>4、杀掉第一个进程（就是带有好多………….的进程）<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">-9</span> <span class="number">18777</span></span><br></pre></td></tr></table></figure></p><p>杀掉后，在ps aux | grep gitlab确认一遍，还有没有gitlab的进程</p><p>5、删除所有包含gitlab文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -name gitlab | xargs rm -rf</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要： gitlab的介绍、环境、创建步骤、关键点、卸载gitlab&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux grep、tail命令的混合使用</title>
    <link href="http://yoursite.com/2018/11/14/Linux-grep%E3%80%81tail%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/14/Linux-grep、tail命令的使用/</id>
    <published>2018-11-14T06:06:29.000Z</published>
    <updated>2018-11-14T07:32:57.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>Linux grep命令用于查找文件里符合条件的字符串。<br>grep指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设grep指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为”-“，则grep指令会从标准输入设备读取数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][–help][范本样式][文件或目录…]</p></blockquote><p>或</p><blockquote><p>grep [选项] “模式” [文件]</p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><blockquote><ul><li>-a 或 –text : 不要忽略二进制的数据。</li><li>-A&lt;显示行数&gt; 或 –after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</li><li>-b 或 –byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。</li><li>-B&lt;显示行数&gt; 或 –before-context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。</li><li>-c 或 –count : 计算符合样式的列数。</li><li>-C&lt;显示行数&gt; 或 –context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。</li><li>-d &lt;动作&gt; 或 –directories=&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。</li><li>-e&lt;范本样式&gt; 或 –regexp=&lt;范本样式&gt; : 指定字符串做为查找文件内容的样式。</li><li>-E 或 –extended-regexp : 将样式为延伸的普通表示法来使用。</li><li>-f&lt;规则文件&gt; 或 –file=&lt;规则文件&gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。</li><li>-F 或 –fixed-regexp : 将样式视为固定字符串的列表。</li><li>-G 或 –basic-regexp : 将样式视为普通的表示法来使用。</li><li>-h 或 –no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。</li><li>-H 或 –with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。</li><li>-i 或 –ignore-case : 忽略字符大小写的差别。</li><li>-l 或 –file-with-matches : 列出文件内容符合指定的样式的文件名称。</li><li>-L 或 –files-without-match : 列出文件内容不符合指定的样式的文件名称。</li><li>-n 或 –line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。</li><li>-q 或 –quiet或–silent : 不显示任何信息。</li><li>-r 或 –recursive : 此参数的效果和指定”-d recurse”参数相同。</li><li>-s 或 –no-messages : 不显示错误信息。</li><li>-v 或 –revert-match : 显示不包含匹配文本的所有行。</li><li>-V 或 –version : 显示版本信息。</li><li>-w 或 –word-regexp : 只显示全字符合的列。</li><li>-x –line-regexp : 只显示全列符合的列。</li><li>-y : 此参数的效果和指定”-i”参数相同</li></ul></blockquote><p><strong>实例</strong><br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@hard supervisord]# grep <span class="string">'POST.*play_order.*return 200'</span> tmd.log</span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">21</span>,<span class="number">190</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">14</span>:<span class="number">42</span>:<span class="number">03</span>,<span class="number">327</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">27</span>,<span class="number">720</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">25</span>,<span class="number">090</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-21</span> <span class="number">18</span>:<span class="number">33</span>:<span class="number">20</span>,<span class="number">517</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">20</span>:<span class="number">55</span>,<span class="number">863</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">36</span>,<span class="number">183</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">44</span>,<span class="number">021</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br><span class="line">[<span class="number">2018</span><span class="number">-10</span><span class="number">-22</span> <span class="number">17</span>:<span class="number">55</span>:<span class="number">15</span>,<span class="number">172</span>] [base.py:<span class="number">451</span>  ] [<span class="symbol">DEBUG</span>] [<span class="symbol">POST</span> /adminapi/v3/play_order ] return <span class="number">200</span></span><br></pre></td></tr></table></figure></p><p><code>grep &#39;POST.*play_order.*return 200&#39; tmd.log</code> 这个等同于<code>grep  &#39;play_order&#39; tmd.log  | grep &#39;POST&#39; | grep &#39;return 200&#39;</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hard supervisord]# <span class="keyword">grep</span> -<span class="keyword">c</span> <span class="string">'POST.*play_order.*return 200'</span> tmd.<span class="built_in">log</span></span><br><span class="line"><span class="number">62</span></span><br><span class="line">[root@hard supervisord]# <span class="keyword">grep</span> -<span class="keyword">c</span>  <span class="string">'play_order'</span> tmd.<span class="built_in">log</span>  | <span class="keyword">grep</span> <span class="string">'POST'</span> | <span class="keyword">grep</span> <span class="string">'return 200'</span></span><br><span class="line">[root@hard supervisord]# <span class="keyword">grep</span>  <span class="string">'play_order'</span> tmd.<span class="built_in">log</span>  | <span class="keyword">grep</span> <span class="string">'POST'</span> | <span class="keyword">grep</span> -<span class="keyword">c</span> <span class="string">'return 200'</span></span><br><span class="line"><span class="number">62</span></span><br></pre></td></tr></table></figure><p>grep可以和很多的命令一起使用<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看Linux 某些程序进程 ps aux </span><br><span class="line">[root@iZ2ze3269b etc]<span class="comment"># ps aux | grep mysql</span></span><br><span class="line">root     <span class="number"> 2371 </span> 0.0  0.0<span class="number"> 112676 </span> <span class="number"> 980 </span>pts/0    S+   14:34   0:00 grep --color=auto mysql</span><br><span class="line">mysql   <span class="number"> 10810 </span> 0.1  9.4<span class="number"> 1599384 </span>367788 ?      Sl   10月11  13:13 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure></p><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><p>tail 命令可用于查看文件的内容，有一个常用的参数 -f 常用于查阅正在改变的日志文件。<br>tail -f filename 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><blockquote><p>tail [参数] [文件]  </p></blockquote><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><blockquote><ul><li>-f 循环读取</li><li>-q 不显示处理信息</li><li>-v 显示详细的处理信息</li><li>-c&lt;数目&gt; 显示的字节数</li><li>-n&lt;行数&gt; 显示行数</li><li>–pid=PID 与-f合用,表示在进程ID,PID死掉之后结束.</li><li>-q, –quiet, –silent 从不输出给出文件名的首部</li><li>-s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒</li></ul></blockquote><p><strong>实例</strong></p><p>要显示 notes.log 文件的最后 10 行，请输入以下命令：</p><blockquote><p>tail notes.log</p></blockquote><p>要跟踪名为 notes.log 的文件的增长情况，请输入以下命令：</p><blockquote><p>tail -f notes.log</p></blockquote><p>此命令显示 notes.log 文件的最后 10 行。当将某些行添加至 notes.log 文件时，tail 命令会继续显示这些行。 显示一直继续，直到您按下（Ctrl-C）组合键停止显示。<br>显示文件 notes.log 的内容，从第 20 行至文件末尾:</p><blockquote><p>tail +20 notes.log</p></blockquote><h1 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h1><p>有时候我们会查询正在改变的文件，但是我们只想查看其中的某一些信息，这时候就可以使用tail、grep的混合使用</p><blockquote><p>tail -f filename | grep ‘DEBUG’ </p></blockquote><p><strong>实例</strong></p><blockquote><p>tail -f tmd.log | grep ‘DEBUG.<em>template.</em>begin’</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;grep&quot;&gt;&lt;a href=&quot;#grep&quot; class=&quot;headerlink&quot; title=&quot;grep&quot;&gt;&lt;/a&gt;grep&lt;/h1&gt;&lt;p&gt;Linux grep命令用于查找文件里符合条件的字符串。&lt;br&gt;grep指令用于查找内容包含指定的范本样式的文件，如果发现某
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>vim 指令</title>
    <link href="http://yoursite.com/2018/11/14/vim-%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/11/14/vim-指令/</id>
    <published>2018-11-14T02:24:25.000Z</published>
    <updated>2018-11-14T02:27:12.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="上下左右"><a href="#上下左右" class="headerlink" title="上下左右"></a>上下左右</h3><p><code>h, j, k , l</code>四个键分别代表方向键<code>← ↓ ↑ →</code> ，也就是上下左右，每次只能向上、向左、向右、向下一下。<br>如果向下移动5行的话，可以用数字+快捷键<code>5j</code>,那么向右移动5个就是<code>5l</code>。</p><a id="more"></a><h3 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h3><p>组合键</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ctrl</span>&gt;</span> + f  向下移动一页 </span><br><span class="line"><span class="tag">&lt;<span class="name">ctrl</span>&gt;</span> + d  向下移动半页</span><br><span class="line"><span class="tag">&lt;<span class="name">ctrl</span>&gt;</span> + b  向上移动一页</span><br><span class="line"><span class="tag">&lt;<span class="name">ctrl</span>&gt;</span> + u  向上移动半页</span><br></pre></td></tr></table></figure><h3 id="行首行尾"><a href="#行首行尾" class="headerlink" title="行首行尾"></a>行首行尾</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="comment">#快速跳到行首</span></span><br><span class="line"><span class="variable">$ </span>  <span class="comment">#快速调到行尾</span></span><br><span class="line">g<span class="number">_</span>  <span class="comment">#快速跳到行尾最后一个非空字符</span></span><br></pre></td></tr></table></figure><h3 id="页头页尾"><a href="#页头页尾" class="headerlink" title="页头页尾"></a>页头页尾</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gg</span> <span class="comment">#快速跳到第一行</span></span><br><span class="line">G  <span class="comment">#快速跳到最后一行</span></span><br></pre></td></tr></table></figure><h3 id="行内查找"><a href="#行内查找" class="headerlink" title="行内查找"></a>行内查找</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fx     #从当前光标开始向右查找字符 <span class="keyword">x</span>，<span class="keyword">x</span> 为目标字符</span><br><span class="line">nfx    #从当前广告开始向右查找第 n 个字符 <span class="keyword">x</span>，n 为数字</span><br><span class="line">Fx     #从当前光标开始向左查找字符 <span class="keyword">x</span>，<span class="keyword">x</span> 为目标字符</span><br><span class="line">nfx    #从当前广告开始向左查找第 n 个字符 <span class="keyword">x</span>，n 为数字</span><br></pre></td></tr></table></figure><h3 id="全文查找"><a href="#全文查找" class="headerlink" title="全文查找"></a>全文查找</h3><p>如果你想要把全文的 native 都找到，可以按下 / 进入 command 模式，随后输入 native 然后回车，此时光标会定位在第一个目标上，并高亮所有找到的目标单词。此时按下 n 光标就会向下在高亮的单词上依次跳转，N 则会反方向跳转。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/word   <span class="string">" 输入 / 会进入 command 模式，再输入先要搜索的单词并回车进行搜索</span></span><br><span class="line">?word   <span class="string">" / 是向光标以后搜索，? 是向前搜索</span></span><br><span class="line">n       <span class="string">" 英文字母 n，根据 / 或 ? 搜索的方向定位到下一个匹配目标</span></span><br><span class="line">N       <span class="string">" 与 n 相反，定位匹配目标</span></span><br></pre></td></tr></table></figure><h3 id="复制、粘贴、删除"><a href="#复制、粘贴、删除" class="headerlink" title="复制、粘贴、删除"></a>复制、粘贴、删除</h3><p>复制当前行 <code>yy</code>，删除并复制当前行 <code>dd</code>，粘贴到光标下一行 <code>p</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dd          <span class="string">" 删除当前行</span></span><br><span class="line">ndd         <span class="string">" 向下删除 n 行</span></span><br><span class="line">d1G / dgg   <span class="string">" 删除第一行到当前行的数据</span></span><br><span class="line">dG          <span class="string">" 删除当前行到最后一行的数据</span></span><br><span class="line">d$          <span class="string">" 删除当前字符到行尾</span></span><br><span class="line">d0          <span class="string">" 从行首删除到当前字符</span></span><br><span class="line">yy          <span class="string">" 复制当前行</span></span><br><span class="line">nyy         <span class="string">" 从当前行开始复制 n 行</span></span><br><span class="line">y1G / ygg   <span class="string">" 从第一行复制到当前行</span></span><br><span class="line">yG          <span class="string">" 从当前行复制到最后一行</span></span><br><span class="line">y0          <span class="string">" 从行首复制到当前字符</span></span><br><span class="line">y$          <span class="string">" 从当前字符复制到行尾</span></span><br><span class="line">p, P        <span class="string">" 黏贴，p 黏贴到光标下一行，P 黏贴到光标上一行</span></span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x        <span class="string">" 向后删除一个字符</span></span><br><span class="line">nx       <span class="string">" 向后删除 n 个字符</span></span><br><span class="line">X        <span class="string">" 向前删除一个字符</span></span><br><span class="line">nX       <span class="string">" 向前删除 n 个字符</span></span><br></pre></td></tr></table></figure><h3 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">u</span>       <span class="comment">" 撤销</span></span><br><span class="line"><span class="symbol">&lt;c-r&gt;</span>   <span class="comment">" 重做</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;上下左右&quot;&gt;&lt;a href=&quot;#上下左右&quot; class=&quot;headerlink&quot; title=&quot;上下左右&quot;&gt;&lt;/a&gt;上下左右&lt;/h3&gt;&lt;p&gt;&lt;code&gt;h, j, k , l&lt;/code&gt;四个键分别代表方向键&lt;code&gt;← ↓ ↑ →&lt;/code&gt; ，也就是上下左右，每次只能向上、向左、向右、向下一下。&lt;br&gt;如果向下移动5行的话，可以用数字+快捷键&lt;code&gt;5j&lt;/code&gt;,那么向右移动5个就是&lt;code&gt;5l&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Vim" scheme="http://yoursite.com/categories/Vim/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux cp、ln命令的使用</title>
    <link href="http://yoursite.com/2018/11/13/Linux-cp%E3%80%81ln%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/13/Linux-cp、ln命令的使用/</id>
    <published>2018-11-13T10:17:07.000Z</published>
    <updated>2018-11-13T10:46:11.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>cp命令主要用于复制文件或目录<br><a id="more"></a></p><p><strong>语法</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> [<span class="keyword">options</span>] <span class="keyword">source</span> dest</span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br>复制文件</p><blockquote><p>cp 源文件 目标文件</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FQY<span class="variable">@bogon</span> ~<span class="regexp">/Desktop/edc</span></span><br><span class="line">╰─<span class="variable">$ </span>cp /Users/FQY/Desktop/<span class="number">1</span>.xlsx <span class="number">1</span>.xlsx</span><br><span class="line">╭─FQY<span class="variable">@bogon</span> ~<span class="regexp">/Desktop/edc</span></span><br><span class="line">╰─<span class="variable">$ </span>ll</span><br><span class="line">total <span class="number">72</span></span><br><span class="line">-rw-------@ <span class="number">1</span> FQY  staff    <span class="number">28</span>K <span class="number">11</span> <span class="number">13</span> <span class="number">15</span><span class="symbol">:</span><span class="number">14</span> <span class="number">1</span>.xlsx</span><br><span class="line">-rw-r--r--  <span class="number">1</span> FQY  staff     0B <span class="number">11</span> <span class="number">13</span> <span class="number">14</span><span class="symbol">:</span><span class="number">31</span> bm.conf</span><br></pre></td></tr></table></figure><p>复制目录下面的所有文件<br>使用指令”cp”将当前目录”test/“下的所有文件复制到新目录”newtest”下，输入如下命令</p><blockquote><p>$ cp –r test/ newtest </p></blockquote><p>参数说明：</p><blockquote><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件。</li></ul></blockquote><h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><p>Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。<br>当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>ln [参数][源文件或目录][目标文件或目录]</p></blockquote><p><strong>软链接</strong></p><ul><li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>2.软链接可以 跨文件系统 ，硬链接不可以</li><li>3.软链接可以对一个不存在的文件名进行链接</li><li>4.软链接可以对目录进行链接</li></ul><p><strong>硬链接</strong></p><ul><li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>2.不允许给目录创建硬链接</li><li>3.硬链接只有在同一个文件系统中才能创建</li></ul><p><strong>必要参数</strong></p><ul><li>-b 删除，覆盖以前建立的链接</li><li>-d 允许超级用户制作目录的硬链接</li><li>-f 强制执行</li><li>-i 交互模式，文件存在则提示用户是否覆盖</li><li>-n 把符号链接视为一般目录</li><li>-s 软链接(符号链接)</li><li>-v 显示详细的处理过程</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>创建硬链接</p><blockquote><p>ln destop/1.xlsx 1.xlsx</p></blockquote><p>创建软链接</p><blockquote><p>ln -s destop/1.xlsx 1.xlsx</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;cp&quot;&gt;&lt;a href=&quot;#cp&quot; class=&quot;headerlink&quot; title=&quot;cp&quot;&gt;&lt;/a&gt;cp&lt;/h2&gt;&lt;p&gt;cp命令主要用于复制文件或目录&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>git clone 子模块</title>
    <link href="http://yoursite.com/2018/11/09/git-clone-%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/11/09/git-clone-子模块/</id>
    <published>2018-11-09T07:20:04.000Z</published>
    <updated>2018-11-09T07:44:20.676Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做博客的时候，用到了其他的themes，因为配置，所以需要修改themes里面的代码，这时候有两种做法，一种是直接把代码下到本地，然后将代码直接拷贝项目中，另一种是用git做管理，项目中添加子项目。我先做的是先fork该theme一份，然后git我fork下来的这个项目。具体做法如下<br><a id="more"></a></p><h3 id="添加子项目"><a href="#添加子项目" class="headerlink" title="添加子项目"></a>添加子项目</h3><p><code>git submodule add [address]</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add <span class="string">https:</span><span class="comment">//github.com/chaconinc/DbConnector</span></span><br><span class="line">Cloning into <span class="string">'DbConnector'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">11</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">10</span>/<span class="number">10</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">11</span> (delta <span class="number">0</span>), reused <span class="number">11</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">11</span>/<span class="number">11</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure></p><p>默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 “DbConnector”。 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。</p><h3 id="自动初始化并更新仓库中的每一个子模块"><a href="#自动初始化并更新仓库中的每一个子模块" class="headerlink" title="自动初始化并更新仓库中的每一个子模块"></a>自动初始化并更新仓库中的每一个子模块</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --recursive <span class="string">https:</span><span class="comment">//github.com/chaconinc/MainProject</span></span><br><span class="line">Cloning into <span class="string">'MainProject'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">14</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">13</span>/<span class="number">13</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">14</span> (delta <span class="number">1</span>), reused <span class="number">13</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">14</span>/<span class="number">14</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule <span class="string">'DbConnector'</span> (<span class="string">https:</span><span class="comment">//github.com/chaconinc/DbConnector) registered for path 'DbConnector'</span></span><br><span class="line">Cloning into <span class="string">'DbConnector'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">11</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">10</span>/<span class="number">10</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">11</span> (delta <span class="number">0</span>), reused <span class="number">11</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">11</span>/<span class="number">11</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule path <span class="string">'DbConnector'</span>: checked out <span class="string">'c3f01dc8862123d317dd46284b05b6892c7b29bc'</span></span><br></pre></td></tr></table></figure><h3 id="在包含子模块的项目上工作"><a href="#在包含子模块的项目上工作" class="headerlink" title="在包含子模块的项目上工作"></a>在包含子模块的项目上工作</h3><p>如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，因为他们无法得到依赖的子模块改动。 那些改动只存在于我们本地的拷贝中。<br>为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。 git push 命令接受可以设置为 “check” 或 “on-demand” 的 –recurse-submodules 参数。 如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 push 操作失败。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git push <span class="comment">--recurse-submodules=check</span></span><br><span class="line">The following submodule paths <span class="keyword">contain</span> changes <span class="keyword">that</span> can</span><br><span class="line"><span class="keyword">not</span> be found <span class="keyword">on</span> any remote:</span><br><span class="line">  DbConnector</span><br><span class="line"></span><br><span class="line">Please <span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">    git push <span class="comment">--recurse-submodules=on-demand</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> cd <span class="keyword">to</span> <span class="keyword">the</span> path <span class="keyword">and</span> use</span><br><span class="line"></span><br><span class="line">    git push</span><br><span class="line"></span><br><span class="line"><span class="keyword">to</span> push them <span class="keyword">to</span> a remote.</span><br></pre></td></tr></table></figure></p><p>如你所见，它也给我们了一些有用的建议，指导接下来该如何做。 最简单的选项是进入每一个子模块中然后手动推送到远程仓库，确保它们能被外部访问到，之后再次尝试这次推送。</p><p>另一个选项是使用 “on-demand” 值，它会尝试为你这样做。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git push --recurse-submodules=<span class="keyword">on</span>-demand</span><br><span class="line">Pushing submodule <span class="string">'DbConnector'</span></span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">9</span>, done.</span><br><span class="line">Delta compression using <span class="keyword">up</span> <span class="keyword">to</span> <span class="number">8</span> threads.</span><br><span class="line">Compressing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">8</span>/<span class="number">8</span>), done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">9</span>/<span class="number">9</span>), <span class="number">917</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">9</span> (delta <span class="number">3</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To http<span class="variable">s:</span>//github.<span class="keyword">com</span>/chaconinc/DbConnector</span><br><span class="line">   c75e92a..<span class="number">82</span>d2ad3  stable -&gt; stable</span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">2</span>, done.</span><br><span class="line">Delta compression using <span class="keyword">up</span> <span class="keyword">to</span> <span class="number">8</span> threads.</span><br><span class="line">Compressing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), <span class="number">266</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">2</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To http<span class="variable">s:</span>//github.<span class="keyword">com</span>/chaconinc/MainProject</span><br><span class="line">   <span class="number">3</span>d6d338..<span class="number">9</span>a377d1  master -&gt; master</span><br></pre></td></tr></table></figure></p><p>如你所见，Git 进入到 DbConnector 模块中然后在推送主项目前推送了它</p><p>参考<br><a href="https://blog.csdn.net/xudailong_blog/article/details/79212220" target="_blank" rel="noopener">git clone 子模块（module）</a><br><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">git子模块</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做博客的时候，用到了其他的themes，因为配置，所以需要修改themes里面的代码，这时候有两种做法，一种是直接把代码下到本地，然后将代码直接拷贝项目中，另一种是用git做管理，项目中添加子项目。我先做的是先fork该theme一份，然后git我fork下来的这个项目。具体做法如下&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh 免密码登录</title>
    <link href="http://yoursite.com/2018/11/08/ssh%20%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2018/11/08/ssh 免密码登录/</id>
    <published>2018-11-08T06:56:06.000Z</published>
    <updated>2018-11-08T09:19:17.176Z</updated>
    
    <content type="html"><![CDATA[<p>通常的ssh登录有两种方式，一种是通过密码登录，一种是通过密钥登录，在实际使用过程中，会发现用密码登录很繁琐，需要每次都输入密码，这时候用密钥登录就会很方便。<br><a id="more"></a></p><h3 id="密码登录"><a href="#密码登录" class="headerlink" title="密码登录"></a>密码登录</h3><p><strong>格式</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@<span class="number">10.2</span><span class="meta">.8</span><span class="meta">.41</span></span><br><span class="line">root@<span class="number">10.2</span><span class="meta">.8</span><span class="meta">.41</span><span class="string">'s password:</span></span><br></pre></td></tr></table></figure></p><p>这时候输入密码就可以登录成功<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@<span class="number">10.2.8.41</span></span><br><span class="line">root@<span class="number">10.2.8.41</span>'s password:</span><br><span class="line">Last login: Thu Nov  <span class="number">1</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">05</span> <span class="number">2018</span> from <span class="number">10.2.0.33</span></span><br><span class="line"><span class="string">[root@hardwareupdate ~]</span>#</span><br></pre></td></tr></table></figure></p><h3 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h3><h5 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@host</span> ~]$ ssh-keygen -t rsa  &lt;== 建立密钥对</span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (<span class="regexp">/root/</span>.ssh/id_rsa): &lt;== 按 Enter</span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): &lt;== 输入密钥锁码，或直接按 Enter 留空</span><br><span class="line">Enter same passphrase <span class="string">again:</span> &lt;== 再输入一遍密钥锁码</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> <span class="regexp">/root/</span>.ssh/id_rsa. &lt;== 私钥</span><br><span class="line">Your <span class="keyword">public</span> key has been saved <span class="keyword">in</span> <span class="regexp">/root/</span>.ssh/id_rsa.pub. &lt;== 公钥</span><br><span class="line">The key fingerprint <span class="string">is:</span></span><br><span class="line"><span class="number">0</span><span class="string">f:</span><span class="string">d3:</span><span class="string">e7:</span><span class="number">1</span><span class="string">a:</span><span class="number">1</span><span class="string">c:</span><span class="string">bd:</span><span class="number">5</span><span class="string">c:</span><span class="number">03</span>:<span class="string">f1:</span><span class="number">19</span>:<span class="string">f1:</span><span class="number">22</span>:<span class="string">df:</span><span class="number">9</span><span class="string">b:</span><span class="string">cc:</span><span class="number">08</span> root<span class="meta">@host</span></span><br></pre></td></tr></table></figure><p>密钥生成以后，在.ssh下面会多两个文件，<code>id_rsa.pub</code>是公钥，<code>id_rsa</code>是私钥<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">[root@host <span class="string">.ssh</span>]$ <span class="keyword">ls</span></span><br><span class="line">id_rsa id_rsa.pub known_hosts config</span><br></pre></td></tr></table></figure></p><p>然后把公钥上传到服务器上，<code>scp</code>等同于<code>ssh-copy-id -i</code><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@A ~]# scp /root/.ssh/id_rsa.pub root@<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.181</span>:/root/.ssh/authorized_keys  </span><br><span class="line">root@<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.181</span><span class="string">'s password:</span></span><br><span class="line"><span class="string">id_rsa.pub                                    100%  223     0.2KB/s   00:00</span></span><br></pre></td></tr></table></figure></p><p>由于还没有免密码登录的，所以要输入一次服务器的密码登录,如果服务器没有authorized_keys文件，用touch authorized_keys 创建</p><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p>登录服务器，进入.ssh里面，给authorized_keys设置权限<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">[root@host <span class="string">.ssh</span>]$ <span class="keyword">ls</span></span><br><span class="line">authorized_keys  known_hosts</span><br><span class="line">[root@host <span class="string">.ssh</span>]$ chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></p><h5 id="本地配置权限"><a href="#本地配置权限" class="headerlink" title="本地配置权限"></a>本地配置权限</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">[root@host <span class="string">.ssh</span>]$ chmod 600 id_rsa</span><br></pre></td></tr></table></figure><p>这时候就可以用密钥登录了<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa root@<span class="number">192.168</span><span class="number">.100</span><span class="number">.39</span></span><br></pre></td></tr></table></figure></p><h3 id="用config去管理"><a href="#用config去管理" class="headerlink" title="用config去管理"></a>用config去管理</h3><p>用<code>ssh -i ~/.ssh/id_rsa root@192.168.100.39</code>登录时很繁琐的，这时候就可以用config去管理</p><p><strong>例如</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.ssh/config 文件示例</span></span><br><span class="line"><span class="comment"># Host 参数标明以下内容仅适用于访问 236 主机时适用，Host 参数本身只是一个入口字符串；</span></span><br><span class="line">Host fuwuqi</span><br><span class="line">　　HostName 192.168.99.236</span><br><span class="line">　<span class="built_in">　User </span>git</span><br><span class="line">　<span class="built_in">　Port </span>22</span><br><span class="line">　　IdentityFile ~/.ssh/rsa-michael-236</span><br><span class="line">Host github</span><br><span class="line">　　HostName 192.168.99.3</span><br><span class="line">　<span class="built_in">　User </span>root</span><br><span class="line">　<span class="built_in">　Port </span>22</span><br><span class="line">　　IdentityFile ~/.ssh/rsa-3root-michael</span><br></pre></td></tr></table></figure></p><p>配置完这些以后，就可以用这个登录了<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~] ssh fuwuqi</span><br><span class="line">Last login: Thu Nov  8 09:40:00 2018 <span class="keyword">from</span> 192.168.99.236</span><br><span class="line">Welcome <span class="keyword">to</span> Alibaba Cloud Elastic Compute<span class="built_in"> Service </span>!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常的ssh登录有两种方式，一种是通过密码登录，一种是通过密钥登录，在实际使用过程中，会发现用密码登录很繁琐，需要每次都输入密码，这时候用密钥登录就会很方便。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7 安装zsh和oh-my-zsh</title>
    <link href="http://yoursite.com/2018/11/06/centos7-%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/"/>
    <id>http://yoursite.com/2018/11/06/centos7-安装zsh和oh-my-zsh/</id>
    <published>2018-11-06T08:53:06.000Z</published>
    <updated>2018-11-06T08:55:33.984Z</updated>
    
    <content type="html"><![CDATA[<p>目前的centos系统默认的shell还是bash，但是zsh被称为终极shell，国外有个程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」，Github 网址是：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a> 有了这玩意zsh用起来直接就变成神器了。<br><a id="more"></a></p><h4 id="查看系统当前的shell"><a href="#查看系统当前的shell" class="headerlink" title="查看系统当前的shell"></a>查看系统当前的shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>返回的结果是:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure></p><h3 id="查看bin下是否有zsh包"><a href="#查看bin下是否有zsh包" class="headerlink" title="查看bin下是否有zsh包"></a>查看bin下是否有zsh包</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span><br><span class="line">返回的结果是:</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br><span class="line">PS.默认没有安装zsh</span><br></pre></td></tr></table></figure><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> -y zsh</span><br></pre></td></tr></table></figure><p>然后在输入<code>cat /etc/shells</code>查看</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/bin/</span>sh</span><br><span class="line"><span class="meta-keyword">/bin/</span>bash</span><br><span class="line"><span class="meta-keyword">/sbin/</span>nologin</span><br><span class="line"><span class="meta-keyword">/usr/</span>bin/sh</span><br><span class="line"><span class="meta-keyword">/usr/</span>bin/bash</span><br><span class="line"><span class="meta-keyword">/usr/</span>sbin/nologin</span><br><span class="line"><span class="meta-keyword">/bin/</span>zsh</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>将zsh设置成默认的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s <span class="regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/4060631-102e57784c72f94b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/708/format/webp" alt=""><br>设置完以后不会立即生效，需要重启方能生效，所以我们可以配置完oh-my-zsh以后再重启</p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/robbyrussell/</span>oh-my-zsh<span class="regexp">/raw/m</span>aster<span class="regexp">/tools/i</span>nstall.sh -O - | sh</span><br></pre></td></tr></table></figure><p>如果出现以下界面表示成功</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__                                     __   </span><br><span class="line">  ____  <span class="regexp">/ /</span>_     ____ ___  __  __   ____  _____<span class="regexp">/ /</span>_  </span><br><span class="line"> <span class="regexp">/ __ \/</span> __ \   <span class="regexp">/ __ `__ \/</span> <span class="regexp">/ /</span> <span class="regexp">/  /</span>_  <span class="regexp">/ /</span> ___/ __ \ </span><br><span class="line"><span class="regexp">/ /</span>_<span class="regexp">/ /</span> <span class="regexp">/ /</span> <span class="regexp">/  /</span> <span class="regexp">/ /</span> <span class="regexp">/ /</span> <span class="regexp">/ /</span>_<span class="regexp">/ /</span>    <span class="regexp">/ /</span>_(__  ) <span class="regexp">/ /</span> / </span><br><span class="line">\____<span class="regexp">/_/</span> <span class="regexp">/_/</span>  <span class="regexp">/_/</span> <span class="regexp">/_/</span> <span class="regexp">/_/\_</span>_, <span class="regexp">/    /</span>___<span class="regexp">/____/</span>_<span class="regexp">/ /</span>_/  </span><br><span class="line">                        <span class="regexp">/____/</span>                       ....is now installed!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line"></span><br><span class="line">p.s. Follow us at <span class="string">https:</span><span class="comment">//twitter.com/ohmyzsh.</span></span><br><span class="line"></span><br><span class="line">p.p.s. Get stickers and t-shirts at <span class="string">http:</span><span class="comment">//shop.planetargon.com.</span></span><br></pre></td></tr></table></figure><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p><em>主题链接地址</em> <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">oh-my-zsh主题</a></p><p>目前我使用的主题是<code>bira</code><br><img src="https://cloud.githubusercontent.com/assets/2618447/6316716/51a0708e-ba00-11e4-8664-11a804f2fe3f.png" alt=""></p><p><strong>修改主题</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>vim ~<span class="regexp">/.zshrc</span></span><br></pre></td></tr></table></figure><p>刚安装oh-my-zsh默认的主题是robbyrussell，将<code>ZSH_THEME</code>改成<code>bira</code></p><p><strong>更新配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.zshrc</span></span><br></pre></td></tr></table></figure><p>然后重启, 使zsh配置生效</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前的centos系统默认的shell还是bash，但是zsh被称为终极shell，国外有个程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」，Github 网址是：&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/robbyrussell/oh-my-zsh&lt;/a&gt; 有了这玩意zsh用起来直接就变成神器了。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>对Python装饰器的一些理解</title>
    <link href="http://yoursite.com/2018/10/31/%E5%AF%B9Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/10/31/对Python装饰器的一些理解/</id>
    <published>2018-10-31T10:13:52.000Z</published>
    <updated>2018-11-01T06:39:44.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-装饰器的定义"><a href="#1-装饰器的定义" class="headerlink" title="1.装饰器的定义"></a>1.装饰器的定义</h2><p>装饰器是对在运行期间对函数进行一些外部功能的扩展。也就是在其他函数不需要做任何代码变动的前提下增加额外功能。<br><a id="more"></a></p><h2 id="2-装饰器的应用场景"><a href="#2-装饰器的应用场景" class="headerlink" title="2.装饰器的应用场景"></a>2.装饰器的应用场景</h2><p>插入日志、性能测试、事务处理、缓存、权限校验等场景</p><p><strong>例如</strong><br>我们在接收请求的时候多会看是否包含某一个元素。比如查看是否包含有code,如果有code，就打印错误并且ruturn返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">requestedCode</span><span class="params">(*params)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrappered</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'%s is running'</span> % func.__name__)</span><br><span class="line">            <span class="keyword">for</span> code <span class="keyword">in</span> params:</span><br><span class="line">                print(<span class="string">'错误错误'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, *kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrappered</span><br><span class="line">    <span class="keyword">return</span> _wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">@requestedCode('code')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am world'</span>)</span><br><span class="line">    </span><br><span class="line">print(hello_world())</span><br></pre></td></tr></table></figure><h2 id="3-装饰器使用-functools-wraps-的理由"><a href="#3-装饰器使用-functools-wraps-的理由" class="headerlink" title="3.装饰器使用 @functools.wraps 的理由"></a>3.装饰器使用 @functools.wraps 的理由</h2><p>Python 中使用装饰器对在运行期对函数进行一些外部功能的扩展。但是在使用过程中，由于装饰器的加入导致解释器认为函数本身发生了改变，在某些情况下——比如测试时——会导致一些问题。Python 通过 functool.wraps 为我们解决了这个问题：在编写装饰器时，在实现前加入 @functools.wraps(func) 可以保证装饰器不会对被装饰函数造成影响。比如，在 Flask 中，我们要自己重写 login_required 装饰器，但不想影响被装饰器装饰的方法，则 login_required 装饰器本身可以写成下面的样子：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def login_required_(<span class="function"><span class="keyword">func</span>):</span></span><br><span class="line">    <span class="symbol">@wraps</span>(<span class="function"><span class="keyword">func</span>)</span></span><br><span class="line">    def decorated_view(*args, **kwargs):</span><br><span class="line">        <span class="keyword">if</span> current_app.login_manager._login_disabled:</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(*args, **kwargs)</span></span></span><br><span class="line">        elif <span class="literal">not</span> current_user.is_authenticated:</span><br><span class="line">            <span class="meta"># return current_app.login_manager.unauthorized()</span></span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">"login.loginPage"</span>, <span class="keyword">next</span>=request.url))</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(*args, **kwargs)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorated_view</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/26930016" target="_blank" rel="noopener">如何理解Python装饰器？</a><br><a href="http://blog.csdn.net/tiwoo/article/details/50835337" target="_blank" rel="noopener">Python 中实现装饰器时使用 @functools.wraps 的理由</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-装饰器的定义&quot;&gt;&lt;a href=&quot;#1-装饰器的定义&quot; class=&quot;headerlink&quot; title=&quot;1.装饰器的定义&quot;&gt;&lt;/a&gt;1.装饰器的定义&lt;/h2&gt;&lt;p&gt;装饰器是对在运行期间对函数进行一些外部功能的扩展。也就是在其他函数不需要做任何代码变动的前提下增加额外功能。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python基础学习----切片、迭代、列表生成式</title>
    <link href="http://yoursite.com/2018/10/31/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%88%87%E7%89%87%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/31/Python基础学习-切片、迭代、列表生成式/</id>
    <published>2018-10-31T10:13:32.000Z</published>
    <updated>2018-11-01T06:43:22.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>通常我们取list里面的元素会这样写<br><a id="more"></a><br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="symbol">'zhangsan'</span>,<span class="symbol">'lisi'</span>,<span class="symbol">'wangwu'</span>]</span><br><span class="line"><span class="built_in">list</span>[<span class="number">0</span>] <span class="built_in">list</span>[<span class="number">1</span>] <span class="built_in">list</span>[<span class="number">2</span>]</span><br><span class="line">取n个的话：</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">   <span class="built_in">list</span>[i]</span><br></pre></td></tr></table></figure></p><p>但是这样用循环很麻烦，可以这样做</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment">#这样取的是从0开始，往后数3个数</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment">#这样取的是从1开始，往后数2个数</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>   如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代。在Python中，迭代是通过for … in来完成的<br><br>    在Python不是都是迭代的，所以有时候需要判断是否可以迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>列表生成式是Python中内置的非常简单却非常强大的可以用来创建list的生成式。<br>例如要生成list <code>[1,2,3,4,5,6,7,8,9]</code>,可以用<code>list(range(1,10))</code><br>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？<br><br>方法一是循环：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; L = []</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; for x in range(<span class="number">1</span>, <span class="number">11</span>)<span class="symbol">:</span></span><br><span class="line">...    L.append(x * x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; L</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>方法二：列表生成式</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">得出：</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><p>列表生成式还有其他的用法<br><br>*在for循环后面加if判断语句<br><br>例如：仅偶数的平方</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(<span class="number">1</span>,<span class="number">11</span>) if x % <span class="number">2</span> == <span class="number">0</span> ]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>*使用两层循环,生成全排列</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">m</span> + n for m in <span class="symbol">'ABC</span>' for n in <span class="symbol">'XYZ</span>']</span><br><span class="line">[<span class="symbol">'AX</span>', <span class="symbol">'AY</span>', <span class="symbol">'AZ</span>', <span class="symbol">'BX</span>', <span class="symbol">'BY</span>', <span class="symbol">'BZ</span>', <span class="symbol">'CX</span>', <span class="symbol">'CY</span>', <span class="symbol">'CZ</span>']</span><br></pre></td></tr></table></figure><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>判断是否可以迭代，在用列表生成式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">L = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="number">18</span>, <span class="string">'Apple'</span>, <span class="keyword">None</span>]</span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> L <span class="keyword">if</span> isinstance(x,str) == <span class="keyword">True</span>]</span><br><span class="line">结果：</span><br><span class="line">[<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'Apple'</span>]</span><br></pre></td></tr></table></figure><p>注：文章是在廖雪峰大大的网站学习后写下的学习摘要。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h2&gt;&lt;p&gt;通常我们取list里面的元素会这样写&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask 上下文全局变量</title>
    <link href="http://yoursite.com/2018/10/31/Flask-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/10/31/Flask-上下文全局变量/</id>
    <published>2018-10-31T10:13:21.000Z</published>
    <updated>2018-11-01T06:41:36.829Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">上下文</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">current_app</td><td style="text-align:left">程序上下文</td><td style="text-align:left">当前激活程序的程序实例</td></tr><tr><td style="text-align:left">g</td><td style="text-align:left">程序上下文</td><td style="text-align:left">处理请求时用作临时存储的对象，每次请求都会重设这个变量</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">请求上下文</td><td style="text-align:left">请求对象，封装了客户端发出的HTTP请求中的内容</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">请求上下文</td><td style="text-align:left">用户会话，用于存储请求之间需要记住的值的词典</td></tr></tbody></table><p>Flask 在分发请求之前激活(或推送)程序和请求上下文，请求处理完成后再将其删除。程 序上下文被推送后，就可以在线程中使用 current_app 和 g 变量。类似地，请求上下文被 推送后，就可以使用 request 和 session 变量。如果使用这些变量时我们没有激活程序上 下文或请求上下文，就会导致错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;变量名&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;上下文&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/t
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>flask下 gunicorn在Python中的使用</title>
    <link href="http://yoursite.com/2018/10/31/flask%E4%B8%8B-gunicorn%E5%9C%A8Python%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/flask下-gunicorn在Python中的使用/</id>
    <published>2018-10-31T10:13:09.000Z</published>
    <updated>2018-11-01T06:41:51.737Z</updated>
    
    <content type="html"><![CDATA[<p>gunicorn使用非常简单，并且也非常好用，所以需要写一下自己的理解。😀<br><a id="more"></a></p><p>使用gunicorn的使用，需先安装flask,安装方法如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> flask</span><br></pre></td></tr></table></figure><p>下面为一个简单的用flask写的web服务,main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="keyword">True</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>gunicorn的作用就是用命令行来启动服务器。安装如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> gunicorn</span><br></pre></td></tr></table></figure><p>最简单的启动命令为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><p> 其中code就是指main.py.app就是那个wsgifunc的名字。<br> 这样运行的话， gunicorn 默认作为一个监听 127.0.0.1:8000 的web server，可以在本机通过： <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 访问。<br>如果要通过网络访问，则需要绑定不同的地址（也可以同时设置监听端口），设置0.0.0.0可以监听到所有ip的请求：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8080</span> <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><p>在多核服务器上，为了支持更多的并发访问并充分利用资源，可以使用更多的 gunicorn 进程：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><p>两者结合到一起就是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8080</span> <span class="selector-tag">main</span><span class="selector-pseudo">:app</span></span><br></pre></td></tr></table></figure></p><h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：<br></h4><ul><li>-b 表示 gunicorn 开发的访问地址 <br></li><li>-w 表示开启多少个线程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gunicorn使用非常简单，并且也非常好用，所以需要写一下自己的理解。😀&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python之random的send()的使用</title>
    <link href="http://yoursite.com/2018/10/31/Python%E4%B9%8Brandom%E7%9A%84send-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/Python之random的send-的使用/</id>
    <published>2018-10-31T10:12:55.000Z</published>
    <updated>2018-11-01T06:43:42.386Z</updated>
    
    <content type="html"><![CDATA[<p>对于send方法的定义，在一篇文章中看到这样一个定义，发现很符合这个解释<br><a id="more"></a><br><code>seed( ) 用于指定随机数生成时所用算法开始的整数值，如果使用相同的seed( )值，则每次生成的随即数都相同，如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同</code></p><p>情况下面的几行代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">random</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random 5 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random 10 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"random 7 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br><span class="line"><span class="built_in">random</span>.seed(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"random 5 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random <span class="number">5</span> is  <span class="number">0.6229016948897019</span></span><br><span class="line">random <span class="number">10</span> is  <span class="number">0.5714025946899135</span></span><br><span class="line">random <span class="number">7</span> is  <span class="number">0.32383276483316237</span></span><br><span class="line">random <span class="number">5</span> is  <span class="number">0.6229016948897019</span></span><br></pre></td></tr></table></figure><p>你会发现当seed()值是一样的时候，输出的结果是一样的。而不一样的值得出的结果不一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于send方法的定义，在一篇文章中看到这样一个定义，发现很符合这个解释&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>python之random的random的使用</title>
    <link href="http://yoursite.com/2018/10/31/python%E4%B9%8Brandom%E7%9A%84random%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/python之random的random的使用/</id>
    <published>2018-10-31T10:12:33.000Z</published>
    <updated>2018-11-01T06:43:30.522Z</updated>
    
    <content type="html"><![CDATA[<p>random.random()生成0和1之间的随机浮点数float<br><a id="more"></a><br>例如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">"random 7 is "</span>, <span class="built_in">random</span>.<span class="built_in">random</span>())</span><br></pre></td></tr></table></figure><p>运行结果为：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random <span class="number">7</span> is  <span class="number">0.32383276483316237</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;random.random()生成0和1之间的随机浮点数float&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>利用tablib、make_response 进行文件的下载</title>
    <link href="http://yoursite.com/2018/10/31/%E5%88%A9%E7%94%A8tablib%E3%80%81make-response-%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/10/31/利用tablib、make-response-进行文件的下载/</id>
    <published>2018-10-31T10:12:23.000Z</published>
    <updated>2018-11-01T06:40:12.180Z</updated>
    
    <content type="html"><![CDATA[<p>tablib 主要作用是将数据导出为各种不同的格式，包括excel，json，html，yaml，csv，tsv等格式。使用起来也非常简单。<br><a id="more"></a></p><p>tablib的下载<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> tablib</span><br></pre></td></tr></table></figure></p><p>下面就是文件下载的代码<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import tablib</span><br><span class="line">from flask import make_response</span><br><span class="line">def file_download():</span><br><span class="line"> dataset1 = tablib.<span class="symbol">Dataset</span>()</span><br><span class="line">    header1 = (<span class="string">'ID'</span>, <span class="string">'Name'</span>, <span class="string">'Tel'</span>, <span class="string">'Age'</span>)</span><br><span class="line">    dataset1.headers = header1</span><br><span class="line">    dataset1.append([<span class="number">1</span>, <span class="string">'zhangsands'</span>, <span class="number">13711111111</span>, <span class="number">16</span>])</span><br><span class="line">    dataset1.append([<span class="number">2</span>, <span class="string">'lisiasfasd阿斯顿发gwus'</span>, <span class="number">13911111111</span>, <span class="number">20</span>])</span><br><span class="line">    dataset1.append([<span class="number">4</span>, <span class="string">'zhao发送到li2u'</span>, <span class="number">15811111111</span>, <span class="number">25</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    header2 = (<span class="string">'ID'</span>, <span class="string">'Name'</span>, <span class="string">'Tel'</span>, <span class="string">'Age'</span>)</span><br><span class="line">    data2 = [</span><br><span class="line">        [<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="number">13711111111</span>, <span class="number">16</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="string">'lisi'</span>, <span class="number">13811111111</span>, <span class="number">18</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="string">'wangwu'</span>, <span class="number">13911111111</span>, <span class="number">20</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="string">'zhaoliu'</span>, <span class="number">15811111111</span>, <span class="number">25</span>]</span><br><span class="line">    ]</span><br><span class="line">    dataset2 = tablib.<span class="symbol">Dataset</span>(*data2, headers=header2)</span><br><span class="line"></span><br><span class="line">    dataset1.title = <span class="string">'dataset1'</span>  # 设置<span class="symbol">Excel</span>中表单的名称</span><br><span class="line">    dataset2.title = <span class="string">'dataset2'</span></span><br><span class="line">    </span><br><span class="line">      # 如果有多个sheet表单，使用<span class="symbol">DataBook</span>就可以了</span><br><span class="line">    myDataBook = tablib.<span class="symbol">Databook</span>((dataset1, dataset2))</span><br><span class="line">    ds = myDataBook.export(<span class="string">'xlsx'</span>)</span><br><span class="line"></span><br><span class="line">    response = make_response(ds)</span><br><span class="line">    response.headers[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=&#123;&#125;'</span>.format(<span class="string">'dhel.xlsx'</span>)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure></p><p>引用：<br><a href="https://blog.csdn.net/calling_wisdom/article/details/41447791" target="_blank" rel="noopener">Python tablib模块</a><br><a href="http://docs.python-tablib.org/en/master/" target="_blank" rel="noopener">tablib文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tablib 主要作用是将数据导出为各种不同的格式，包括excel，json，html，yaml，csv，tsv等格式。使用起来也非常简单。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>pip 升级所遇到的问题</title>
    <link href="http://yoursite.com/2018/10/31/pip-%E5%8D%87%E7%BA%A7%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/31/pip-升级所遇到的问题/</id>
    <published>2018-10-31T10:12:11.000Z</published>
    <updated>2018-11-01T06:43:03.091Z</updated>
    
    <content type="html"><![CDATA[<p>pip的原有版本是9.0.1，最近发现pip可以升级了，想到pip升级到10以上用了下面各种方法，都不管用,如下：<br><a id="more"></a><br>用了mac/limux方法 :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> pip <span class="keyword">install</span> -U pip </span><br><span class="line">easy_install  <span class="comment">--upgrade pip</span></span><br><span class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure></p><p>用了windows 方法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br><span class="line">python -m pip <span class="keyword">install</span> -U pip</span><br></pre></td></tr></table></figure></p><p>最后从源头做起，里面搞定<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">curl </span><span class="string">https:</span>//<span class="string">bootstrap.</span><span class="string">pypa.</span><span class="string">io/</span><span class="built_in">get-pip.py</span> | <span class="string">python3</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pip的原有版本是9.0.1，最近发现pip可以升级了，想到pip升级到10以上用了下面各种方法，都不管用,如下：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>pip安装时ReadTimeoutError解决办法</title>
    <link href="http://yoursite.com/2018/10/31/pip%E5%AE%89%E8%A3%85%E6%97%B6ReadTimeoutError%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/31/pip安装时ReadTimeoutError解决办法/</id>
    <published>2018-10-31T10:12:00.000Z</published>
    <updated>2018-11-01T06:43:08.586Z</updated>
    
    <content type="html"><![CDATA[<p>有一个本地服务器，网速很慢，下载老是出错，出现<br><a id="more"></a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip._vendor<span class="selector-class">.urllib3</span><span class="selector-class">.exceptions</span><span class="selector-class">.ReadTimeoutError</span>: </span><br><span class="line"><span class="function"><span class="title">HTTPSConnectionPool</span><span class="params">(host=<span class="string">'files.pythonhosted.org'</span>, port=<span class="number">443</span>)</span></span>: Read timed out.</span><br></pre></td></tr></table></figure></p><p>经过google，发现用下面的内容就可以完美解决<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --<span class="section">default</span>-timeout=<span class="number">100</span> install gevent</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个本地服务器，网速很慢，下载老是出错，出现&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
</feed>
