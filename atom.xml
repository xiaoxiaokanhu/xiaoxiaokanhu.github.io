<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小看护</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-01T06:39:44.383Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小小看护</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对Python装饰器的一些理解</title>
    <link href="http://yoursite.com/2018/10/31/%E5%AF%B9Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/10/31/对Python装饰器的一些理解/</id>
    <published>2018-10-31T10:13:52.000Z</published>
    <updated>2018-11-01T06:39:44.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-装饰器的定义"><a href="#1-装饰器的定义" class="headerlink" title="1.装饰器的定义"></a>1.装饰器的定义</h2><p>装饰器是对在运行期间对函数进行一些外部功能的扩展。也就是在其他函数不需要做任何代码变动的前提下增加额外功能。<br><a id="more"></a></p><h2 id="2-装饰器的应用场景"><a href="#2-装饰器的应用场景" class="headerlink" title="2.装饰器的应用场景"></a>2.装饰器的应用场景</h2><p>插入日志、性能测试、事务处理、缓存、权限校验等场景</p><p><strong>例如</strong><br>我们在接收请求的时候多会看是否包含某一个元素。比如查看是否包含有code,如果有code，就打印错误并且ruturn返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def requestedCode(*params):</span><br><span class="line">    def _wrapper(func):</span><br><span class="line">        def wrappered(*args, **kwargs):</span><br><span class="line">            print(&apos;%s is running&apos; % func.__name__)</span><br><span class="line">            for code in params:</span><br><span class="line">                print(&apos;错误错误&apos;)</span><br><span class="line">                return</span><br><span class="line">            return func(*args, *kwargs)</span><br><span class="line"></span><br><span class="line">        return wrappered</span><br><span class="line">    return _wrapper</span><br><span class="line">    </span><br><span class="line">@requestedCode(&apos;code&apos;)</span><br><span class="line">def hello_world():</span><br><span class="line">    print(&apos;i am world&apos;)</span><br><span class="line">    </span><br><span class="line">print(hello_world())</span><br></pre></td></tr></table></figure><h2 id="3-装饰器使用-functools-wraps-的理由"><a href="#3-装饰器使用-functools-wraps-的理由" class="headerlink" title="3.装饰器使用 @functools.wraps 的理由"></a>3.装饰器使用 @functools.wraps 的理由</h2><p>Python 中使用装饰器对在运行期对函数进行一些外部功能的扩展。但是在使用过程中，由于装饰器的加入导致解释器认为函数本身发生了改变，在某些情况下——比如测试时——会导致一些问题。Python 通过 functool.wraps 为我们解决了这个问题：在编写装饰器时，在实现前加入 @functools.wraps(func) 可以保证装饰器不会对被装饰函数造成影响。比如，在 Flask 中，我们要自己重写 login_required 装饰器，但不想影响被装饰器装饰的方法，则 login_required 装饰器本身可以写成下面的样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def login_required_(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def decorated_view(*args, **kwargs):</span><br><span class="line">        if current_app.login_manager._login_disabled:</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line">        elif not current_user.is_authenticated:</span><br><span class="line">            # return current_app.login_manager.unauthorized()</span><br><span class="line">            return redirect(url_for(&quot;login.loginPage&quot;, next=request.url))</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    return decorated_view</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/26930016" target="_blank" rel="noopener">如何理解Python装饰器？</a><br><a href="http://blog.csdn.net/tiwoo/article/details/50835337" target="_blank" rel="noopener">Python 中实现装饰器时使用 @functools.wraps 的理由</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-装饰器的定义&quot;&gt;&lt;a href=&quot;#1-装饰器的定义&quot; class=&quot;headerlink&quot; title=&quot;1.装饰器的定义&quot;&gt;&lt;/a&gt;1.装饰器的定义&lt;/h2&gt;&lt;p&gt;装饰器是对在运行期间对函数进行一些外部功能的扩展。也就是在其他函数不需要做任何代码变动的前提下增加额外功能。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python基础学习----切片、迭代、列表生成式</title>
    <link href="http://yoursite.com/2018/10/31/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%88%87%E7%89%87%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/31/Python基础学习-切片、迭代、列表生成式/</id>
    <published>2018-10-31T10:13:32.000Z</published>
    <updated>2018-11-01T06:43:22.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>通常我们取list里面的元素会这样写<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;]</span><br><span class="line">list[0] list[1] list[2]</span><br><span class="line">取n个的话：</span><br><span class="line">for i in range(3):</span><br><span class="line">   list[i]</span><br></pre></td></tr></table></figure></p><p>但是这样用循环很麻烦，可以这样做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list[0:3]  #这样取的是从0开始，往后数3个数</span><br><span class="line">list[1:3]  #这样取的是从1开始，往后数2个数</span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>   如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代。在Python中，迭代是通过for … in来完成的<br><br>    在Python不是都是迭代的，所以有时候需要判断是否可以迭代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable) # str是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([1,2,3], Iterable) # list是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Iterable) # 整数是否可迭代</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>列表生成式是Python中内置的非常简单却非常强大的可以用来创建list的生成式。<br>例如要生成list <code>[1,2,3,4,5,6,7,8,9]</code>,可以用<code>list(range(1,10))</code><br>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？<br><br>方法一是循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = []</span><br><span class="line">&gt;&gt;&gt; for x in range(1, 11):</span><br><span class="line">...    L.append(x * x)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>方法二：列表生成式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(1,10)]</span><br><span class="line">得出：</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure><p>列表生成式还有其他的用法<br><br>*在for循环后面加if判断语句<br><br>例如：仅偶数的平方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x for x in range(1,11) if x % 2 == 0 ]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br></pre></td></tr></table></figure><p>*使用两层循环,生成全排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</span><br><span class="line">[&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;]</span><br></pre></td></tr></table></figure><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>判断是否可以迭代，在用列表生成式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">L = [&apos;Hello&apos;, &apos;World&apos;, 18, &apos;Apple&apos;, None]</span><br><span class="line">[x for x in L if isinstance(x,str) == True]</span><br><span class="line">结果：</span><br><span class="line">[&apos;Hello&apos;, &apos;World&apos;, &apos;Apple&apos;]</span><br></pre></td></tr></table></figure><p>注：文章是在廖雪峰大大的网站学习后写下的学习摘要。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h2&gt;&lt;p&gt;通常我们取list里面的元素会这样写&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask 上下文全局变量</title>
    <link href="http://yoursite.com/2018/10/31/Flask-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/10/31/Flask-上下文全局变量/</id>
    <published>2018-10-31T10:13:21.000Z</published>
    <updated>2018-11-01T06:41:36.829Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">上下文</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">current_app</td><td style="text-align:left">程序上下文</td><td style="text-align:left">当前激活程序的程序实例</td></tr><tr><td style="text-align:left">g</td><td style="text-align:left">程序上下文</td><td style="text-align:left">处理请求时用作临时存储的对象，每次请求都会重设这个变量</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">请求上下文</td><td style="text-align:left">请求对象，封装了客户端发出的HTTP请求中的内容</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">请求上下文</td><td style="text-align:left">用户会话，用于存储请求之间需要记住的值的词典</td></tr></tbody></table><p>Flask 在分发请求之前激活(或推送)程序和请求上下文，请求处理完成后再将其删除。程 序上下文被推送后，就可以在线程中使用 current_app 和 g 变量。类似地，请求上下文被 推送后，就可以使用 request 和 session 变量。如果使用这些变量时我们没有激活程序上 下文或请求上下文，就会导致错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;变量名&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;上下文&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/t
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>flask下 gunicorn在Python中的使用</title>
    <link href="http://yoursite.com/2018/10/31/flask%E4%B8%8B-gunicorn%E5%9C%A8Python%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/flask下-gunicorn在Python中的使用/</id>
    <published>2018-10-31T10:13:09.000Z</published>
    <updated>2018-11-01T06:41:51.737Z</updated>
    
    <content type="html"><![CDATA[<p>gunicorn使用非常简单，并且也非常好用，所以需要写一下自己的理解。😀<br><a id="more"></a></p><p>使用gunicorn的使用，需先安装flask,安装方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><p>下面为一个简单的用flask写的web服务,main.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return &apos;hello world&apos;</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.debug = True</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>gunicorn的作用就是用命令行来启动服务器。安装如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><p>最简单的启动命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn main:app</span><br></pre></td></tr></table></figure></p><p> 其中code就是指main.py.app就是那个wsgifunc的名字。<br> 这样运行的话， gunicorn 默认作为一个监听 127.0.0.1:8000 的web server，可以在本机通过： <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 访问。<br>如果要通过网络访问，则需要绑定不同的地址（也可以同时设置监听端口），设置0.0.0.0可以监听到所有ip的请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -b 0.0.0.0:8080 main:app</span><br></pre></td></tr></table></figure></p><p>在多核服务器上，为了支持更多的并发访问并充分利用资源，可以使用更多的 gunicorn 进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w 4 main:app</span><br></pre></td></tr></table></figure></p><p>两者结合到一起就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w 4 -b 0.0.0.0:8080 main:app</span><br></pre></td></tr></table></figure></p><h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：<br></h4><ul><li>-b 表示 gunicorn 开发的访问地址 <br></li><li>-w 表示开启多少个线程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gunicorn使用非常简单，并且也非常好用，所以需要写一下自己的理解。😀&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python之random的send()的使用</title>
    <link href="http://yoursite.com/2018/10/31/Python%E4%B9%8Brandom%E7%9A%84send-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/Python之random的send-的使用/</id>
    <published>2018-10-31T10:12:55.000Z</published>
    <updated>2018-11-01T06:43:42.386Z</updated>
    
    <content type="html"><![CDATA[<p>对于send方法的定义，在一篇文章中看到这样一个定义，发现很符合这个解释<br><a id="more"></a><br><code>seed( ) 用于指定随机数生成时所用算法开始的整数值，如果使用相同的seed( )值，则每次生成的随即数都相同，如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同</code></p><p>情况下面的几行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">random.seed(5)</span><br><span class="line">print (&quot;random 5 is &quot;, random.random())</span><br><span class="line">random.seed(10)</span><br><span class="line">print (&quot;random 10 is &quot;, random.random())</span><br><span class="line">random.seed(7)</span><br><span class="line">print (&quot;random 7 is &quot;, random.random())</span><br><span class="line">random.seed(5)</span><br><span class="line">print(&quot;random 5 is &quot;, random.random())</span><br></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random 5 is  0.6229016948897019</span><br><span class="line">random 10 is  0.5714025946899135</span><br><span class="line">random 7 is  0.32383276483316237</span><br><span class="line">random 5 is  0.6229016948897019</span><br></pre></td></tr></table></figure><p>你会发现当seed()值是一样的时候，输出的结果是一样的。而不一样的值得出的结果不一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于send方法的定义，在一篇文章中看到这样一个定义，发现很符合这个解释&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>python之random的random的使用</title>
    <link href="http://yoursite.com/2018/10/31/python%E4%B9%8Brandom%E7%9A%84random%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/python之random的random的使用/</id>
    <published>2018-10-31T10:12:33.000Z</published>
    <updated>2018-11-01T06:43:30.522Z</updated>
    
    <content type="html"><![CDATA[<p>random.random()生成0和1之间的随机浮点数float<br><a id="more"></a><br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print (&quot;random 7 is &quot;, random.random())</span><br></pre></td></tr></table></figure><p>运行结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random 7 is  0.32383276483316237</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;random.random()生成0和1之间的随机浮点数float&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>利用tablib、make_response 进行文件的下载</title>
    <link href="http://yoursite.com/2018/10/31/%E5%88%A9%E7%94%A8tablib%E3%80%81make-response-%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/10/31/利用tablib、make-response-进行文件的下载/</id>
    <published>2018-10-31T10:12:23.000Z</published>
    <updated>2018-11-01T06:40:12.180Z</updated>
    
    <content type="html"><![CDATA[<p>tablib 主要作用是将数据导出为各种不同的格式，包括excel，json，html，yaml，csv，tsv等格式。使用起来也非常简单。<br><a id="more"></a></p><p>tablib的下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tablib</span><br></pre></td></tr></table></figure></p><p>下面就是文件下载的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import tablib</span><br><span class="line">from flask import make_response</span><br><span class="line">def file_download():</span><br><span class="line"> dataset1 = tablib.Dataset()</span><br><span class="line">    header1 = (&apos;ID&apos;, &apos;Name&apos;, &apos;Tel&apos;, &apos;Age&apos;)</span><br><span class="line">    dataset1.headers = header1</span><br><span class="line">    dataset1.append([1, &apos;zhangsands&apos;, 13711111111, 16])</span><br><span class="line">    dataset1.append([2, &apos;lisiasfasd阿斯顿发gwus&apos;, 13911111111, 20])</span><br><span class="line">    dataset1.append([4, &apos;zhao发送到li2u&apos;, 15811111111, 25])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    header2 = (&apos;ID&apos;, &apos;Name&apos;, &apos;Tel&apos;, &apos;Age&apos;)</span><br><span class="line">    data2 = [</span><br><span class="line">        [1, &apos;zhangsan&apos;, 13711111111, 16],</span><br><span class="line">        [2, &apos;lisi&apos;, 13811111111, 18],</span><br><span class="line">        [3, &apos;wangwu&apos;, 13911111111, 20],</span><br><span class="line">        [4, &apos;zhaoliu&apos;, 15811111111, 25]</span><br><span class="line">    ]</span><br><span class="line">    dataset2 = tablib.Dataset(*data2, headers=header2)</span><br><span class="line"></span><br><span class="line">    dataset1.title = &apos;dataset1&apos;  # 设置Excel中表单的名称</span><br><span class="line">    dataset2.title = &apos;dataset2&apos;</span><br><span class="line">    </span><br><span class="line">      # 如果有多个sheet表单，使用DataBook就可以了</span><br><span class="line">    myDataBook = tablib.Databook((dataset1, dataset2))</span><br><span class="line">    ds = myDataBook.export(&apos;xlsx&apos;)</span><br><span class="line"></span><br><span class="line">    response = make_response(ds)</span><br><span class="line">    response.headers[&apos;Content-Disposition&apos;] = &apos;attachment; filename=&#123;&#125;&apos;.format(&apos;dhel.xlsx&apos;)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure></p><p>引用：<br><a href="https://blog.csdn.net/calling_wisdom/article/details/41447791" target="_blank" rel="noopener">Python tablib模块</a><br><a href="http://docs.python-tablib.org/en/master/" target="_blank" rel="noopener">tablib文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tablib 主要作用是将数据导出为各种不同的格式，包括excel，json，html，yaml，csv，tsv等格式。使用起来也非常简单。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>pip 升级所遇到的问题</title>
    <link href="http://yoursite.com/2018/10/31/pip-%E5%8D%87%E7%BA%A7%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/31/pip-升级所遇到的问题/</id>
    <published>2018-10-31T10:12:11.000Z</published>
    <updated>2018-11-01T06:43:03.091Z</updated>
    
    <content type="html"><![CDATA[<p>pip的原有版本是9.0.1，最近发现pip可以升级了，想到pip升级到10以上用了下面各种方法，都不管用,如下：<br><a id="more"></a><br>用了mac/limux方法 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> pip install -U pip </span><br><span class="line">easy_install  --upgrade pip</span><br><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure></p><p>用了windows 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br><span class="line">python -m pip install -U pip</span><br></pre></td></tr></table></figure></p><p>最后从源头做起，里面搞定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py | python3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pip的原有版本是9.0.1，最近发现pip可以升级了，想到pip升级到10以上用了下面各种方法，都不管用,如下：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>pip安装时ReadTimeoutError解决办法</title>
    <link href="http://yoursite.com/2018/10/31/pip%E5%AE%89%E8%A3%85%E6%97%B6ReadTimeoutError%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/31/pip安装时ReadTimeoutError解决办法/</id>
    <published>2018-10-31T10:12:00.000Z</published>
    <updated>2018-11-01T06:43:08.586Z</updated>
    
    <content type="html"><![CDATA[<p>有一个本地服务器，网速很慢，下载老是出错，出现<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip._vendor.urllib3.exceptions.ReadTimeoutError: </span><br><span class="line">HTTPSConnectionPool(host=&apos;files.pythonhosted.org&apos;, port=443): Read timed out.</span><br></pre></td></tr></table></figure></p><p>经过google，发现用下面的内容就可以完美解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --default-timeout=100 install gevent</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个本地服务器，网速很慢，下载老是出错，出现&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>安装PyCrypto以后出现的错误</title>
    <link href="http://yoursite.com/2018/10/31/%E5%AE%89%E8%A3%85PyCrypto%E4%BB%A5%E5%90%8E%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/10/31/安装PyCrypto以后出现的错误/</id>
    <published>2018-10-31T10:11:50.000Z</published>
    <updated>2018-11-01T06:39:16.786Z</updated>
    
    <content type="html"><![CDATA[<p> 最近另一个同事安装了PyCrypto，并且在本地和服务器运行都没有错误。当我download下来的时候，安装PyCrypto，运行竟然出现了错误。如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">homeassistant  | 16-07-01 18:35:24 ERROR (MainThread) [homeassistant.bootstrap] Error during setup of component wink</span><br><span class="line">homeassistant  | Traceback (most recent call last):</span><br><span class="line">homeassistant  |   File &quot;/usr/src/app/homeassistant/bootstrap.py&quot;, line 150, in _setup_component</span><br><span class="line">homeassistant  |     if not component.setup(hass, config):</span><br><span class="line">homeassistant  |   File &quot;/usr/src/app/homeassistant/components/wink.py&quot;, line 29, in setup</span><br><span class="line">homeassistant  |     from pubnub import Pubnub</span><br><span class="line">homeassistant  |   File &quot;/usr/local/lib/python3.4/site-packages/pubnub.py&quot;, line 25, in &lt;module&gt;</span><br><span class="line">homeassistant  |     from Crypto.Cipher import AES</span><br><span class="line">homeassistant  |   File &quot;/usr/local/lib/python3.4/site-packages/Crypto/Cipher/__init__.py&quot;, line 78, in &lt;module&gt;</span><br><span class="line">homeassistant  |     from Crypto.Cipher._mode_ecb import _create_ecb_cipher</span><br><span class="line">homeassistant  |   File &quot;/usr/local/lib/python3.4/site-packages/Crypto/Cipher/_mode_ecb.py&quot;, line 29, in &lt;module&gt;</span><br><span class="line">homeassistant  |     from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,</span><br><span class="line">homeassistant  |   File &quot;/usr/local/lib/python3.4/site-packages/Crypto/Util/_raw_api.py&quot;, line 33, in &lt;module&gt;</span><br><span class="line">homeassistant  |     from Crypto.Util.py3compat import byte_string</span><br><span class="line">homeassistant  | ImportError: cannot import name &apos;byte_string&apos;</span><br></pre></td></tr></table></figure></p><p>解决办法是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 uninstall pycrypto</span><br><span class="line">pip3 uninstall pycryptodome</span><br><span class="line">pip3 install pycryptodome</span><br></pre></td></tr></table></figure></p><p>这时候就可以正常运行了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近另一个同事安装了PyCrypto，并且在本地和服务器运行都没有错误。当我download下来的时候，安装PyCrypto，运行竟然出现了错误。如下：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>使用tablib出现的错误</title>
    <link href="http://yoursite.com/2018/10/31/%E4%BD%BF%E7%94%A8tablib%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/10/31/使用tablib出现的错误/</id>
    <published>2018-10-31T10:11:39.000Z</published>
    <updated>2018-11-01T06:40:34.073Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司要发邮件，基于tablib的强大功能，我理所当然的使用了它。但是在使用过程中发现一个bug，具体bug报这个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using a coordinate with ws.cell is deprecated. Use ws[coordinate] instead&quot;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>刚开始是报警告，后面因为换电脑直接更新requerement.txt，然后发邮件就直接报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DeprecationWarning: Call to deprecated function remove_sheet</span><br><span class="line"> (Use wb.remove(worksheet) or del wb[sheetname]).</span><br><span class="line">  wb.remove_sheet(sheet)</span><br></pre></td></tr></table></figure></p><p>后来经过查资料发现是因为tablib里面使用openpyxl的问题。openpyxl的版本过高，导致的问题，把openpyxl的版本改下就OK了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原来的openpyxl版本是2.5.4.将其降到2.5.0以下就没问题了。</span><br><span class="line">pip install openpyxl==2.4.9</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司要发邮件，基于tablib的强大功能，我理所当然的使用了它。但是在使用过程中发现一个bug，具体bug报这个错误&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Using a coordinate with ws.cell is deprecated. Use ws[coordinate] instead&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>flask-excel 下载的时候出现OSError错误</title>
    <link href="http://yoursite.com/2018/10/31/flask-excel-%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0OSError%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/10/31/flask-excel-下载的时候出现OSError错误/</id>
    <published>2018-10-31T10:11:27.000Z</published>
    <updated>2018-11-01T06:41:45.466Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用flask-excel报OSError: No content, file name. Nothing is given错误<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return excel.make_response_from_records(items, &quot;xlsx&quot;, file_name=&quot;all_content&quot;)</span><br></pre></td></tr></table></figure></p><p>经过查考是因为需要添加支持xlsx的控件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyexcel-xlsx</span><br></pre></td></tr></table></figure></p><p>这时候就会完美解决</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用flask-excel报OSError: No content, file name. Nothing is given错误&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS开发杂记</title>
    <link href="http://yoursite.com/2018/10/31/iOS%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/31/iOS开发杂记/</id>
    <published>2018-10-31T10:10:26.000Z</published>
    <updated>2018-11-01T06:42:23.540Z</updated>
    
    <content type="html"><![CDATA[<p>因为记性不好，常常看到点东西，都感觉很好，但是经常时间一长都忘了，所以现在些杂记，记住这些。慢慢补充。<br><a id="more"></a></p><h2 id="1-iOS屏幕旋转"><a href="#1-iOS屏幕旋转" class="headerlink" title="1.iOS屏幕旋转"></a>1.iOS屏幕旋转</h2><p>iOS屏幕旋转可以用系统通知判断方向UIDeviceOrientationDidChangeNotification; 是在屏幕旋转过以后UIApplicationWillChangeStatusBarOrientationNotification;<br>屏幕没有旋转过的时候调用，可以用系统通知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:</span><br><span class="line">@selector(autorotateDirection)name:UIDeviceOrientationDidChangeNotification object:nil];</span><br></pre></td></tr></table></figure><h2 id="2-tableView头部偏离问题"><a href="#2-tableView头部偏离问题" class="headerlink" title="2.tableView头部偏离问题"></a>2.tableView头部偏离问题</h2><p>最近在用tableView的时候，出现自动偏移了64PX，经过查资料，发现需要设置下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if([selfrespondsToSelector:@selector(edgesForExtendedLayout)])</span><br><span class="line">&#123;</span><br><span class="line">self.edgesForExtendedLayout= UIRectEdgeNone;</span><br><span class="line">&#125;</span><br><span class="line">[self.navigationController.navigationBar setTranslucent:YES]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为记性不好，常常看到点东西，都感觉很好，但是经常时间一长都忘了，所以现在些杂记，记住这些。慢慢补充。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>关于cocoapods管理库遇到的坑</title>
    <link href="http://yoursite.com/2018/10/31/%E5%85%B3%E4%BA%8Ecocoapods%E7%AE%A1%E7%90%86%E5%BA%93%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2018/10/31/关于cocoapods管理库遇到的坑/</id>
    <published>2018-10-31T10:10:15.000Z</published>
    <updated>2018-11-01T06:40:05.149Z</updated>
    
    <content type="html"><![CDATA[<p>今天花了一点时间来做cocoapods管理自己写的库问题。发现遇到好多坑。<br><a id="more"></a></p><h3 id="记得这样放"><a href="#记得这样放" class="headerlink" title="记得这样放"></a>记得这样放</h3><p><img src="http://upload-images.jianshu.io/upload_images/2120155-24cc6c2668e503dc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cocoaspods1.png"></p><h3 id="记得当你pod-lib-lint-XXKH-podspec成功的时候，记得给库加入tag值"><a href="#记得当你pod-lib-lint-XXKH-podspec成功的时候，记得给库加入tag值" class="headerlink" title="记得当你pod lib lint XXKH.podspec成功的时候，记得给库加入tag值"></a>记得当你pod lib lint XXKH.podspec成功的时候，记得给库加入tag值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag &apos;1.0.0&apos;</span><br><span class="line">git push --tags</span><br><span class="line">pod spec lint</span><br></pre></td></tr></table></figure><p>然后是检查下，最后提交给pod，具体为pod trunk push XXKH.podspec</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天花了一点时间来做cocoapods管理自己写的库问题。发现遇到好多坑。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>git Authentication failed 错误</title>
    <link href="http://yoursite.com/2018/10/31/git-Authentication-failed-%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/10/31/git-Authentication-failed-错误/</id>
    <published>2018-10-31T10:08:47.000Z</published>
    <updated>2018-11-01T06:41:57.407Z</updated>
    
    <content type="html"><![CDATA[<p>最近在windows上面安装git的以后，git某一个项目，出现输入账号密码的界面，这时候应当输入你的用户名和密码。用户名是你的登录账号，密码是你的密码。这时候如果输入错误。那么你就git clone git… 会出现Authentication failed错误。<br><a id="more"></a><br>这时候你无论修改 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name  &apos;name&apos;</span><br><span class="line">git config --global user.email  &apos;email&apos;</span><br></pre></td></tr></table></figure><p>会发现还是报这个错误。然后我把git删除了，重装也还是不成。后来经大神指点，发现一个非常简单的解决方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> (一)进入控制面板</span><br><span class="line">（二）选择用户账户</span><br><span class="line">（三）选择管理你的凭据</span><br><span class="line">（四）选择Windows凭据</span><br><span class="line">（五）选择git保存的用户信息</span><br><span class="line">（六）选择编辑或者进行删除操作</span><br></pre></td></tr></table></figure><p>这时候你在git clone git…，你就会发现成功了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;good&apos;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在windows上面安装git的以后，git某一个项目，出现输入账号密码的界面，这时候应当输入你的用户名和密码。用户名是你的登录账号，密码是你的密码。这时候如果输入错误。那么你就git clone git… 会出现Authentication failed错误。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Git tag值的使用</title>
    <link href="http://yoursite.com/2018/10/31/Git-tag%E5%80%BC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/Git-tag值的使用/</id>
    <published>2018-10-31T10:07:55.000Z</published>
    <updated>2018-11-01T06:42:02.403Z</updated>
    
    <content type="html"><![CDATA[<p>项目中因为业务的需要，需要打标签。所以这里就把常用的几个命令写下来，方便以后自己在打tag的时候可以直接用到。<br><a id="more"></a></p><h3 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag   #这会看到项目下包含的标签</span><br><span class="line">git show v1.1.0    #查看该标签下的版本信息</span><br></pre></td></tr></table></figure><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><p>打标签有两种，轻量标签和附注标签,轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.1.0  #创建轻量标签</span><br><span class="line">git tag -a v1.1.0 -m &quot;1.1.0版本&quot;   #创建附注标签</span><br></pre></td></tr></table></figure><p>创建附注Tag时，参数a即annotated的缩写，指定Tag类型，后附Tag名。参数m指定Tag说明，说明信息会保存在Tag对象中。</p><h3 id="切换标签"><a href="#切换标签" class="headerlink" title="切换标签"></a>切换标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout v1.1.0</span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p>删除本地标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.1.0   #删除tag</span><br></pre></td></tr></table></figure></p><p>删除远程标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/标签名  </span><br><span class="line">  </span><br><span class="line">git push origin :refs/tags/protobuf-2.5.0rc1</span><br></pre></td></tr></table></figure><h3 id="tag推送到项目管理仓库"><a href="#tag推送到项目管理仓库" class="headerlink" title="tag推送到项目管理仓库"></a>tag推送到项目管理仓库</h3><p>注意：打tag的时候先把代码提交到项目管理仓库，然后在提交tag,所以在提交tag值的时候可以先<br>git push origin master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.1.0   #将v1.1.0 Tag提交到git服务器</span><br><span class="line">git push origin –-tags    # 将本地所有Tag一次性提交到git服务器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中因为业务的需要，需要打标签。所以这里就把常用的几个命令写下来，方便以后自己在打tag的时候可以直接用到。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>git的初始用</title>
    <link href="http://yoursite.com/2018/10/31/git%E7%9A%84%E5%88%9D%E5%A7%8B%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/31/git的初始用/</id>
    <published>2018-10-31T10:07:44.000Z</published>
    <updated>2018-11-01T06:42:09.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git配置全局的用户名和邮箱"><a href="#git配置全局的用户名和邮箱" class="headerlink" title="git配置全局的用户名和邮箱"></a>git配置全局的用户名和邮箱</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name xxkh</span><br><span class="line">git config --global user.email xxx@gmail.com</span><br></pre></td></tr></table></figure><h3 id="查看用户名和邮箱"><a href="#查看用户名和邮箱" class="headerlink" title="查看用户名和邮箱"></a>查看用户名和邮箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><h3 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h3><p>在服务器上 clone 代码第一次通常会提示输入密码，为了下次不再提示，可以在 clone 后做如下操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper store</span><br></pre></td></tr></table></figure></p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd project_root                             # 进入项目目录</span><br><span class="line">git init                                    # 初始化git仓库</span><br><span class="line">git add .                                   # 添加文件到仓库</span><br><span class="line">git commit -m &apos;init commit&apos;                 # 提交代码到本地仓库</span><br><span class="line">git remote add origin $&#123;repository_path&#125;    # 将项目关联到git server</span><br><span class="line">git pull origin master                      # 同步代码</span><br><span class="line">git push origin master                      # push代码到远程仓库</span><br><span class="line">git clone $&#123;repository_path&#125;                # 新的位置clone项目</span><br></pre></td></tr></table></figure><h3 id="重新提交"><a href="#重新提交" class="headerlink" title="重新提交"></a>重新提交</h3><p>提交后如果发现遗漏可以使用 git commit –amend 重新提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;initial commit&apos;</span><br><span class="line">git add forgotten_file</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></p><h3 id="撤销提交文件"><a href="#撤销提交文件" class="headerlink" title="撤销提交文件"></a>撤销提交文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;              # 取消对文件的修改。还原到最近的版本，废弃本地做的修改。</span><br><span class="line">git reset HEAD &lt;file&gt;...            # 取消已经暂存的文件。即，撤销先前&quot;git add&quot;的操作</span><br><span class="line">git reset HEAD^                     # 回退所有内容到上一个版本</span><br><span class="line">git reset HEAD^ a.py                # 回退a.py这个文件的版本到上一个版本</span><br><span class="line">git reset –soft HEAD~3              # 向前回退到第3个版本</span><br><span class="line">git reset –hard origin/master       # 将本地的状态回退到和远程的一样</span><br><span class="line">git reset 057d                      # 回退到某个版本</span><br><span class="line">git revert HEAD                     # 回退到上一次提交的状态，按照某一次的commit完全反向的进行一次commit.(代码回滚到上个版本，并提交git)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git配置全局的用户名和邮箱&quot;&gt;&lt;a href=&quot;#git配置全局的用户名和邮箱&quot; class=&quot;headerlink&quot; title=&quot;git配置全局的用户名和邮箱&quot;&gt;&lt;/a&gt;git配置全局的用户名和邮箱&lt;/h3&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>input radio attr动态赋值问题</title>
    <link href="http://yoursite.com/2018/10/31/input-radio-attr%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/31/input-radio-attr动态赋值问题/</id>
    <published>2018-10-31T10:04:46.000Z</published>
    <updated>2018-11-01T06:42:18.588Z</updated>
    
    <content type="html"><![CDATA[<p>程序环境：easyui+jQuery<br><a id="more"></a><br>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label &gt;&lt;input name=&quot;Fruit&quot; type=&quot;radio&quot;  value=&quot;苹果&quot;  /&gt;苹果 &lt;/label&gt;</span><br><span class="line">&lt;label &gt;&lt;input name=&quot;Fruit&quot; type=&quot;radio&quot;  value=&quot;西瓜&quot;  /&gt;西瓜 &lt;/label&gt;</span><br></pre></td></tr></table></figure><p>最近发现用<code>$(&quot;input[name=&#39;Fruit&#39;][value=&#39;西瓜&#39;]&quot;).attr(&quot;checked&quot;,true);</code>动态赋值没有赋值成功。原来以为是easyui的问题，后来查考文档才发现jQuery中使用prop可以完美解决这个问题。<br><code>$(&quot;input[name=&#39;Fruit&#39;][value=&#39;西瓜&#39;]&quot;).prop(&quot;checked&quot;,true);</code></p><h5 id="那么，什么时候使用attr，什么时候使用prop？"><a href="#那么，什么时候使用attr，什么时候使用prop？" class="headerlink" title="那么，什么时候使用attr，什么时候使用prop？"></a>那么，什么时候使用attr，什么时候使用prop？</h5><p>1.添加属性名称该属性就会生效应该使用prop.<br>2.是有true,false两个属性使用prop.<br>3.其他则使用attr<br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序环境：easyui+jQuery&lt;br&gt;
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery实现获取年月日的一些方法总结</title>
    <link href="http://yoursite.com/2018/10/31/jQuery%E5%AE%9E%E7%8E%B0%E8%8E%B7%E5%8F%96%E5%B9%B4%E6%9C%88%E6%97%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/10/31/jQuery实现获取年月日的一些方法总结/</id>
    <published>2018-10-31T10:04:23.000Z</published>
    <updated>2018-11-01T06:42:32.804Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1761761-7990e80ba13d67a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/580" alt="MacDown logo"><br><a id="more"></a></p><p>用jq来获取当前的时间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">    var myDate = new Date;</span><br><span class="line">    var year = myDate.getFullYear();//获取当前年</span><br><span class="line">    var yue = myDate.getMonth()+1;//获取当前月</span><br><span class="line">    var date = myDate.getDate();//获取当前日</span><br><span class="line">    var h = myDate.getHours();//获取当前小时数(0-23)</span><br><span class="line">    var m = myDate.getMinutes();//获取当前分钟数(0-59)</span><br><span class="line">    var s = myDate.getSeconds();//获取当前秒</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1761761-7990e80ba13d67a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/580&quot; alt=&quot;MacDown logo&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
  </entry>
  
  <entry>
    <title>table宽度问题</title>
    <link href="http://yoursite.com/2018/10/31/table%E5%AE%BD%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/31/table宽度问题/</id>
    <published>2018-10-31T10:04:11.000Z</published>
    <updated>2018-11-01T06:44:11.229Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做table列表的时候，出现如果数据过多，导致列表的宽度越来越宽，后来在网上找了很多方法，通过在<code>td</code>里面添加<code>div</code>,通过设置div的宽度来解决。具体代码如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;table  border=&quot;1&quot;  height=&quot;100&quot; width=&quot;500&quot; bordercolor=&quot;#ccc&quot; id=&quot;startId&quot; &gt;</span><br><span class="line">       &lt;thead&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                     &lt;th&gt;topicId&lt;/th&gt;</span><br><span class="line">                     &lt;th&gt;创建时间(北京)&lt;/th&gt;</span><br><span class="line">                     &lt;th&gt;测试类型&lt;/th&gt;</span><br><span class="line">                     &lt;th&gt;测试信息&lt;/th&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody id=&quot;tbMain&quot;&gt;&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><p>在请求数据的时候，在td里面添加div,设置div的宽度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">function resultData1(data) &#123;</span><br><span class="line">        var tbody = document.getElementById(&apos;resultMain&apos;);</span><br><span class="line">        for(var i = 0;i &lt; data.length; i++)&#123; //遍历一下json数据</span><br><span class="line">            var trow = getresultRow(data[i]); //定义一个方法,返回tr数据</span><br><span class="line">            tbody.appendChild(trow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function getresultRow(h) &#123;</span><br><span class="line"></span><br><span class="line">    console.log(h);</span><br><span class="line">        var row = document.createElement(&apos;tr&apos;); //创建行</span><br><span class="line">            var idCell = document.createElement(&apos;td&apos;); //创建第一列id</span><br><span class="line">            idCell.innerHTML = h.debug_info.topic_id; //填充数据</span><br><span class="line">            row.appendChild(idCell); //加入行  ，下面类似</span><br><span class="line"></span><br><span class="line">            var ddd = &quot;&quot;</span><br><span class="line">            if (&quot;create_ts&quot; in h.debug_info)&#123;</span><br><span class="line">                var ddd =  formatTS2YYYYMMDDHHMMSS(h.create_ts.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            var nameCell = document.createElement(&apos;td&apos;);//创建第二列name</span><br><span class="line">            nameCell.innerHTML = ddd;</span><br><span class="line">            row.appendChild(nameCell);</span><br><span class="line"></span><br><span class="line">             jobCell = document.createElement(&apos;td&apos;);//创建第三列</span><br><span class="line">            jobCell.innerHTML = h.debug_info.type;</span><br><span class="line">            row.appendChild(jobCell);</span><br><span class="line"></span><br><span class="line">             jobCell = document.createElement(&apos;td&apos;);//创建第四列</span><br><span class="line">            var mesDiv = document.createElement(&apos;div&apos;);</span><br><span class="line">            mesDiv.className = &apos;mes_div&apos;; #这里添加div，并且设置div的class</span><br><span class="line">            mesDiv.innerHTML = h.debug_info.message;</span><br><span class="line">            jobCell.appendChild(mesDiv);</span><br><span class="line"></span><br><span class="line">            row.appendChild(jobCell);</span><br><span class="line"></span><br><span class="line">             jobCell = document.createElement(&apos;td&apos;);//创建第五列</span><br><span class="line">            var div = document.createElement(&apos;div&apos;);</span><br><span class="line">            div.innerHTML = h.debug_info.result;</span><br><span class="line">            jobCell.appendChild(div);</span><br><span class="line">            row.appendChild(jobCell);</span><br><span class="line"></span><br><span class="line">            return row; //返回tr数据</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .mes_div&#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做table列表的时候，出现如果数据过多，导致列表的宽度越来越宽，后来在网上找了很多方法，通过在&lt;code&gt;td&lt;/code&gt;里面添加&lt;code&gt;div&lt;/code&gt;,通过设置div的宽度来解决。具体代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
  </entry>
  
</feed>
