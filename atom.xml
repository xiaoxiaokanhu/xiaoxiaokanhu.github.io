<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小看护</title>
  
  <subtitle>守护自己，守护家人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-11T10:05:20.068Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小小看护</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python json 的使用</title>
    <link href="http://yoursite.com/2021/01/11/python-json-%E7%9A%84dumps%E5%92%8Cdump-loads%E5%92%8Cload%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2021/01/11/python-json-的dumps和dump-loads和load的使用方法/</id>
    <published>2021-01-11T09:56:54.000Z</published>
    <updated>2021-01-11T10:05:20.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dumps和dump-loads和load的区别"><a href="#dumps和dump-loads和load的区别" class="headerlink" title="dumps和dump loads和load的区别"></a>dumps和dump loads和load的区别</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dumps 是用于将<span class="keyword">dict</span>类型的数据转成str</span><br><span class="line">loads 是用于将str类型的数据转成<span class="keyword">dict</span></span><br><span class="line">dump  是用于将<span class="keyword">dict</span>类型的数据转成str，并写入到json文件中，一般配合着<span class="keyword">open</span>写入文件来用</span><br><span class="line"><span class="keyword">load</span>  是用于从json文件中读取数据，一般配合着<span class="keyword">open</span>打开文件来用</span><br></pre></td></tr></table></figure><h2 id="json使用过程中的一些错误"><a href="#json使用过程中的一些错误" class="headerlink" title="json使用过程中的一些错误"></a>json使用过程中的一些错误</h2><h3 id="json里面有中文的时候，出现的错误，将ensure-ascii设置成False即可，因为默认是用ascii转码的"><a href="#json里面有中文的时候，出现的错误，将ensure-ascii设置成False即可，因为默认是用ascii转码的" class="headerlink" title="json里面有中文的时候，出现的错误，将ensure_ascii设置成False即可，因为默认是用ascii转码的"></a>json里面有中文的时候，出现的错误，将ensure_ascii设置成False即可，因为默认是用ascii转码的</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span> = <span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__))</span><br><span class="line"><span class="built_in">path</span> = f<span class="string">"&#123;path&#125;/app_apk_visit_local_total.json"</span></span><br><span class="line">with <span class="built_in">open</span>(<span class="built_in">path</span>, <span class="string">'w'</span>, encoding=<span class="string">'UTF-8'</span>) as file:</span><br><span class="line">    json.<span class="built_in">dump</span>(contents,file, ensure_ascii=False)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;dumps和dump-loads和load的区别&quot;&gt;&lt;a href=&quot;#dumps和dump-loads和load的区别&quot; class=&quot;headerlink&quot; title=&quot;dumps和dump loads和load的区别&quot;&gt;&lt;/a&gt;dumps和dump loa
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?</title>
    <link href="http://yoursite.com/2020/10/12/ERROR-The-Python-ssl-extension-was-not-compiled-Missing-the-OpenSSL-lib/"/>
    <id>http://yoursite.com/2020/10/12/ERROR-The-Python-ssl-extension-was-not-compiled-Missing-the-OpenSSL-lib/</id>
    <published>2020-10-12T03:45:48.000Z</published>
    <updated>2020-10-12T03:46:31.295Z</updated>
    
    <content type="html"><![CDATA[<p>官方已经给出解决方案：<a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems#error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib" target="_blank" rel="noopener">https://github.com/pyenv/pyenv/wiki/Common-build-problems#error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib</a></p><p>在Mac上且用homebrew装了openssl的情况下，命令行如下：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS=<span class="string">"-I$(brew --prefix openssl)/include"</span> \</span><br><span class="line">LDFLAGS=<span class="string">"-L$(brew --prefix openssl)/lib"</span> \</span><br><span class="line">pyenv install -v 3.6.2</span><br></pre></td></tr></table></figure></p><p>再补充一句，pyenv前面不要加sudo。否则编译仍旧报错通不过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官方已经给出解决方案：&lt;a href=&quot;https://github.com/pyenv/pyenv/wiki/Common-build-problems#error-the-python-ssl-extension-was-not-compiled-missing-the
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>EQ、NE、GT、LT、GE、LE的意思</title>
    <link href="http://yoursite.com/2020/10/12/EQ%E3%80%81NE%E3%80%81GT%E3%80%81LT%E3%80%81GE%E3%80%81LE%E7%9A%84%E6%84%8F%E6%80%9D/"/>
    <id>http://yoursite.com/2020/10/12/EQ、NE、GT、LT、GE、LE的意思/</id>
    <published>2020-10-12T03:44:48.000Z</published>
    <updated>2020-10-12T03:45:07.248Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EQ 就是 <span class="keyword">EQUAL</span> 等于 </span><br><span class="line">NE就是 <span class="keyword">NOT</span> <span class="keyword">EQUAL</span> 不等于 </span><br><span class="line">GT 就是 <span class="keyword">GREATER</span> THAN 大于　 </span><br><span class="line">LT 就是 <span class="keyword">LESS</span> THAN 小于 </span><br><span class="line">GE 就是 <span class="keyword">GREATER</span> THAN <span class="keyword">OR</span> <span class="keyword">EQUAL</span> 大于等于 </span><br><span class="line">LE 就是 <span class="keyword">LESS</span> THAN <span class="keyword">OR</span> <span class="keyword">EQUAL</span> 小于等于</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac 安装jupyter，并且在后台运行</title>
    <link href="http://yoursite.com/2020/10/12/Mac-%E5%AE%89%E8%A3%85jupyter%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
    <id>http://yoursite.com/2020/10/12/Mac-安装jupyter，并且在后台运行/</id>
    <published>2020-10-12T03:39:21.000Z</published>
    <updated>2020-10-12T03:43:54.732Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。 用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等。</p></blockquote><h2 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h2><ul><li>环境 python 3.5.0</li></ul><p>安装指令<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> jupyter</span><br></pre></td></tr></table></figure></p><p>运行jupyter<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">jupyter notebook</span></span><br></pre></td></tr></table></figure></p><p>浏览器就会自动弹出<a href="http://localhost:8888。" target="_blank" rel="noopener">http://localhost:8888。</a> 一开始进的页面就是你自己电脑的根目录！不要害怕！下面咱们会讲到修改目录</p><h2 id="修改Jupyter-Notebook默认的工作目录"><a href="#修改Jupyter-Notebook默认的工作目录" class="headerlink" title="修改Jupyter Notebook默认的工作目录"></a>修改Jupyter Notebook默认的工作目录</h2><p>终端运行<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --<span class="keyword">generate</span> -<span class="keyword">config</span></span><br></pre></td></tr></table></figure></p><p>生成配置文件。会得到得到<code>/Users/XXXX/.jupyter/jupyter_notebook_config.py</code>路径（”XXXX”为具体用户名）</p><p>打开 <code>jupyter_notebook_config.py</code> 文件，找到以下代码：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#c</span><span class="selector-class">.NotebookApp</span><span class="selector-class">.notebook_dir</span> = ‘<span class="string">'</span></span><br></pre></td></tr></table></figure></p><p>修改为：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 用于笔记本和内核的目录。</span><br><span class="line">c.NotebookApp.notebook_dir = ‘自己想设的文件路径<span class="string">'</span></span><br></pre></td></tr></table></figure></p><p>**Note: 注意修改的第二行要去掉#号<br>这时候重启<code>jupyter notebook</code>。就会发现已经修改成所设的文件路径</p><h2 id="后台运行jupyter-notebook程序"><a href="#后台运行jupyter-notebook程序" class="headerlink" title="后台运行jupyter notebook程序"></a>后台运行jupyter notebook程序</h2><p>在终端运行下列代码，就可以在后台运行jupyter notebook程序了<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jupyter notebook <span class="meta">&amp;</span></span><br></pre></td></tr></table></figure></p><h4 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h4><blockquote><p>输出文件： nohup忽略hangup信号地运行程序，程序的输出默认重定向到当前文件夹下的 ‘nohup.out’ 文件中。也可以通过nohup COMMAND &gt; FILE 命令的方式将输出文件重定位到指定的FILE文件中。如果要查看 jupyter notebook 的日志文件，可以打开 ‘nohup.out’ 文件进行查看。可以使用 vim、head、tail、cat 等命令进行查看。</p></blockquote><ol><li>用途：Run COMMAND, ignoring hangup signals.</li><li>语法： nohup COMMAND [ARG]…</li></ol><h4 id="amp-命令"><a href="#amp-命令" class="headerlink" title="&amp; 命令"></a>&amp; 命令</h4><p>作用：在后台运行程序</p><h2 id="查看、kill-jupyter后台运行进程"><a href="#查看、kill-jupyter后台运行进程" class="headerlink" title="查看、kill jupyter后台运行进程"></a>查看、kill jupyter后台运行进程</h2><p>查看运行的jupyter进程<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> aux | <span class="keyword">grep</span> jupyter</span><br></pre></td></tr></table></figure></p><p>使用<code>kill -9 pid</code>删除jupyter。</p><h2 id="Mac上面jupyter的快捷键"><a href="#Mac上面jupyter的快捷键" class="headerlink" title="Mac上面jupyter的快捷键"></a>Mac上面jupyter的快捷键</h2><p>常用快捷键<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">只运行本单元            Ctrl + <span class="keyword">Enter</span></span><br><span class="line">运行本单元后,跳到下一单元 Shift+<span class="keyword">Enter</span></span><br><span class="line">合并选中的单元          Shift + M</span><br><span class="line">删除选中单元            d + d</span><br><span class="line">代码补全提示            <span class="keyword">Tab</span></span><br><span class="line">查看函数定义            Shit + <span class="keyword">Tab</span></span><br></pre></td></tr></table></figure></p><p>命令模式 (按键 Esc 开启)<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">Enter : 转入编辑模式</span><br><span class="line">Shift-Enter : 运行本单元，选中下个单元</span><br><span class="line">Ctrl-Enter : 运行本单元</span><br><span class="line">Alt-Enter : 运行本单元，在其下插入新单元</span><br><span class="line">Y : 单元转入代码状态</span><br><span class="line">M :单元转入markdown状态</span><br><span class="line">R : 单元转入<span class="type">raw</span>状态</span><br><span class="line"><span class="number">1</span> : 设定 1 级标题</span><br><span class="line"><span class="number">2</span> : 设定 2 级标题</span><br><span class="line"><span class="number">3</span> : 设定 3 级标题</span><br><span class="line"><span class="number">4</span> : 设定 4 级标题</span><br><span class="line"><span class="number">5</span> : 设定 5 级标题</span><br><span class="line"><span class="number">6</span> : 设定 6 级标题</span><br><span class="line">Up : 选中上方单元</span><br><span class="line">K : 选中上方单元</span><br><span class="line">Down : 选中下方单元</span><br><span class="line">J : 选中下方单元</span><br><span class="line">Shift-K : 扩大选中上方单元</span><br><span class="line">Shift-J : 扩大选中下方单元</span><br><span class="line">A : 在上方插入新单元</span><br><span class="line">B : 在下方插入新单元</span><br><span class="line">X : 剪切选中的单元</span><br><span class="line">C : 复制选中的单元</span><br><span class="line">Shift-V : 粘贴到上方单元</span><br><span class="line">V : 粘贴到下方单元</span><br><span class="line">Z : 恢复删除的最后一个单元</span><br><span class="line">D,D : 删除选中的单元</span><br><span class="line">Shift-M : 合并选中的单元</span><br><span class="line">Ctrl-S : 文件存盘</span><br><span class="line">S : 文件存盘</span><br><span class="line">L : 转换行号</span><br><span class="line">O : 转换输出</span><br><span class="line">Shift-O : 转换输出滚动</span><br><span class="line">Esc : 关闭页面</span><br><span class="line">Q : 关闭页面</span><br><span class="line">H : 显示快捷键帮助</span><br><span class="line">I,I : 中断<span class="type">Notebook</span>内核</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span> : 重启<span class="type">Notebook</span>内核</span><br><span class="line">Shift : 忽略</span><br><span class="line">Shift-Space : 向上滚动</span><br><span class="line">Space : 向下滚动</span><br><span class="line">编辑模式 ( Enter 键启动)</span><br><span class="line">Tab : 代码补全或缩进</span><br><span class="line">Shift-Tab : 提示</span><br><span class="line">Ctrl-] : 缩进</span><br><span class="line">Ctrl-[ : 解除缩进</span><br><span class="line">Ctrl-A : 全选</span><br><span class="line">Ctrl-Z : 复原</span><br><span class="line">Ctrl-Shift-Z : 再做</span><br><span class="line">Ctrl-Y : 再做</span><br><span class="line">Ctrl-Home : 跳到单元开头</span><br><span class="line">Ctrl-Up : 跳到单元开头</span><br><span class="line">Ctrl-<span class="keyword">End</span> : 跳到单元末尾</span><br><span class="line">Ctrl-Down : 跳到单元末尾</span><br><span class="line">Ctrl-Left : 跳到左边一个字首</span><br><span class="line">Ctrl-Right : 跳到右边一个字首</span><br><span class="line">Ctrl-Backspace : 删除前面一个字</span><br><span class="line">Ctrl-Delete : 删除后面一个字</span><br><span class="line">Esc : 进入命令模式</span><br><span class="line">Ctrl-M : 进入命令模式</span><br><span class="line">Shift-Enter : 运行本单元，选中下一单元</span><br><span class="line">Ctrl-Enter : 运行本单元</span><br><span class="line">Alt-Enter : 运行本单元，在下面插入一单元</span><br><span class="line">Ctrl-Shift<span class="comment">-- : 分割单元</span></span><br><span class="line">Ctrl-Shift-Subtract : 分割单元</span><br><span class="line">Ctrl-S : 文件存盘</span><br><span class="line">Shift : 忽略</span><br><span class="line">Up : 光标上移或转入上一单元</span><br><span class="line">Down :光标下移或转入下一单元</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。 用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="Mac" scheme="http://yoursite.com/categories/Mac/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python之进程、线程和协程</title>
    <link href="http://yoursite.com/2020/09/07/python%20%E4%B9%8B%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/09/07/python 之进程、线程和协程/</id>
    <published>2020-09-07T09:58:40.000Z</published>
    <updated>2020-09-07T10:16:14.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><blockquote><p><code>进程</code>是每一个应用运行起来都会有自己的进程，因为进程是系统资源分配的基本单位。直观点说，保存在硬盘上的程序运行以后，会在内存空间里形成一个独立的内存体，这个内存体有自己独立的地址空间，有自己的堆，上级挂靠单位是操作系统。操作系统会以进程为单位，分配系统资源（CPU时间片、内存等资源），进程是资源分配的最小单位。</p></blockquote><p> 每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。<br>每一个进程创建出来，都会分配三种基本的内存资源，分别是代码段、数据段和堆栈段。<br>代码段和数据段分别保存着应用的执行代码和全局变量、常量、静态变量，这些就是不会变化或者很少变化的内容，当然内存占用相对也会比较少。<br>而应用运行起来，需要的更多资源就会在堆栈中用到。<br>其中堆空间是存放各种变量数据的地方，内存大小也是可以动态调整的。<br>而栈空间是子任务（线程、协程）独立存放自己的数据地方，比如：函数调用、参数、返回值和局部变量。<br><code>进程切换</code>只发生在内核态，两步：1 切换页全局目录以安装一个新的地址空间 2 切换内核态堆栈和硬件上下文。 另一种说法类似：1 保存CPU环境（寄存器值、程序计数器、堆栈指针）2修改内存管理单元MMU的寄存器 3 转换后备缓冲器TLB中的地址转换缓存内容标记为无效。</p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><blockquote><p><code>线程</code>有时被称为轻量级进程(Lightweight Process，LWP），是操作系统调度（CPU调度）执行的最小单位。</p></blockquote><p>线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p><p>操作系统不仅仅维持一个进程表，而且还会维持一个线程表，这样操作系统就可以把线程作为调度单位。</p><p>线程是进程内创建，可以共享进程的资源，所以，线程自身独立的资源依赖就会少很多，因为只需要为每个线程分配独立的栈空间。</p><p>而线程的栈空间是固定大小的，如果程序比较复杂，或者里面的数据量大，为了不出现“栈空间不足”的错误，就必须把栈空间设置的足够大才行。</p><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><blockquote><p>协程是一种比线程更加轻量级的存在，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。是一种用户态的轻量级线程</p></blockquote><p>协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p><h2 id="联系和区别"><a href="#联系和区别" class="headerlink" title="联系和区别"></a>联系和区别</h2><h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><p>1、一个进程可以有多个线程，一个进程也可以有多个协程。<br>2、一个程序至少有一个进程，一个进程至少有一个线程<br>3、一个线程上可以有多个协程</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>1、进程切换需要的资源很最大，效率很低<br>2、进程和线程都是同步机制，而协程是异步<br>3、和线程比较，协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态<br>4、进程和线程是有操作系统来控制切换的，协程不需要</p><h2 id="通俗描述"><a href="#通俗描述" class="headerlink" title="通俗描述"></a>通俗描述</h2><p>有一个老板想要开个工厂进行生产某件商品（例如剪子）<br>他需要花一些财力物力制作一条生产线，这个生产线上有很多的器件以及材料这些所有的 为了能够生产剪子而准备的资源称之为：进程<br>只有生产线是不能够进行生产的，所以老板的找个工人来进行生产，这个工人能够利用这些材料最终一步步的将剪子做出来，这个来做事情的工人称之为：线程<br>这个老板为了提高生产率，想到3种办法：<br>在这条生产线上多招些工人，一起来做剪子，这样效率是成倍増长，即单进程 多线程方式<br>老板发现这条生产线上的工人不是越多越好，因为一条生产线的资源以及材料毕竟有限，所以老板又花了些财力物力购置了另外一条生产线，然后再招些工人这样效率又再一步提高了，即多进程 多线程方式<br>老板发现，现在已经有了很多条生产线，并且每条生产线上已经有很多工人了（即程序是多进程的，每个进程中又有多个线程），为了再次提高效率，老板想了个损招，规定：如果某个员工在上班时临时没事或者再等待某些条件（比如等待另一个工人生产完谋道工序 之后他才能再次工作） ，那么这个员工就利用这个时间去做其它的事情，那么也就是说：如果一个线程等待某些条件，可以充分利用这个时间去做其它事情，其实这就是：协程方式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;h4 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h4&gt;&lt;block
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>centos 虚拟机搭建selenium+Chromedriver环境</title>
    <link href="http://yoursite.com/2020/04/23/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAselenium-Chromedriver%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2020/04/23/虚拟机搭建selenium-Chromedriver环境/</id>
    <published>2020-04-23T03:56:36.000Z</published>
    <updated>2020-04-23T03:58:19.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Chrome"><a href="#安装-Chrome" class="headerlink" title="安装 Chrome"></a>安装 Chrome</h2><p><strong><em>方式一</em></strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install http<span class="variable">s:</span>//<span class="keyword">dl</span>.google.<span class="keyword">com</span>/linux/direct/google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure></p><p><strong><em>方式二</em></strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//<span class="keyword">dl</span>.google.<span class="keyword">com</span>/linux/direct/google-chrome-stable_current_x86_64.rpm --<span class="keyword">no</span>-check-certificate  </span><br><span class="line">sudo yum install google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure></p><p><strong><em>查看chrome版本号</em></strong><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome -<span class="built_in">version</span></span><br></pre></td></tr></table></figure></p><h2 id="安装chromedriver"><a href="#安装chromedriver" class="headerlink" title="安装chromedriver"></a>安装chromedriver</h2><p><em>提示：chromedriver要和chrome版本一一对应，不然会报错</em></p><p><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">chromedriver下载地址</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">执行：wget http:<span class="comment">//chromedriver.storage.googleapis.com/81.0.4044.69/chromedriver_linux64.zip </span></span><br><span class="line">下载安装包（需要确保安装的版本与Chrome匹配兼容）</span><br><span class="line"></span><br><span class="line">解压：unzip chromedriver_linux64.<span class="keyword">zip</span> # 解压<span class="keyword">zip</span></span><br><span class="line">解压<span class="keyword">zip</span>包，如果提示没有<span class="keyword">zip</span>，那就执行：yum install -y unzip <span class="keyword">zip</span> 安装<span class="keyword">zip</span>, unzip）</span><br><span class="line"></span><br><span class="line">解压后把chromedriver移动到/usr/bin/目录下</span><br><span class="line"></span><br><span class="line">执行：mv chromedriver /usr/bin/</span><br><span class="line"></span><br><span class="line">查看chromedriver版本</span><br><span class="line"></span><br><span class="line">执行：chromedriver --<span class="keyword">version</span></span><br></pre></td></tr></table></figure><h2 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h2><p>在相应的环境当中运行<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> selenium</span><br></pre></td></tr></table></figure></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># ! -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    chrome_options = webdriver.ChromeOptions()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--headless'</span>) <span class="comment"># 16年之后，chrome给出的解决办法，抢了PhantomJS饭碗</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">'--disable-gpu'</span>) <span class="comment"># root用户不加这条会无法运行</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">    driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">    driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">    print(driver.page_source)</span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-Chrome&quot;&gt;&lt;a href=&quot;#安装-Chrome&quot; class=&quot;headerlink&quot; title=&quot;安装 Chrome&quot;&gt;&lt;/a&gt;安装 Chrome&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;方式一&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;figure c
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>docker的简单使用</title>
    <link href="http://yoursite.com/2019/11/12/docker%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/12/docker的简单使用/</id>
    <published>2019-11-12T07:37:59.000Z</published>
    <updated>2020-09-15T11:05:36.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull <span class="comment">[选项]</span> <span class="comment">[Docker Registry 地址<span class="comment">[:端口号]</span>/]</span>仓库名<span class="comment">[:标签]</span></span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--rm \</span></span><br><span class="line">    nginx \</span><br><span class="line">    bash</span><br></pre></td></tr></table></figure><p><code>it</code> 这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。<br><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。   我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</p><p><code>nginx</code>：这是指用 <code>nginx</code> 镜像为基础来启动容器。<br><code>bash</code>：放在镜像名后的是 命令，这里我们希望有个交互式 <code>Shell</code>，因此用的是 <code>bash</code>。</p><h4 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h4><p>想要列出已经下载的镜像，使用<code>docker image ls</code> 命令。</p><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>如果要删除本地镜像，使用<code>docker image rm XXX</code></p><h4 id="虚拟镜像"><a href="#虚拟镜像" class="headerlink" title="虚拟镜像"></a>虚拟镜像</h4><p>可能因为<code>docker build</code>新的镜像导致旧的镜像的名称被新的取代。有很多<code>&lt;none&gt;</code>的情况<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">blog                latest              <span class="number">132</span>adcbec4fd        <span class="number">2</span> weeks ago         <span class="number">944</span>MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              <span class="number">284197648</span>c09        <span class="number">2</span> weeks ago         <span class="number">944</span>MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              <span class="number">5</span>a582e38aa30        <span class="number">2</span> weeks ago         <span class="number">947</span>MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              <span class="number">20e47</span>abe4f10        <span class="number">2</span> weeks ago         <span class="number">947</span>MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              <span class="number">3</span>d8a5112aa7d        <span class="number">2</span> weeks ago         <span class="number">947</span>MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              <span class="number">748e5</span>c90832c        <span class="number">2</span> weeks ago         <span class="number">910</span>MB</span><br><span class="line">python              <span class="number">3.5</span>                 <span class="number">67</span>f4589d3c88        <span class="number">7</span> months ago        <span class="number">908</span>MB</span><br></pre></td></tr></table></figure></p><p>有一些虚拟镜像已经没有用了，那么可以删除。他的指令是<code>docker image prune</code>。</p><h4 id="进入镜像"><a href="#进入镜像" class="headerlink" title="进入镜像"></a>进入镜像</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">docker exec -<span class="keyword">it</span> XXX bash</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">docker  <span class="built_in">run</span> <span class="comment">--rm -it 6b4faa0b6de5 bash</span></span><br></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h4 id="volumes-数据卷"><a href="#volumes-数据卷" class="headerlink" title="volumes 数据卷"></a>volumes 数据卷</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="string">"3.2"</span></span><br><span class="line"><span class="attribute">services</span>:</span><br><span class="line">  <span class="attribute">web</span>:</span><br><span class="line">    <span class="attribute">image</span>: alpine</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">      - ~/<span class="attribute">test</span>:/data</span><br><span class="line"></span><br><span class="line">***备注***</span><br><span class="line"><span class="built_in">`容器和主机`</span>: 在services定义（web）中使用volumes将主机的test挂载到容器的/data中</span><br><span class="line"><span class="built_in">`容器和容器`</span>：可以通过在和service平级的volumes中定义volumes</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;镜像&quot;&gt;&lt;a href=&quot;#镜像&quot; class=&quot;headerlink&quot; title=&quot;镜像&quot;&gt;&lt;/a&gt;镜像&lt;/h2&gt;&lt;h4 id=&quot;下载镜像&quot;&gt;&lt;a href=&quot;#下载镜像&quot; class=&quot;headerlink&quot; title=&quot;下载镜像&quot;&gt;&lt;/a&gt;下载镜像&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python datetime的使用</title>
    <link href="http://yoursite.com/2019/11/12/python-datetime%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/12/python-datetime的使用/</id>
    <published>2019-11-12T07:31:57.000Z</published>
    <updated>2020-04-13T03:05:24.238Z</updated>
    
    <content type="html"><![CDATA[<p>datetime在Python中使用很频繁，发现有许多都需要去学习，所以今天就拿这个来做测试。这个就很好了。</p><h4 id="时间转日期"><a href="#时间转日期" class="headerlink" title="时间转日期"></a>时间转日期</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">log_date</span><br><span class="line">week = datetime.datetime.strptime(log_date, <span class="string">"%Y-%m-%d"</span>).weekday()</span><br><span class="line"><span class="keyword">if</span> week == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'星期一'</span></span><br><span class="line">elif week == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'星期二'</span></span><br><span class="line">elif week == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'星期三'</span></span><br><span class="line">elif week == <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'星期四'</span></span><br><span class="line">elif week == <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'星期五'</span></span><br><span class="line">elif week == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'星期六'</span></span><br><span class="line">elif week == <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'星期日'</span></span><br></pre></td></tr></table></figure><h4 id="时间字符串转时间"><a href="#时间字符串转时间" class="headerlink" title="时间字符串转时间"></a>时间字符串转时间</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">start = <span class="string">'2020-04-04 01:00:00'</span></span><br><span class="line"></span><br><span class="line">start_date = datetime.datetime.strptime(log_date, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;datetime在Python中使用很频繁，发现有许多都需要去学习，所以今天就拿这个来做测试。这个就很好了。&lt;/p&gt;
&lt;h4 id=&quot;时间转日期&quot;&gt;&lt;a href=&quot;#时间转日期&quot; class=&quot;headerlink&quot; title=&quot;时间转日期&quot;&gt;&lt;/a&gt;时间转日期&lt;/h4
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python爬虫系列-使用selenium模拟豆瓣登录</title>
    <link href="http://yoursite.com/2019/05/14/python%E7%88%AC%E8%99%AB%E7%B3%BB%E5%88%97-%E4%BD%BF%E7%94%A8selenium%E6%A8%A1%E6%8B%9F%E8%B1%86%E7%93%A3%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2019/05/14/python爬虫系列-使用selenium模拟豆瓣登录/</id>
    <published>2019-05-14T05:42:24.000Z</published>
    <updated>2019-05-14T06:54:23.321Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Selenium是一个用于测试网站的自动化测试工具，支持各种浏览器包括Chrome、Firefox、Safari等主流界面浏览器，同时也支持phantomJS无界面浏览器。<br><a id="more"></a></p></blockquote><p>最近公司忙，没有时间更新博客了，今天终于有点时间，把之前做的selenium模拟豆瓣登录整理出来。网上的模拟豆瓣登录，我看了下，都是豆瓣5.0版本的爬取。而现在豆瓣的版本是6.0，5.0的爬虫不适合于这个。<br>咱们先看下目前的豆瓣的代码结构<br><img src="/2019/05/14/python爬虫系列-使用selenium模拟豆瓣登录/123456.jpg" alt=""></p><p>可以发现这个是里面嵌套了一个<code>iframe</code>。</p><p>根据这个，下面是具体的代码：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">username = XXX</span><br><span class="line">password = XXX</span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span> = webdriver.Chrome()</span><br><span class="line"><span class="built_in">driver</span>.get(<span class="string">'https://www.douban.com/'</span>)</span><br><span class="line">iframe = <span class="built_in">driver</span>.find_element_by_tag_name(<span class="string">"iframe"</span>)</span><br><span class="line"><span class="built_in">driver</span>.switch_to.frame(iframe)</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_class_name(<span class="string">'account-tab-account'</span>).click()</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_id(<span class="string">'username'</span>).send_keys(username)</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_id(<span class="string">'password'</span>).send_keys(password)</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_class_name(<span class="string">'btn-account'</span>).click()</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">driver</span>.quit()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Selenium是一个用于测试网站的自动化测试工具，支持各种浏览器包括Chrome、Firefox、Safari等主流界面浏览器，同时也支持phantomJS无界面浏览器。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫系列之Beautiful Soup的使用</title>
    <link href="http://yoursite.com/2019/04/03/%E7%88%AC%E8%99%AB%E7%B3%BB%E5%88%97%E4%B9%8BBeautiful-Soup%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/04/03/爬虫系列之Beautiful-Soup的使用/</id>
    <published>2019-04-03T08:53:29.000Z</published>
    <updated>2019-04-03T10:45:39.814Z</updated>
    
    <content type="html"><![CDATA[<p>Beautiful Soup是Python的一个HTML或XML的解析库，可以用它来方便的从网页中提取数据。利用它可以省去很多的繁琐的提取工作，提高解析效率。在静态网页爬取中，推荐使用Beautiful Soup。<br><a id="more"></a><br>先查看下面的例子，对其有一个初步印象<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 import BeautifulSoup </span><br><span class="line">html = '''</span><br><span class="line">&lt;html&gt; &lt;head&gt;&lt;title&gt;The Dormouse ’s story&lt;/title&gt;&lt;/head&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;p <span class="built_in">class</span>=<span class="string">"title"</span> <span class="built_in">name</span>=<span class="string">"dromouse"</span>&gt;&lt;b&gt;The Dormouse ’s story&lt;/b&gt;&lt;/p&gt; </span><br><span class="line">&lt;p <span class="built_in">class</span>=<span class="string">"story"</span>&gt;Once upon a <span class="built_in">time</span> there were three little sisters; <span class="keyword">and</span> their names were </span><br><span class="line">&lt;a href=<span class="string">"http://example.com/elsie"</span> <span class="built_in">class</span>=<span class="string">"sister"</span> <span class="built_in">id</span>=<span class="string">"linkl"</span>&gt;  Elsie &lt;/a&gt;, </span><br><span class="line">&lt;a href=<span class="string">"http://example.com/lacie"</span> <span class="built_in">class</span>=<span class="string">"sister"</span> <span class="built_in">id</span>=<span class="string">"link2"</span>&gt; Lacie&lt;/a&gt; <span class="keyword">and</span> </span><br><span class="line">&lt;a href=<span class="string">"http://example.com/tillie"</span> <span class="built_in">class</span>=<span class="string">"sister"</span> <span class="built_in">id</span>=<span class="string">"link3"</span>&gt;Tillie&lt;/a&gt; ; </span><br><span class="line"><span class="keyword">and</span> they lived <span class="keyword">at</span> <span class="keyword">the</span> bottom <span class="keyword">of</span> a well .&lt;/p&gt; </span><br><span class="line">&lt;p <span class="built_in">class</span>=<span class="string">"story"</span>&gt; ... &lt;/p&gt;</span><br><span class="line">'''</span><br><span class="line">soup = BeautifulSoup(html, 'lxml')</span><br><span class="line">print(soup.p)</span><br><span class="line">print(soup.title.<span class="built_in">string</span>)</span><br><span class="line">print(soup.title.<span class="built_in">name</span>)</span><br><span class="line">print(soup.p.attrs) <span class="comment">#每个节点可能有多个属性，比如id、 class等，选择这个节点元素后，可以调用attrs获取所有属性：</span></span><br><span class="line">print(soup.p.attrs['<span class="built_in">name</span>']) <span class="comment">#两者是一样的</span></span><br><span class="line">print(soup.p['<span class="built_in">name</span>'])  </span><br><span class="line">print('*'*<span class="number">100</span>)</span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"dromouse"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>The Dormouse ’s story<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">The Dormouse ’s story</span></span><br><span class="line"><span class="xml">title</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse ’s story<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;'class': ['title'], 'name': 'dromouse'&#125;</span><span class="xml"> #attrs 的返回结果是字典形式，它把选择的节点的所有属性和属性值组合成一个字典</span></span><br><span class="line"><span class="xml">接下来，如果要获取name属性，就相当于从字典中获取某个键值，只需要用中括号加属性名就可以</span></span><br><span class="line"><span class="xml">比如，要获取name属性，就可以通过attrs[name］来得到</span></span><br><span class="line"><span class="xml">dromouse</span></span><br><span class="line"><span class="xml">*******************************************************************************</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">   The Dormouse ’s story</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"dromouse"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml">    The Dormouse ’s story</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">id</span>=<span class="string">"linkl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    Elsie</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">   ,</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/lacie"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    Lacie</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">   and</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/tillie"</span> <span class="attr">id</span>=<span class="string">"link3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    Tillie</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">   ; </span></span><br><span class="line"><span class="xml">and they lived at the bottom of a well .</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   ...</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>从运行的结果是否看出来什么？我们写的那个html，不是标准的html，但是<code>BeautifulSoup(html, &#39;lxml&#39;)</code>自动给我们补全了。</p><h1 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h1><h2 id="关联选择"><a href="#关联选择" class="headerlink" title="关联选择"></a>关联选择</h2><h3 id="子节点和子孙节点"><a href="#子节点和子孙节点" class="headerlink" title="子节点和子孙节点"></a>子节点和子孙节点</h3><p>选取节点元素之后，如果想要获取它的直接子节点，可以调用contents属性<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(soup.p.contents)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(soup.p.children)</span></span> </span><br><span class="line">#children属性来选择，返回结果是生成器类型,我们用<span class="keyword">for</span>循环输出相应的内容</span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span>, child <span class="keyword">in</span> enumerate(soup<span class="selector-class">.p</span><span class="selector-class">.children</span>): </span><br><span class="line">    print(<span class="selector-tag">i</span>, child)</span><br><span class="line">#获取所有子孙节点</span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span>, child <span class="keyword">in</span> enumerate(soup<span class="selector-class">.p</span><span class="selector-class">.descendants</span>) : </span><br><span class="line">    print(<span class="selector-tag">i</span>, child)</span><br></pre></td></tr></table></figure></p><p>运行结果就不在这里写了，大家可以自己去查看</p><h3 id="父节点和祖先节点"><a href="#父节点和祖先节点" class="headerlink" title="父节点和祖先节点"></a>父节点和祖先节点</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parent = soup<span class="selector-class">.a</span><span class="selector-class">.parent</span> 获取父节点</span><br><span class="line">parents = soup<span class="selector-class">.a</span><span class="selector-class">.parents</span> 获取所有祖先节点</span><br></pre></td></tr></table></figure><h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取下一个兄弟节点</span></span><br><span class="line"><span class="attr">next</span> = soup.a.next_sibling </span><br><span class="line"><span class="comment"># 获取上一个兄弟节点</span></span><br><span class="line"><span class="attr">previous</span> = soup.a.previous_sibling</span><br><span class="line"><span class="comment"># 获取后面和前面的所有兄弟节点</span></span><br><span class="line"><span class="attr">nexts</span> = soup.a.next_siblings</span><br><span class="line"><span class="attr">previous</span> = soup.a.previous_siblings</span><br></pre></td></tr></table></figure><h2 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h2><p>find_all，顾名思义，就是查询所有符合条件的元素，给它传入一些属性或文本，就可以得到符<br>合条件的元素，它的功能十分强大<br>它的 API 如下：<br>find_all(name, attrs, recursive, text, **kwargs) </p><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="name">soup</span>.find all(<span class="name">name=</span>'ul')) </span><br><span class="line">print(<span class="name">type</span>(<span class="name">soup</span>.find_all(<span class="name">name=</span>'ul')[O]))</span><br></pre></td></tr></table></figure><p>这里我们调用了find_all()方法，传入 name 参数，其参数值为 ul 也就是说，我想要查询所<br>ul 节点，返回结果是列表类型，长度为2 ，每个元素依然都是bs4.element.Tag 类型<br>因为都是Tag类型，所以依然可以进行嵌套查询 还是同样的文本，这里查询出所有 节点后，<br>再继续查询其内部的 li 节点<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="selector-tag">ul</span> <span class="keyword">in</span> soup.find_all(name＝<span class="string">'孔'</span>）．</span><br><span class="line">    print(<span class="selector-tag">ul</span>.find_all(name=<span class="string">'li'</span>)) </span><br><span class="line">    <span class="keyword">for</span> <span class="selector-tag">li</span> <span class="keyword">in</span> <span class="selector-tag">ul</span>.find_all(name=<span class="string">'li'</span>):</span><br><span class="line">        print(<span class="selector-tag">li</span>.string)</span><br></pre></td></tr></table></figure></p><h3 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h3><p>除了根据节点名查询，我们也可以传入一些属性来查询<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="name">soup</span>.find_all(<span class="name">attrs</span> ＝｛'id＇：'list'｝））</span><br><span class="line">print(<span class="name">soup</span>.find_all(<span class="name">attrs</span> ＝｛'name'：'elements'｝））</span><br><span class="line">print(<span class="name">soup</span>.find_all(<span class="name">attrs</span> ＝｛'class'：'sister'｝））</span><br></pre></td></tr></table></figure></p><p>对于一些常用的属性，比如id和class等， 我们可以不用attr 来传递 比如，要查询 id为list-1<br>的节点，可以直接传人id这个参数，还是上面的文本，我们换种方式来查询：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="name">soup</span>.find_all(<span class="name">id=</span>'list-1')) </span><br><span class="line">print(<span class="name">soup</span>.find_all(<span class="name">class_=</span>'element'))</span><br></pre></td></tr></table></figure></p><p>这里直接传入 id=’list-1’，就可以查询id为list-1 的节点元素了。而对于class 来说，由于class<br>Python 里是一个关键字，所以后面需要加一个下划线，即 class_=’element’，返回的结果依然还<br>Tag组成的列</p><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>text<br>text 参数可用来匹配节点的文本，传入的形式可以是字符串，可以是正 表达式对象，示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line">html=<span class="string">''' </span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt; &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;Hello, this is a link&lt;/a&gt; </span></span><br><span class="line"><span class="string">&lt;a&gt;Hello, this is a link, too&lt;/a&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> Beauti fulSoup </span><br><span class="line">soup = Beauti fulSoup(html, <span class="string">'lxml'</span> ) </span><br><span class="line">print(soup.find_all(text=re.compile(<span class="string">'link'</span>)))</span><br></pre></td></tr></table></figure></p><p> 运行结果如下：<br> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">［<span class="symbol">'Hello</span>, this <span class="keyword">is</span> a link<span class="string">','</span>Hello, this <span class="keyword">is</span> a link, too']</span><br></pre></td></tr></table></figure></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><code>find_all()</code>是返回所有匹配的列表、<code>find()</code>只返回单个元素。<br><code>find_parents()</code>和<code>find_parent()</code>:前者返 所有祖先节点 后者返回直接父节点。<br><code>find_next_siblings()</code>和<code>find_next_sibling()</code>:前者返回后面所有的兄弟，后者返回后面第一个兄弟节点<br><code>find_previous_siblings()</code>和<code>find_previous_sibling()</code>:前者返回前面所有的兄弟节点 后者返回第一个符条件的节点<br><code>find_all_next()</code>和<code>find_next()</code>:前者返回节点后所有符合条件的节点，后者返回第一个符条件的节点<br><code>find_all_previous()</code>和<code>find_previous()</code>:前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点返回前面第一个兄弟节点</p><h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><p>使用 css 选择器时，只需要调用 select()方法，传人相应的 css 选择器即可<br>这里就不多写了。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="&quot;https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html&quot;">Beautiful Soup 4.2.0 文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Beautiful Soup是Python的一个HTML或XML的解析库，可以用它来方便的从网页中提取数据。利用它可以省去很多的繁琐的提取工作，提高解析效率。在静态网页爬取中，推荐使用Beautiful Soup。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>mysql 中json的查询</title>
    <link href="http://yoursite.com/2019/04/02/mysql-%E4%B8%ADjson%E7%9A%84%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2019/04/02/mysql-中json的查询/</id>
    <published>2019-04-02T03:19:45.000Z</published>
    <updated>2021-01-19T06:15:26.606Z</updated>
    
    <content type="html"><![CDATA[<p>在mysql中查询json<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> agency_screen <span class="keyword">WHERE</span> JSON_EXTRACT(ext_property, <span class="string">"$.ad_is_refresh"</span>) = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在mysql中查询json&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co
      
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Supervisord 启动报错:No such file or directory: file: /usr/lib/python2.7/socket.py line: 224</title>
    <link href="http://yoursite.com/2019/03/20/Supervisord-%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99-No-such-file-or-directory-file-usr-lib-python2-7-socket-py-line-224/"/>
    <id>http://yoursite.com/2019/03/20/Supervisord-启动报错-No-such-file-or-directory-file-usr-lib-python2-7-socket-py-line-224/</id>
    <published>2019-03-20T08:09:50.000Z</published>
    <updated>2019-03-20T08:16:48.309Z</updated>
    
    <content type="html"><![CDATA[<p>最近在部署的时候遇到一个错误<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">error:</span> , [Errno <span class="number">2</span>] No such file or <span class="symbol">directory:</span> <span class="symbol">file:</span> /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">python2</span>.7/<span class="title">socket</span>.<span class="title">py</span> <span class="title">line</span>: 224</span></span><br></pre></td></tr></table></figure></p><p>如上，如果 supervisord 正常启动过，突然报这个错误，则有可能是非正常关闭导致的。<br>此时，需要强行关闭后，再正常启动即可。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> aux | <span class="keyword">grep</span> supervisord</span><br></pre></td></tr></table></figure><p>首先用<code>sudo kill -9 XXX</code>关闭supervisord<br>然后关闭运营中的程序<br>然后启动<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="regexp">/bin/</span>supervisord -c <span class="regexp">/etc/</span>supervisord<span class="regexp">/supervisord.conf</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在部署的时候遇到一个错误&lt;br&gt;&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td clas
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>ssl.SSLError: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version错误</title>
    <link href="http://yoursite.com/2019/02/27/ssl-SSLError-SSL-TLSV1-ALERT-PROTOCOL-VERSION-tlsv1-alert-protocol-version%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2019/02/27/ssl-SSLError-SSL-TLSV1-ALERT-PROTOCOL-VERSION-tlsv1-alert-protocol-version错误/</id>
    <published>2019-02-27T10:29:56.000Z</published>
    <updated>2019-02-27T10:35:34.843Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写一个demo的时候，报了这个错误。代码如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">r = requests.<span class="built_in">get</span>(<span class="string">"https://github.com/favicon.ico"</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(r.content)</span><br></pre></td></tr></table></figure></p><p>运行报错，错误消息如下:<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Users/FQY/env350/lib/python3.5/site-packages/urllib3/connectionpool.py"</span>, <span class="literal">line</span> <span class="number">600</span>, <span class="keyword">in</span> urlopen</span><br><span class="line">    chunked=chunked)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Users/FQY/env350/lib/python3.5/site-packages/urllib3/connectionpool.py"</span>, <span class="literal">line</span> <span class="number">343</span>, <span class="keyword">in</span> _make_request</span><br><span class="line">    self._validate_conn(conn)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Users/FQY/env350/lib/python3.5/site-packages/urllib3/connectionpool.py"</span>, <span class="literal">line</span> <span class="number">849</span>, <span class="keyword">in</span> _validate_conn</span><br><span class="line">    conn.connect()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Users/FQY/env350/lib/python3.5/site-packages/urllib3/connection.py"</span>, <span class="literal">line</span> <span class="number">356</span>, <span class="keyword">in</span> connect</span><br><span class="line">    ssl_context=<span class="keyword">context</span>)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Users/FQY/env350/lib/python3.5/site-packages/urllib3/util/ssl_.py"</span>, <span class="literal">line</span> <span class="number">359</span>, <span class="keyword">in</span> ssl_wrap_socket</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">context</span>.wrap_socket(sock, server_hostname=server_hostname)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ssl.py"</span>, <span class="literal">line</span> <span class="number">376</span>, <span class="keyword">in</span> wrap_socket</span><br><span class="line">    _context=self)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ssl.py"</span>, <span class="literal">line</span> <span class="number">747</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    self.do_handshake()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ssl.py"</span>, <span class="literal">line</span> <span class="number">983</span>, <span class="keyword">in</span> do_handshake</span><br><span class="line">    self._sslobj.do_handshake()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ssl.py"</span>, <span class="literal">line</span> <span class="number">628</span>, <span class="keyword">in</span> do_handshake</span><br><span class="line">    self._sslobj.do_handshake()</span><br><span class="line">ssl.SSLError: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (_ssl.c:<span class="number">646</span>)</span><br></pre></td></tr></table></figure></p><p>网上百度都说的是要升级pip或者python，因为我用的是python3.5，应该不是这个问题，所以应该升级openssl<br><strong>升级</strong><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip <span class="keyword">install</span> pyopenssl</span><br></pre></td></tr></table></figure></p><p>这时候在运行就没问题了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在写一个demo的时候，报了这个错误。代码如下:&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫系列之requests的使用</title>
    <link href="http://yoursite.com/2019/02/27/%E7%88%AC%E8%99%AB%E7%B3%BB%E5%88%97%E4%B9%8Brequests%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/02/27/爬虫系列之requests的使用/</id>
    <published>2019-02-27T09:47:38.000Z</published>
    <updated>2019-03-18T06:01:31.086Z</updated>
    
    <content type="html"><![CDATA[<p>requests是一个很常用的python库。它有GET、POST、PUT、DELETE等方法。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip <span class="keyword">install</span> requests</span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p><strong>常用方式</strong><br>HTTP中最常见的请求之一就是GET请求，下面我们详细了解一下requests构建GET请求。回应的请求信息:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">r = requests.get(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(r.text)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(type(r.text)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(r.json()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(type(r.json()</span></span>))</span><br></pre></td></tr></table></figure></p><p>运行结果如下:<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.19.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"104.222.246.242, 104.222.246.242"</span>,</span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;class <span class="string">'str'</span>&gt;</span><br><span class="line">&#123;<span class="string">'args'</span>: &#123;&#125;, <span class="string">'url'</span>: <span class="string">'https://httpbin.org/get'</span>, <span class="string">'headers'</span>: &#123;<span class="string">'Host'</span>: <span class="string">'httpbin.org'</span>, <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>, <span class="string">'Accept'</span>: <span class="string">'*/*'</span>, <span class="string">'User-Agent'</span>: <span class="string">'python-requests/2.19.1'</span>&#125;, <span class="string">'origin'</span>: <span class="string">'104.222.246.242, 104.222.246.242'</span>&#125;</span><br><span class="line">&lt;class <span class="string">'dict'</span>&gt;</span><br></pre></td></tr></table></figure></p><p>可以发现，我们成功发起了GET请求，返回结果包含请求头、URL、IP等信息。并且可以看到r.text()，r.json()的类型。</p><p><strong>抓取网页</strong><br>上面的请求链接返回的是 JSON 形式的字符串， 那么如果请求普通 的网页，则 肯定能获得相应的 内容了。 下面以“知乎”→“发现”页面为例来看一下:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    'User-Agent':<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get('https://www.zhihu.com/explore', headers=headers)</span><br><span class="line">pattern = re.compile('explore-feed.*?question_link.*?&gt;(.*?)&lt;/a&gt;', re.S)</span><br><span class="line">titles = re.findall(pattern, r.text)</span><br><span class="line">print(titles)</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ['<span class="symbol">\n</span>癌症是怎样被检查出来的，普通体检能查出癌症吗？<span class="symbol">\n</span>', '<span class="symbol">\n</span>如何看待主播余小 C 打到峡谷之巅最强王者 900 点？<span class="symbol">\n</span>', '<span class="symbol">\n</span>如何评价90年代幻想娱乐小说（以富士见Fantasia文库为代表）在轻小说发展史中的位置？乐于见到《流浪地球》票房大卖？<span class="symbol">\n</span>', '<span class="symbol">\n</span>郭德纲对张云雷是怎样的态度?<span class="symbol">\n</span>', '<span class="symbol">\n</span>你最讨厌什么梗？<span class="symbol">\n</span>', '<span class="symbol">\n</span>说下你使用后大爱恨不得安利全世界的护肤品/化妆品？<span class="symbol">\n</span>', '<span class="symbol">\n</span>高中作文如何得到 50 以上的分数？<span class="symbol">\n</span>']</span><br></pre></td></tr></table></figure></p><p>发现这里添加了heades，不然爬虫知乎发现页会报错。</p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p><strong>常用方式</strong><br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> =&#123;<span class="string">'name'</span>:<span class="string">'germey'</span>, <span class="string">'age'</span>:<span class="string">'22'</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, <span class="keyword">data</span>=<span class="keyword">data</span>)</span><br><span class="line">print(r.<span class="keyword">text</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"args"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"data"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"files"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"form"</span>: &#123;</span><br><span class="line">    <span class="attr">"age"</span>: <span class="string">"22"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"germey"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">    <span class="attr">"Content-Length"</span>: <span class="string">"18"</span>,</span><br><span class="line">    <span class="attr">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>,</span><br><span class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"python-requests/2.19.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"json"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"origin"</span>: <span class="string">"104.222.246.242, 104.222.246.242"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://httpbin.org/post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以发现，我们成功获得了返回结果,其中 form 部分就是提交的数据，这就证明POST请求成功发送了 。<br><em>**相应</em><br>在这里我们看下常用的相应方式<br>r = requests.get(‘<a href="http://www.jianshu.com&#39;" target="_blank" rel="noopener">http://www.jianshu.com&#39;</a>)<br>print(r.status_code)<br>print(r.headers)<br>print(r.cookies)<br>print(r.text)<br>print(r.content)<br>print(r.history)<br>print(r.json())<br>其他的方法和这类似，大家可以相继试一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;requests是一个很常用的python库。它有GET、POST、PUT、DELETE等方法。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python encode和decode函数的用法</title>
    <link href="http://yoursite.com/2019/02/26/python-encode%E5%92%8Cdecode%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/26/python-encode和decode函数的用法/</id>
    <published>2019-02-26T03:53:16.000Z</published>
    <updated>2019-02-26T05:53:44.725Z</updated>
    
    <content type="html"><![CDATA[<p>从英文意思上看，encode和decode分别指编码和解码。在python中，Unicode类型是作为编码的基础类型。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">     encode                 decode</span><br><span class="line"><span class="built_in">str</span> ---------&gt; Unicode ---------&gt; <span class="built_in">str</span></span><br></pre></td></tr></table></figure></p><pre><code>encode的作用是将其他编码的字符串转换成unicode编码，如str1.encode(&apos;gb2312&apos;)，表示将gb2312编码的字符串str1转换成unicode编码。 decode的作用是将unicode编码转换成其他编码的字符串，如str2.decode(&apos;gb2312&apos;)，表示将unicode编码的字符串str2转换成gb2312编码</code></pre><p><code>因此，转码的时候一定要先搞明白，字符串str是什么编码，然后decode成unicode，然后再encode成其他编码</code><br>下面咱们用几个例子来看下:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'中国，你好'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'type is &#123;&#125;'</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(s)))</span><br><span class="line"># 用encode进行编码</span><br><span class="line">s1 = s.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'s1 is &#123;&#125;'</span>.<span class="built_in">format</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'type is &#123;&#125;'</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(s1)))</span><br><span class="line"># 用decode进行编码</span><br><span class="line">s2 = s1.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'s2 is &#123;&#125;'</span>.<span class="built_in">format</span>(s2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'type is &#123;&#125;'</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(s2)))</span><br></pre></td></tr></table></figure></p><p>运行结果是：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">is</span> &lt;<span class="keyword">class</span> <span class="string">'str'</span>&gt;</span><br><span class="line">s1 <span class="keyword">is</span> b<span class="string">'\xe4\xb8\xad\xe5\x9b\xbd\xef\xbc\x8c\xe4\xbd\xa0\xe5\xa5\xbd'</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">is</span> &lt;<span class="keyword">class</span> <span class="string">'bytes'</span>&gt;</span><br><span class="line">s2 <span class="keyword">is</span> 中国，你好</span><br><span class="line"><span class="keyword">type</span> <span class="keyword">is</span> &lt;<span class="keyword">class</span> <span class="string">'str'</span>&gt;</span><br></pre></td></tr></table></figure></p><p>看完运行结果大家就知道怎么用了。😆</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从英文意思上看，encode和decode分别指编码和解码。在python中，Unicode类型是作为编码的基础类型。&lt;br&gt;&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫系列之urllib的使用</title>
    <link href="http://yoursite.com/2019/02/25/%E7%88%AC%E8%99%AB%E7%B3%BB%E5%88%97-urllib%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/02/25/爬虫系列-urllib的使用/</id>
    <published>2019-02-25T08:03:36.000Z</published>
    <updated>2019-02-27T09:46:59.648Z</updated>
    
    <content type="html"><![CDATA[<p>urllib库是python爬虫中的常用库，这个库来说，我们不需要关心请求的链接是什么，需要传的参数是什么，以及如何设置可选的请求头就好了，不用深入到底层去了解它到底是怎样的传输和通信的。有了它，两行代码就可以完成一个请求和相应的处理过程，得到网页。<br><a id="more"></a></p><h1 id="urllib的模块"><a href="#urllib的模块" class="headerlink" title="urllib的模块"></a>urllib的模块</h1><p>urllib包含4个模块：<br>    <code>request</code>:它是最基本的HTTP请求模块，可以用了模拟发送请求<br>    <code>error</code>:异常处理模块，如果出现请求错误，我们可以捕获这些异常，然后进行重试或其他操作以保证程序不会意外终止。<br>    <code>parse</code>:一个工具模块，提供了许多URL处理方法，比如拆分、解析、合并等。<br>    <code>rebotparser</code>:主要是用来识别网站的rebots.txt文件，然后判断哪些网站可以爬，哪些网站不可以爬，实际用的不多。</p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>我们知道利用 urlopen()方法可以实现最基本请求的发起，但这几个简单的参数并不足以构建一<br>个完整的请求。<br>如果请求中需要加入 Headers等信息，就可以利用更强大的 Request类来构建。 首先，我们用实例来感受一下 Request 的用法:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">request = urllib<span class="selector-class">.request</span><span class="selector-class">.Request</span>(<span class="string">'https://python.org'</span>) </span><br><span class="line">response = urllib<span class="selector-class">.request</span><span class="selector-class">.urlopen</span>(request) </span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(response.read()</span></span>.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><p>可以发现，我们依然是用 urlopen()方法来发送这个请求，只不过这次该方法的参数不再是 URL, 而是一个 Request 类型的对象 。 通过构造这个数据结构，一方面我们可以将请求独立成一个对象，另 一方面可更加丰富和灵活地配置参数 。<br>下面我们看一下 Request可以通过怎样的参数来构造，它的构造方法如下:<br><code>class urllib. request. Request (ur1, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)</code></p><ul><li>第一个参数 url用于请求 URL， 这是必传参数，其他都是可选参数。</li><li>第二个参数 data 如果要传，必须传 bytes (字节流)类型的 。 如果它是字典，可以先用 urllib.parse模块里的 urlencode()编码。</li><li>第三个参数 headers是一个字典，它就是请求头，我们可以在构造请求时通过 headers参数直 接构造，也可以通过调用请求实例的 add_header()方法添加。<br>添加请求头最常用的用法就是通过修改 User-Agent 来伪装浏览器，默认的 User-Agent 是 一’- Python-urllib，我们可以通过修改它来伪装浏览器 。 比如要伪装火狐浏览器，你可以把它设 E 置为 :<br>问ozilla/s.o (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11</li><li>第四个参数 origin_req_host指的是请求方的 host名称或者 IP地址。</li><li>第五个参数 unveri干iable表示这个请求是否是无法验证 的，默认是 False，意思就是说用户没<br>有足够权限来选择接收这个请求的结果。 例如，我们请求一个 HTML文档中的图片，但是我<br>们没有向动抓取图像的权限，这时 unverifiable 的值就是 True。</li><li>第六个参数 method是一个字符串，用来指示请求使用的方法，比如 GET、 POST和 PUT等。</li></ul><p><strong>例子</strong><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">headers = <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    "Host": "httpbin.org",</span></span><br><span class="line"><span class="comment">    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36",</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line">data = bytes(parse.urlencode(<span class="comment">&#123;'word':'中国, 你好'&#125;</span>), encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">req = request.Request(url=url, data=data, headers=headers, <span class="function"><span class="keyword">method</span>='<span class="title">POST</span>')</span></span><br><span class="line"><span class="function"><span class="title">response</span> = <span class="title">request</span>.<span class="title">urlopen</span><span class="params">(req)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'respin is &#123;&#125;'</span>.format(response.<span class="keyword">read</span>()</span>.<span class="title">decode</span><span class="params">(<span class="string">'utf-8'</span>)</span>))</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">respin is &#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"data"</span>: <span class="string">"word=%E4%B8%AD%E5%9B%BD%2C+%E4%BD%A0%E5%A5%BD"</span>, </span><br><span class="line">  <span class="string">"files"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"form"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"identity"</span>, </span><br><span class="line">    <span class="string">"Content-Length"</span>: <span class="string">"45"</span>, </span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"json"</span>: null, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"104.222.246.242, 104.222.246.242"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><p>在上面的过程中，我们虽然可以构造请求，但是对于一些更高级的操作(比如 Cookies处理 、 代 理设置等)，我们该怎么办呢?<br>接下来，就需要更强大的工具 Handler 登场了 。 简而言之，我们可以把它理解为各种处理器，有 专门处理登录验证的，有处理 Cookies 的，有处理代理设置的 。 利用它们，我们几乎可以做到 HTTP 请求中所有的事情 。<br>首先，介绍一下 urllib.request 模块里的 BaseHandler类，它是所有其他 Handler 的父类，它提 供了最基本的方法，例如 default_open()、 protocol_request()等。<br>接下来，就有各种 Handler 子类继承这个 BaseHandler类，举例如下 。<br>口 HITPDefaultErrorHandler:用于处理HTTP响应错误，错误都会抛出 HTTPError类型的异常。 口 HTTPRedirectHandler:用于处理重定向 。<br>口 HTTPCookieProcessor: 用于处理 Cookies。<br>口 ProxyHandler:用于设置代理 ， 默认代理为空 。<br>口 HπPPasswordMgr:用于管理密码，它维护了用户名和密码的表。<br>口 HTTPBasicAuthHandler: 用于管理认证，如果一个链接打开时需要认证，那么可以用它来解<br>决认证问题 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;urllib库是python爬虫中的常用库，这个库来说，我们不需要关心请求的链接是什么，需要传的参数是什么，以及如何设置可选的请求头就好了，不用深入到底层去了解它到底是怎样的传输和通信的。有了它，两行代码就可以完成一个请求和相应的处理过程，得到网页。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>hexo 添加本地图片</title>
    <link href="http://yoursite.com/2019/02/14/hexo-%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2019/02/14/hexo-添加本地图片/</id>
    <published>2019-02-14T03:15:30.000Z</published>
    <updated>2019-02-14T03:47:59.453Z</updated>
    
    <content type="html"><![CDATA[<p>hexo插入图片的方式有好几种，链接或者本地图片，介于链接图片有可能失效的原因，用本地图片是最省事的，目前插入本地图片有两种方式。</p><ul><li>跟随文章的创建图片文件夹</li><li>创建总的图片文件夹<a id="more"></a><h1 id="跟随文章的创建方式"><a href="#跟随文章的创建方式" class="headerlink" title="跟随文章的创建方式"></a>跟随文章的创建方式</h1><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4>根目录下的配置文件_config.yml里的post_asset_folder选项设置为true。新建文章的时候会同时创建一个同名文件夹用于放图片。<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4>执行命令<code>npm install hexo-asset-image --save</code> ，下载安装一个可以上传本地图片的插件。<br>使用的时候，只需要图片名就可以 <code>![](test.jpg)</code><br><strong>例如</strong>我创建的这篇文章，<code>hexo 添加本地图片</code><br><img src="/2019/02/14/hexo-添加本地图片/1550115421513.jpg" alt=""><br>然后下面就生成了相应的文件夹，这个文件夹下面存放相应的图片。<br><img src="/2019/02/14/hexo-添加本地图片/1550115487994.jpg" alt=""><br>这时候我只需要引用<code>![](1550115421513.jpg)</code>就可以了。</li></ul><h1 id="创建总的图片文件夹"><a href="#创建总的图片文件夹" class="headerlink" title="创建总的图片文件夹"></a>创建总的图片文件夹</h1><p>在主题的 source 下面新建一个 文件夹（比如uploads）用于专门放置这些图片资源。<br>使用的时候使用<code>![](/uploads/test.jpg)</code>的方式。</p><p>PS:你可以根据自己的爱好去选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo插入图片的方式有好几种，链接或者本地图片，介于链接图片有可能失效的原因，用本地图片是最省事的，目前插入本地图片有两种方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟随文章的创建图片文件夹&lt;/li&gt;
&lt;li&gt;创建总的图片文件夹&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git push github失败，提示SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</title>
    <link href="http://yoursite.com/2019/02/13/git-push-github%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%8F%90%E7%A4%BASSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443/"/>
    <id>http://yoursite.com/2019/02/13/git-push-github失败，提示SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443/</id>
    <published>2019-02-13T09:03:06.000Z</published>
    <updated>2019-02-13T09:06:46.605Z</updated>
    
    <content type="html"><![CDATA[<p>今天git push 发现出现错误，很莫名其妙，错误的详情如下:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fata<span class="variable">l:</span> unable <span class="keyword">to</span> access <span class="string">'https://github.com/XXXX/XXXX.git/'</span>: </span><br><span class="line">LibreSSL SSL_connec<span class="variable">t:</span> SSL_ERROR_SYSCALL in connection <span class="keyword">to</span> github.<span class="keyword">com</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure></p><p>然后去网上根据这个错误提示搜了一下，发现是因为Git的Http代理的问题，Git支持三种协议：git://、ssh://和http://，本来push的时候应该走ssh隧道的，但是因为设置了http代理，所以就走了http的代理，于是就提交不了了。<br>OK，找到原因了，那就取消http代理吧：</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在github项目在本地的根目录下打开git命令行，<br>执行下面的命令<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global --unset http.proxy</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天git push 发现出现错误，很莫名其妙，错误的详情如下:&lt;br&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx https 证书配置</title>
    <link href="http://yoursite.com/2019/02/12/nginx-https-%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/02/12/nginx-https-证书配置/</id>
    <published>2019-02-12T10:47:58.000Z</published>
    <updated>2019-02-12T11:17:10.099Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>https</code>需要配置SSL证书,因为我使用的阿里云，所以下面是阿里云的配置<br><a id="more"></a></p><h1 id="域名解析到服务器"><a href="#域名解析到服务器" class="headerlink" title="域名解析到服务器"></a>域名解析到服务器</h1><p><img src="https://upload-images.jianshu.io/upload_images/2120155-75e80c50ad68a36d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="服务器ip设置.png"></p><h1 id="申请ca证书"><a href="#申请ca证书" class="headerlink" title="申请ca证书"></a>申请ca证书</h1><p>在阿里云控制台-产品与服务-安全(云盾)-CA证书服务(数据安全)，点击购买证书<br><img src="https://upload-images.jianshu.io/upload_images/2120155-0cf7dcf151d4b1e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="免费证书.png"><br>选择“免费版DV SSL”，点击立即购买:<br><img src="http://upload-images.jianshu.io/upload_images/2120155-fe1efa0d69767d4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="免费证书.png"><br>然后点去支付:<br><img src="http://upload-images.jianshu.io/upload_images/2120155-75725ac45e2fd02a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="免费证书.png"><br>最后确认支付:<br><img src="http://upload-images.jianshu.io/upload_images/2120155-de55bd8685494a4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="免费证书.png"><br>就会回到管理界面,然后根据说明去配置。<strong>说明：因为我们这里申请的是开发版免费证书，所以一个证书仅支持一个域名认证，不支持通配符。</strong><br>等待几分钟，证书状态变为“已签发”后，证书就申请成功了。</p><h1 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h1><p>列表中找到已签发的证书，下载, 下载的时候选择Nginx。<br>然后把相应的正式传到服务器,命令方法使用<code>scp</code>。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>scp -r root<span class="variable">@43</span>.<span class="number">224.34</span>.<span class="number">73</span><span class="symbol">:/home/lk</span> /root</span><br></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/tianhei/p/7726505.html" target="_blank" rel="noopener">nginx配置ssl证书实现https访问</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用&lt;code&gt;https&lt;/code&gt;需要配置SSL证书,因为我使用的阿里云，所以下面是阿里云的配置&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx http和https配置</title>
    <link href="http://yoursite.com/2019/02/12/nginx-http%E5%92%8Chttps%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/02/12/nginx-http和https配置/</id>
    <published>2019-02-12T10:23:28.000Z</published>
    <updated>2019-02-12T11:07:10.458Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="nginx配置详解"><a href="#nginx配置详解" class="headerlink" title="nginx配置详解"></a>nginx配置详解</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line">user www-data;             <span class="comment">## 配置 worker 进程的用户和组</span></span><br><span class="line">worker_processes auto;     <span class="comment">## 配置 worker 进程启动的数量，建议配置为 CPU 核心数</span></span><br><span class="line">error_log logs/<span class="keyword">error</span>.<span class="built_in">log</span>;  <span class="comment">## 全局错误日志</span></span><br><span class="line">pid /<span class="built_in">run</span>/nginx.pid;        <span class="comment">## 设置记录主进程 ID 的文件</span></span><br><span class="line">worker_rlimit_nofile <span class="number">8192</span>; <span class="comment">## 配置一个工作进程能够接受并发连接的最大数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># 工作模式及连接数上限</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">events &#123;</span><br><span class="line">    <span class="comment"># epoll 是多路复用 IO（I/O Multiplexing）中的一种方式，</span></span><br><span class="line">    <span class="comment"># 仅用于 Linux 2.6 以上内核，可以大大提高 Nginx 性能</span></span><br><span class="line">    use epoll</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 单个后台 worker process 进程的最大并发链接数</span></span><br><span class="line">    <span class="comment"># 并发总数 max_clients = worker_professes * worker_connections</span></span><br><span class="line">    worker_connections <span class="number">4096</span>;  <span class="comment">## Defaule: 1024</span></span><br><span class="line">    <span class="comment"># multi_accept on;  ## 指明 worker 进程立刻接受新的连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># http 模块</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Basic Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span></span><br><span class="line">    <span class="comment">#对于普通应用，必须设为 on,</span></span><br><span class="line">    <span class="comment">#如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，</span></span><br><span class="line">    <span class="comment">#以平衡磁盘与网络 I/O 处理速度，降低系统的 uptime.</span></span><br><span class="line">    sendfile <span class="keyword">on</span>;</span><br><span class="line">    tcp_nopush <span class="keyword">on</span>;</span><br><span class="line">    tcp_nodelay <span class="keyword">on</span>;</span><br><span class="line">    keepalive_timeout <span class="number">65</span>;      <span class="comment">## 连接超时时间</span></span><br><span class="line">    types_hash_max_size <span class="number">2048</span>;  <span class="comment">## 指定散列类型表的最大大小</span></span><br><span class="line">    <span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># server_names_hash_bucket_size 64;  # this seems to be required for some vhosts</span></span><br><span class="line">    <span class="comment"># server_name_in_redirect off;</span></span><br><span class="line">    </span><br><span class="line">    include /etc/nginx/mime.types;  <span class="comment">## 设定 mine 类型</span></span><br><span class="line">    default_type <span class="built_in">application</span>/octet-stream;</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 设定请求缓冲</span></span><br><span class="line">    client_header_buffer_size    <span class="number">128</span>k; <span class="comment"># 指定客户端请求头缓存大小，当请求头大于 1KB 时会用到该项</span></span><br><span class="line">    large_client_header_buffers  <span class="number">4</span> <span class="number">128</span>k; <span class="comment"># 最大数量和最大客户端请求头的大小</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># SSL Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启用所有协议，禁用已废弃的不安全的SSL 2 和SSL 3</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">    <span class="comment"># 让服务器选择要使用的算法套件</span></span><br><span class="line">    ssl_prefer_server_ciphers <span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Logging Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    access_log /var/<span class="built_in">log</span>/nginx/access.<span class="built_in">log</span>;  <span class="comment">## 访问日志</span></span><br><span class="line">    error_log /var/<span class="built_in">log</span>/nginx/<span class="keyword">error</span>.<span class="built_in">log</span>;    <span class="comment">## 错误日志</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Gzip Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    gzip <span class="keyword">on</span>;</span><br><span class="line">    gzip_disable <span class="string">"msie6"</span>;</span><br><span class="line">    <span class="built_in">text</span>/xml <span class="built_in">application</span>/xml <span class="built_in">application</span>/xml+rss <span class="built_in">text</span>/javascript;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Virtual Host Configs</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;   <span class="comment"># 这个文件夹默认是空的</span></span><br><span class="line">    include /etc/nginx/sites-enabled/*; <span class="comment"># 开启的 Server 服务配置</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># mail 模块</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">        </span><br><span class="line">mail &#123;</span><br><span class="line">    <span class="comment"># See sample authentication script at:</span></span><br><span class="line">    <span class="comment"># http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># auth_http localhost/auth.php;</span></span><br><span class="line">    <span class="comment"># pop3_capabilities "TOP" "USER";</span></span><br><span class="line">    <span class="comment"># imap_capabilities "IMAP4rev1" "UIDPLUS";</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen     localhost:<span class="number">110</span>;</span><br><span class="line">        protocol   pop3;</span><br><span class="line">        proxy      <span class="keyword">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen     localhost:<span class="number">143</span>;</span><br><span class="line">        protocol   imap;</span><br><span class="line">        proxy      <span class="keyword">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结来说</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main：用于进行nginx全局信息的配置</span><br><span class="line">events：用于nginx工作模式的配置</span><br><span class="line"><span class="keyword">http</span>：用于进行<span class="keyword">http</span>协议信息的一些配置</span><br><span class="line">server：用于进行服务器访问信息的配置</span><br><span class="line">location：用于进行访问路由的配置</span><br><span class="line">upstream：用于进行负载均衡的配置</span><br></pre></td></tr></table></figure></p><h1 id="目前使用的一些nginx配置"><a href="#目前使用的一些nginx配置" class="headerlink" title="目前使用的一些nginx配置"></a>目前使用的一些nginx配置</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user nginx;</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"><span class="comment">#worker_rlimit_nofile 65535;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class="line"><span class="comment">#include /usr/share/nginx/modules/*.conf;</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="comment"># include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这段是只http的时候设置的</span></span><br><span class="line">    <span class="comment">#***************************************************************************</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">        <span class="comment">#listen       80;</span></span><br><span class="line">    <span class="comment">#server_name localhost;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># root         /usr/share/nginx/html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        <span class="comment">#include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#location / &#123;</span></span><br><span class="line">        <span class="comment">#proxy_pass http://localhost:8080;</span></span><br><span class="line">        <span class="comment">#proxy_set_header Host $host;</span></span><br><span class="line">        <span class="comment">#proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">        <span class="comment">#proxy_set_header X-Scheme $scheme;</span></span><br><span class="line">        <span class="comment">#proxy_pass_header Server;</span></span><br><span class="line">        <span class="comment">#proxy_redirect on;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">    <span class="comment">#***************************************************************************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这段是只https的时候设置的</span></span><br><span class="line">    <span class="comment">#***************************************************************************</span></span><br><span class="line">   <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>   XXX.XXXX.com;</span><br><span class="line">        <span class="attribute">return</span>        <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">        <span class="attribute">server_name</span>   XXX.XXXX.com;</span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span>   cert/XXX.XXXX.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  cert/XXX.XXXX.key;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /&#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://localhost:8080;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#****************************************************************************</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;nginx配置详解&quot;&gt;&lt;a href=&quot;#nginx配置详解&quot; class=&quot;headerlink&quot; title=&quot;nginx配置详解&quot;&gt;&lt;/a&gt;nginx配置详解&lt;/h1&gt;&lt;figure class=&quot;highlight ap
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
</feed>
